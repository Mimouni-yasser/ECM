
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  000204f8  2**0
                  CONTENTS
  4 .ARM          00000000  08005508  08005508  000204f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005508  08005508  000204f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  08005510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200004f8  08005a08  000204f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08005a08  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c79b  00000000  00000000  00020521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e73  00000000  00000000  0002ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017474  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2e1  00000000  00000000  0004781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a14  00000000  00000000  00054afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de511  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  000de564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004f8 	.word	0x200004f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080054cc 	.word	0x080054cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004fc 	.word	0x200004fc
 800014c:	080054cc 	.word	0x080054cc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <Interpolate_2D>:
    {67, 76, 83, 87, 85, 91, 100, 108, 119, 110, 102, 90},
    {80, 88, 93, 96, 90, 97, 105, 115, 126, 118, 108, 94},
    {83, 94, 101, 106, 99, 105, 116, 124, 133, 127, 117, 105}};


float Interpolate_2D(float T[N][N], const float *Var, const float *RPM, float x, float y){
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
    if (x < 300.0 || x > 7000.0 || y < 20.0 || y > 200.0) {
 8000db2:	492b      	ldr	r1, [pc, #172]	; (8000e60 <Interpolate_2D+0xbc>)
 8000db4:	6838      	ldr	r0, [r7, #0]
 8000db6:	f7ff ffad 	bl	8000d14 <__aeabi_fcmplt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d114      	bne.n	8000dea <Interpolate_2D+0x46>
 8000dc0:	4928      	ldr	r1, [pc, #160]	; (8000e64 <Interpolate_2D+0xc0>)
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f7ff ffc4 	bl	8000d50 <__aeabi_fcmpgt>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <Interpolate_2D+0x46>
 8000dce:	4926      	ldr	r1, [pc, #152]	; (8000e68 <Interpolate_2D+0xc4>)
 8000dd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dd2:	f7ff ff9f 	bl	8000d14 <__aeabi_fcmplt>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <Interpolate_2D+0x46>
 8000ddc:	4923      	ldr	r1, [pc, #140]	; (8000e6c <Interpolate_2D+0xc8>)
 8000dde:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000de0:	f7ff ffb6 	bl	8000d50 <__aeabi_fcmpgt>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <Interpolate_2D+0x4a>
        return -1;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <Interpolate_2D+0xcc>)
 8000dec:	e128      	b.n	8001040 <Interpolate_2D+0x29c>
    }
    int i, j;
    for (i = 0; i < N && RPM[i] <= x; i++);
 8000dee:	2300      	movs	r3, #0
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df2:	e002      	b.n	8000dfa <Interpolate_2D+0x56>
 8000df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df6:	3301      	adds	r3, #1
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dfc:	2b0b      	cmp	r3, #11
 8000dfe:	dc0b      	bgt.n	8000e18 <Interpolate_2D+0x74>
 8000e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f7ff ff95 	bl	8000d3c <__aeabi_fcmpge>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1ed      	bne.n	8000df4 <Interpolate_2D+0x50>
    for (j = 0; j < N && Var[j] <= y; j++);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e1c:	e002      	b.n	8000e24 <Interpolate_2D+0x80>
 8000e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e20:	3301      	adds	r3, #1
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e26:	2b0b      	cmp	r3, #11
 8000e28:	dc0b      	bgt.n	8000e42 <Interpolate_2D+0x9e>
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	4413      	add	r3, r2
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000e38:	f7ff ff80 	bl	8000d3c <__aeabi_fcmpge>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1ed      	bne.n	8000e1e <Interpolate_2D+0x7a>

    if (i == 0 || j == 0 || i == N || j == N) {
 8000e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <Interpolate_2D+0xb6>
 8000e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <Interpolate_2D+0xb6>
 8000e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	d002      	beq.n	8000e5a <Interpolate_2D+0xb6>
 8000e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d10c      	bne.n	8000e74 <Interpolate_2D+0xd0>
        return -1;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <Interpolate_2D+0xcc>)
 8000e5c:	e0f0      	b.n	8001040 <Interpolate_2D+0x29c>
 8000e5e:	bf00      	nop
 8000e60:	43960000 	.word	0x43960000
 8000e64:	45dac000 	.word	0x45dac000
 8000e68:	41a00000 	.word	0x41a00000
 8000e6c:	43480000 	.word	0x43480000
 8000e70:	bf800000 	.word	0xbf800000
    }

    const float x1 = RPM[i-1], x2 = RPM[i];
 8000e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	647b      	str	r3, [r7, #68]	; 0x44
 8000e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
    const float y1 = Var[j-1], y2 = Var[j];
 8000e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	4413      	add	r3, r2
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
    const float f11 = T[j-1][i-1], f12 = T[j-1][i], f21 = T[j][i-1], f22 = T[j][i];
 8000eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	3b30      	subs	r3, #48	; 0x30
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8000eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	3b30      	subs	r3, #48	; 0x30
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28

    const float factor_1 = (y2 - y) / (y2 - y1);
 8000f14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f18:	f7ff fc54 	bl	80007c4 <__aeabi_fsub>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461c      	mov	r4, r3
 8000f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f24:	f7ff fc4e 	bl	80007c4 <__aeabi_fsub>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fe07 	bl	8000b40 <__aeabi_fdiv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    const float factor_2 = (y - y1) / (y2 - y1);
 8000f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f38:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f3a:	f7ff fc43 	bl	80007c4 <__aeabi_fsub>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461c      	mov	r4, r3
 8000f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f46:	f7ff fc3d 	bl	80007c4 <__aeabi_fsub>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fdf6 	bl	8000b40 <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	623b      	str	r3, [r7, #32]
    const float one = (x2 - x) / (x2 - x1);
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f5c:	f7ff fc32 	bl	80007c4 <__aeabi_fsub>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461c      	mov	r4, r3
 8000f64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f68:	f7ff fc2c 	bl	80007c4 <__aeabi_fsub>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fde5 	bl	8000b40 <__aeabi_fdiv>
 8000f76:	4603      	mov	r3, r0
 8000f78:	61fb      	str	r3, [r7, #28]
    const float two = (x - x1) / (x2 - x1);
 8000f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff fc21 	bl	80007c4 <__aeabi_fsub>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461c      	mov	r4, r3
 8000f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f8a:	f7ff fc1b 	bl	80007c4 <__aeabi_fsub>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff fdd4 	bl	8000b40 <__aeabi_fdiv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	61bb      	str	r3, [r7, #24]
    const float three = (x2 - x) / (x2 - x1);
 8000f9c:	6839      	ldr	r1, [r7, #0]
 8000f9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fa0:	f7ff fc10 	bl	80007c4 <__aeabi_fsub>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461c      	mov	r4, r3
 8000fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000faa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fac:	f7ff fc0a 	bl	80007c4 <__aeabi_fsub>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f7ff fdc3 	bl	8000b40 <__aeabi_fdiv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	617b      	str	r3, [r7, #20]
    const float four = (x - x1) / (x2 - x1);
 8000fbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f7ff fbff 	bl	80007c4 <__aeabi_fsub>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461c      	mov	r4, r3
 8000fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fce:	f7ff fbf9 	bl	80007c4 <__aeabi_fsub>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff fdb2 	bl	8000b40 <__aeabi_fdiv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	613b      	str	r3, [r7, #16]

    return factor_1 * (f11 * one + f21 * two) + factor_2 * (f12 * three + f22 * four);
 8000fe0:	69f9      	ldr	r1, [r7, #28]
 8000fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fe4:	f7ff fcf8 	bl	80009d8 <__aeabi_fmul>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461c      	mov	r4, r3
 8000fec:	69b9      	ldr	r1, [r7, #24]
 8000fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ff0:	f7ff fcf2 	bl	80009d8 <__aeabi_fmul>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff fbe5 	bl	80007c8 <__addsf3>
 8000ffe:	4603      	mov	r3, r0
 8001000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fce8 	bl	80009d8 <__aeabi_fmul>
 8001008:	4603      	mov	r3, r0
 800100a:	461c      	mov	r4, r3
 800100c:	6979      	ldr	r1, [r7, #20]
 800100e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001010:	f7ff fce2 	bl	80009d8 <__aeabi_fmul>
 8001014:	4603      	mov	r3, r0
 8001016:	461d      	mov	r5, r3
 8001018:	6939      	ldr	r1, [r7, #16]
 800101a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800101c:	f7ff fcdc 	bl	80009d8 <__aeabi_fmul>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff fbcf 	bl	80007c8 <__addsf3>
 800102a:	4603      	mov	r3, r0
 800102c:	6a39      	ldr	r1, [r7, #32]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fcd2 	bl	80009d8 <__aeabi_fmul>
 8001034:	4603      	mov	r3, r0
 8001036:	4619      	mov	r1, r3
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fbc5 	bl	80007c8 <__addsf3>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3750      	adds	r7, #80	; 0x50
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}

08001048 <HAL_ADC_ConvCpltCallback>:
uint32_t elapsed_time= 0;
uint32_t last_time=0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop_DMA(hadc);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 f9d9 	bl	8002408 <HAL_ADC_Stop_DMA>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]
  TIM1->CNT = 0;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x44>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT = 0;
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x48>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800107e:	2017      	movs	r0, #23
 8001080:	f002 fa41 	bl	8003506 <HAL_NVIC_DisableIRQ>
  sync++;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb9b 	bl	80007c8 <__addsf3>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40000400 	.word	0x40000400
 80010ac:	200006cc 	.word	0x200006cc

080010b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, data, 4);
 80010b8:	2204      	movs	r2, #4
 80010ba:	4979      	ldr	r1, [pc, #484]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010bc:	4879      	ldr	r0, [pc, #484]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010be:	f001 f8c5 	bl	800224c <HAL_ADC_Start_DMA>
    if (htim->Instance == TIM1) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a78      	ldr	r2, [pc, #480]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 80c1 	bne.w	8001250 <HAL_TIM_PeriodElapsedCallback+0x1a0>
	current_time=HAL_GetTick();
 80010ce:	f000 ffb7 	bl	8002040 <HAL_GetTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a75      	ldr	r2, [pc, #468]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80010d6:	6013      	str	r3, [r2, #0]
	elapsed_time=current_time-last_time;
 80010d8:	4b74      	ldr	r3, [pc, #464]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b74      	ldr	r3, [pc, #464]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a74      	ldr	r2, [pc, #464]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80010e4:	6013      	str	r3, [r2, #0]
	RPM_val = (1 / (float)elapsed_time)*2*60*1000;
 80010e6:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc1c 	bl	8000928 <__aeabi_ui2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010f8:	f7ff fd22 	bl	8000b40 <__aeabi_fdiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4619      	mov	r1, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fb61 	bl	80007c8 <__addsf3>
 8001106:	4603      	mov	r3, r0
 8001108:	496b      	ldr	r1, [pc, #428]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fc64 	bl	80009d8 <__aeabi_fmul>
 8001110:	4603      	mov	r3, r0
 8001112:	496a      	ldr	r1, [pc, #424]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fc5f 	bl	80009d8 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001120:	601a      	str	r2, [r3, #0]
	last_time=current_time;
 8001122:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a62      	ldr	r2, [pc, #392]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001128:	6013      	str	r3, [r2, #0]

	TIM2->CCR3=(uint32_t) (inj*10);
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4966      	ldr	r1, [pc, #408]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fc51 	bl	80009d8 <__aeabi_fmul>
 8001136:	4603      	mov	r3, r0
 8001138:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe11 	bl	8000d64 <__aeabi_f2uiz>
 8001142:	4603      	mov	r3, r0
 8001144:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM3->CCR1=(uint32_t) (ign*10);
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	495f      	ldr	r1, [pc, #380]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fc43 	bl	80009d8 <__aeabi_fmul>
 8001152:	4603      	mov	r3, r0
 8001154:	4c5e      	ldr	r4, [pc, #376]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fe04 	bl	8000d64 <__aeabi_f2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2=(uint32_t) (ign*10+10*ignition_duration);
 8001160:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4958      	ldr	r1, [pc, #352]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fc36 	bl	80009d8 <__aeabi_fmul>
 800116c:	4603      	mov	r3, r0
 800116e:	461c      	mov	r4, r3
 8001170:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4954      	ldr	r1, [pc, #336]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fc2e 	bl	80009d8 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fb21 	bl	80007c8 <__addsf3>
 8001186:	4603      	mov	r3, r0
 8001188:	4c51      	ldr	r4, [pc, #324]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdea 	bl	8000d64 <__aeabi_f2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CNT=0;
 8001194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
	cycles++;
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fb0c 	bl	80007c8 <__addsf3>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011b6:	601a      	str	r2, [r3, #0]

	inj= Interpolate_2D(Injection_Timing,TBP,RPM,RPM_val,(0.04394*data[0]+20));
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011ba:	681c      	ldr	r4, [r3, #0]
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa31 	bl	8000628 <__aeabi_ui2d>
 80011c6:	a334      	add	r3, pc, #208	; (adr r3, 8001298 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7fe ffc0 	bl	8000150 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80011de:	f7ff f8e7 	bl	80003b0 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fa97 	bl	800071c <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4623      	mov	r3, r4
 80011f4:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80011f6:	493b      	ldr	r1, [pc, #236]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011f8:	483b      	ldr	r0, [pc, #236]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011fa:	f7ff fdd3 	bl	8000da4 <Interpolate_2D>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001202:	6013      	str	r3, [r2, #0]
	ign= Interpolate_2D(Ignition_Timing,TBP,RPM,RPM_val,(0.04394*data[0]+20));
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fa0b 	bl	8000628 <__aeabi_ui2d>
 8001212:	a321      	add	r3, pc, #132	; (adr r3, 8001298 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7fe ff9a 	bl	8000150 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800122a:	f7ff f8c1 	bl	80003b0 <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fa71 	bl	800071c <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4623      	mov	r3, r4
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001242:	4928      	ldr	r1, [pc, #160]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001246:	f7ff fdad 	bl	8000da4 <Interpolate_2D>
 800124a:	4603      	mov	r3, r0
 800124c:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800124e:	6013      	str	r3, [r2, #0]
}
if (htim->Instance == TIM2){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d10a      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x1c0>
	fired2++;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fab0 	bl	80007c8 <__addsf3>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800126e:	601a      	str	r2, [r3, #0]
}
if (htim->Instance == TIM3){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10a      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0x1e0>
	fired3++;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff faa0 	bl	80007c8 <__addsf3>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800128e:	601a      	str	r2, [r3, #0]
}
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	bdf8f473 	.word	0xbdf8f473
 800129c:	3fa67f4d 	.word	0x3fa67f4d
 80012a0:	2000068c 	.word	0x2000068c
 80012a4:	20000514 	.word	0x20000514
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	200006d8 	.word	0x200006d8
 80012b0:	200006e0 	.word	0x200006e0
 80012b4:	200006dc 	.word	0x200006dc
 80012b8:	42700000 	.word	0x42700000
 80012bc:	447a0000 	.word	0x447a0000
 80012c0:	20000688 	.word	0x20000688
 80012c4:	200004e0 	.word	0x200004e0
 80012c8:	41200000 	.word	0x41200000
 80012cc:	200004e4 	.word	0x200004e4
 80012d0:	40000400 	.word	0x40000400
 80012d4:	200004e8 	.word	0x200004e8
 80012d8:	200006d0 	.word	0x200006d0
 80012dc:	40340000 	.word	0x40340000
 80012e0:	20000030 	.word	0x20000030
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200002a0 	.word	0x200002a0
 80012ec:	20000060 	.word	0x20000060
 80012f0:	200006c4 	.word	0x200006c4
 80012f4:	200006c8 	.word	0x200006c8

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fe47 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f8cb 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 fb55 	bl	80019b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 fb35 	bl	8001978 <MX_DMA_Init>
  MX_ADC1_Init();
 800130e:	f000 f921 	bl	8001554 <MX_ADC1_Init>
  MX_CAN_Init();
 8001312:	f000 f989 	bl	8001628 <MX_CAN_Init>
  MX_TIM1_Init();
 8001316:	f000 f9df 	bl	80016d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800131a:	f000 fa33 	bl	8001784 <MX_TIM2_Init>
  MX_TIM3_Init();
 800131e:	f000 faa7 	bl	8001870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);//start the timer TIM2 in interrupt mode
 8001322:	4852      	ldr	r0, [pc, #328]	; (800146c <main+0x174>)
 8001324:	f003 f9ac 	bl	8004680 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001328:	4851      	ldr	r0, [pc, #324]	; (8001470 <main+0x178>)
 800132a:	f003 f9a9 	bl	8004680 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800132e:	4851      	ldr	r0, [pc, #324]	; (8001474 <main+0x17c>)
 8001330:	f003 f9a6 	bl	8004680 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001334:	2108      	movs	r1, #8
 8001336:	484e      	ldr	r0, [pc, #312]	; (8001470 <main+0x178>)
 8001338:	f003 fa46 	bl	80047c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	484d      	ldr	r0, [pc, #308]	; (8001474 <main+0x17c>)
 8001340:	f003 fa42 	bl	80047c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001344:	2104      	movs	r1, #4
 8001346:	484b      	ldr	r0, [pc, #300]	; (8001474 <main+0x17c>)
 8001348:	f003 fa3e 	bl	80047c8 <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan);
 800134c:	484a      	ldr	r0, [pc, #296]	; (8001478 <main+0x180>)
 800134e:	f001 fc76 	bl	8002c3e <HAL_CAN_Start>
  HAL_ADC_Start_DMA(&hadc1, data, 4);
 8001352:	2204      	movs	r2, #4
 8001354:	4949      	ldr	r1, [pc, #292]	; (800147c <main+0x184>)
 8001356:	484a      	ldr	r0, [pc, #296]	; (8001480 <main+0x188>)
 8001358:	f000 ff78 	bl	800224c <HAL_ADC_Start_DMA>


  //CAN Configuration
  TxHeader.IDE = CAN_ID_STD;
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <main+0x18c>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <main+0x18c>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 12;
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <main+0x18c>)
 800136a:	220c      	movs	r2, #12
 800136c:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x450; //This is an arbi trary ID, it can be any 11-bits ID
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <main+0x18c>)
 8001370:	f44f 628a 	mov.w	r2, #1104	; 0x450
 8001374:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    scaled_val = (uint16_t)RPM_val;
 8001376:	4b44      	ldr	r3, [pc, #272]	; (8001488 <main+0x190>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fcf2 	bl	8000d64 <__aeabi_f2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	81fb      	strh	r3, [r7, #14]
	  	rpm_msb = (scaled_val>>8)&0xff;
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b29b      	uxth	r3, r3
 800138a:	737b      	strb	r3, [r7, #13]
	  	rpm_lsb = scaled_val&(0x00ff);
 800138c:	89fb      	ldrh	r3, [r7, #14]
 800138e:	733b      	strb	r3, [r7, #12]
	  	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, rpm_data, &CAN_Mailbox) != HAL_OK){
	  		Error_Handler();
	  	}
	  	HAL_Delay(10);*/

	  	scaled_val = (uint16_t)data[0];
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <main+0x184>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	81fb      	strh	r3, [r7, #14]
		tps_msb = (scaled_val>>8)&0xff;
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	72fb      	strb	r3, [r7, #11]
		tps_lsb = scaled_val&(0x00ff);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	72bb      	strb	r3, [r7, #10]
			Error_Handler();
		}
		HAL_Delay(10);*/

	  	//Sending the temperature reading/
	  	scaled_val = (uint16_t)data[1];
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <main+0x184>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	81fb      	strh	r3, [r7, #14]
		tmp_msb = (scaled_val>>8)&0xff;
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	727b      	strb	r3, [r7, #9]
		tmp_lsb = scaled_val&(0x00ff);
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	723b      	strb	r3, [r7, #8]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, tmp_data, &CAN_Mailbox) != HAL_OK){
			Error_Handler();
		}
		HAL_Delay(10);*/

		scaled_val = (uint16_t)data[2];
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <main+0x184>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	81fb      	strh	r3, [r7, #14]
		map_msb = (scaled_val>>8)&0xff;
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29b      	uxth	r3, r3
 80013c0:	71fb      	strb	r3, [r7, #7]
		map_lsb = scaled_val&(0x00ff);
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	71bb      	strb	r3, [r7, #6]
			Error_Handler();
		}
		HAL_Delay(10);*/


	    scaled_val = (uint16_t)data[3];
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <main+0x184>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	81fb      	strh	r3, [r7, #14]
		o2_msb = (scaled_val>>8)&0xff;
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	717b      	strb	r3, [r7, #5]
		o2_lsb = scaled_val&(0x00ff);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	713b      	strb	r3, [r7, #4]
		o2_data[2] = o2_lsb;
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, o2_data, &CAN_Mailbox) != HAL_OK){
			Error_Handler();
		}
		HAL_Delay(10);*/
		rpm_data[0] = 'R';//3bytes
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <main+0x194>)
 80013da:	2252      	movs	r2, #82	; 0x52
 80013dc:	701a      	strb	r2, [r3, #0]
		rpm_data[1] = rpm_msb;
 80013de:	4a2b      	ldr	r2, [pc, #172]	; (800148c <main+0x194>)
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	7053      	strb	r3, [r2, #1]
		rpm_data[2] = rpm_lsb;
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <main+0x194>)
 80013e6:	7b3b      	ldrb	r3, [r7, #12]
 80013e8:	7093      	strb	r3, [r2, #2]
		TxHeader.DLC = 3;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <main+0x18c>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	611a      	str	r2, [r3, #16]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, rpm_data, &CAN_Mailbox) != HAL_OK){
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <main+0x198>)
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <main+0x194>)
 80013f4:	4923      	ldr	r1, [pc, #140]	; (8001484 <main+0x18c>)
 80013f6:	4820      	ldr	r0, [pc, #128]	; (8001478 <main+0x180>)
 80013f8:	f001 fc65 	bl	8002cc6 <HAL_CAN_AddTxMessage>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <main+0x10e>
					Error_Handler();
 8001402:	f000 fb23 	bl	8001a4c <Error_Handler>
		}
		HAL_Delay(100);
 8001406:	2064      	movs	r0, #100	; 0x64
 8001408:	f000 fe24 	bl	8002054 <HAL_Delay>
		can_data[0]=tps_msb;
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <main+0x19c>)
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	7013      	strb	r3, [r2, #0]
		can_data[1]=tps_lsb;
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <main+0x19c>)
 8001414:	7abb      	ldrb	r3, [r7, #10]
 8001416:	7053      	strb	r3, [r2, #1]
		can_data[2]=tmp_msb;
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <main+0x19c>)
 800141a:	7a7b      	ldrb	r3, [r7, #9]
 800141c:	7093      	strb	r3, [r2, #2]
		can_data[3]=tmp_lsb;
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <main+0x19c>)
 8001420:	7a3b      	ldrb	r3, [r7, #8]
 8001422:	70d3      	strb	r3, [r2, #3]
		can_data[4]=map_msb;
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <main+0x19c>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	7113      	strb	r3, [r2, #4]
		can_data[5]=map_lsb;
 800142a:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <main+0x19c>)
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	7153      	strb	r3, [r2, #5]
		can_data[6]=o2_msb;
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <main+0x19c>)
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	7193      	strb	r3, [r2, #6]
		can_data[7]=o2_lsb;
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <main+0x19c>)
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	71d3      	strb	r3, [r2, #7]
		TxHeader.DLC = 8;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <main+0x18c>)
 800143e:	2208      	movs	r2, #8
 8001440:	611a      	str	r2, [r3, #16]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, can_data, &CAN_Mailbox) != HAL_OK){
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <main+0x198>)
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <main+0x19c>)
 8001446:	490f      	ldr	r1, [pc, #60]	; (8001484 <main+0x18c>)
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <main+0x180>)
 800144a:	f001 fc3c 	bl	8002cc6 <HAL_CAN_AddTxMessage>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <main+0x160>
					Error_Handler();
 8001454:	f000 fafa 	bl	8001a4c <Error_Handler>
		}
		HAL_Delay(100);
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f000 fdfb 	bl	8002054 <HAL_Delay>
	  	counter++;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <main+0x1a0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <main+0x1a0>)
 8001466:	6013      	str	r3, [r2, #0]
	    scaled_val = (uint16_t)RPM_val;
 8001468:	e785      	b.n	8001376 <main+0x7e>
 800146a:	bf00      	nop
 800146c:	200005b0 	.word	0x200005b0
 8001470:	200005f8 	.word	0x200005f8
 8001474:	20000640 	.word	0x20000640
 8001478:	20000588 	.word	0x20000588
 800147c:	2000068c 	.word	0x2000068c
 8001480:	20000514 	.word	0x20000514
 8001484:	2000069c 	.word	0x2000069c
 8001488:	20000688 	.word	0x20000688
 800148c:	200006c0 	.word	0x200006c0
 8001490:	200006b4 	.word	0x200006b4
 8001494:	200006b8 	.word	0x200006b8
 8001498:	200006d4 	.word	0x200006d4

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	; 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a6:	2228      	movs	r2, #40	; 0x28
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 f806 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fbe0 	bl	8003cb8 <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014fe:	f000 faa5 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2102      	movs	r1, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fe4c 	bl	80041bc <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800152a:	f000 fa8f 	bl	8001a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800152e:	2302      	movs	r3, #2
 8001530:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001532:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001536:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4618      	mov	r0, r3
 800153c:	f002 ff9a 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001546:	f000 fa81 	bl	8001a4c <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	; 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <MX_ADC1_Init+0xd0>)
 8001568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_ADC1_Init+0xcc>)
 800156c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001570:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001574:	2201      	movs	r2, #1
 8001576:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_ADC1_Init+0xcc>)
 800157a:	2200      	movs	r2, #0
 800157c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001580:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_ADC1_Init+0xcc>)
 800158e:	2204      	movs	r2, #4
 8001590:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001592:	4823      	ldr	r0, [pc, #140]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001594:	f000 fd82 	bl	800209c <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800159e:	f000 fa55 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <MX_ADC1_Init+0xcc>)
 80015b4:	f000 ff86 	bl	80024c4 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fa45 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_ADC1_Init+0xcc>)
 80015d0:	f000 ff78 	bl	80024c4 <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80015da:	f000 fa37 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015de:	2303      	movs	r3, #3
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e2:	2303      	movs	r3, #3
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_ADC1_Init+0xcc>)
 80015ec:	f000 ff6a 	bl	80024c4 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015f6:	f000 fa29 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015fa:	2304      	movs	r3, #4
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015fe:	2304      	movs	r3, #4
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_ADC1_Init+0xcc>)
 8001608:	f000 ff5c 	bl	80024c4 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001612:	f000 fa1b 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000514 	.word	0x20000514
 8001624:	40012400 	.word	0x40012400

08001628 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001630:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <MX_CAN_Init+0xac>)
 8001632:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001636:	2209      	movs	r2, #9
 8001638:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <MX_CAN_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001650:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001654:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001658:	2200      	movs	r2, #0
 800165a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_CAN_Init+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_CAN_Init+0xa8>)
 800166a:	2200      	movs	r2, #0
 800166c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_CAN_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MX_CAN_Init+0xa8>)
 800167c:	f001 f91b 	bl	80028b6 <HAL_CAN_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001686:	f000 f9e1 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
    CAN_FilterTypeDef canfilterconfig;
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 5;
 800168e:	2305      	movs	r3, #5
 8001690:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800169a:	2301      	movs	r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
    canfilterconfig.FilterIdHigh = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x00;//Or it can just be the filter ID 0x100<<5;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
    canfilterconfig.SlaveStartFilterBank = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK){
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_CAN_Init+0xa8>)
 80016b8:	f001 f9f8 	bl	8002aac <HAL_CAN_ConfigFilter>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_CAN_Init+0x9e>
  	  Error_Handler();
 80016c2:	f000 f9c3 	bl	8001a4c <Error_Handler>
    };
  /* USER CODE END CAN_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000588 	.word	0x20000588
 80016d4:	40006400 	.word	0x40006400

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_TIM1_Init+0xa4>)
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <MX_TIM1_Init+0xa8>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_TIM1_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_TIM1_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 69;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_TIM1_Init+0xa4>)
 8001708:	2245      	movs	r2, #69	; 0x45
 800170a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_TIM1_Init+0xa4>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM1_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_TIM1_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <MX_TIM1_Init+0xa4>)
 8001720:	f002 ff5e 	bl	80045e0 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800172a:	f000 f98f 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM1_Init+0xa4>)
 8001748:	f003 faa4 	bl	8004c94 <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 f97b 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM1_Init+0xa4>)
 8001764:	f003 fe1c 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800176e:	f000 f96d 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200005b0 	.word	0x200005b0
 8001780:	40012c00 	.word	0x40012c00

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <MX_TIM2_Init+0xe8>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MX_TIM2_Init+0xe8>)
 80017be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <MX_TIM2_Init+0xe8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_TIM2_Init+0xe8>)
 80017cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_TIM2_Init+0xe8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_TIM2_Init+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017de:	4823      	ldr	r0, [pc, #140]	; (800186c <MX_TIM2_Init+0xe8>)
 80017e0:	f002 fefe 	bl	80045e0 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017ea:	f000 f92f 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f8:	4619      	mov	r1, r3
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <MX_TIM2_Init+0xe8>)
 80017fc:	f003 fa4a 	bl	8004c94 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001806:	f000 f921 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <MX_TIM2_Init+0xe8>)
 800180c:	f002 ff84 	bl	8004718 <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001816:	f000 f919 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4619      	mov	r1, r3
 8001828:	4810      	ldr	r0, [pc, #64]	; (800186c <MX_TIM2_Init+0xe8>)
 800182a:	f003 fdb9 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001834:	f000 f90a 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001844:	2304      	movs	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2208      	movs	r2, #8
 800184c:	4619      	mov	r1, r3
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM2_Init+0xe8>)
 8001850:	f003 f95e 	bl	8004b10 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800185a:	f000 f8f7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM2_Init+0xe8>)
 8001860:	f000 fa82 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001864:	bf00      	nop
 8001866:	3738      	adds	r7, #56	; 0x38
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200005f8 	.word	0x200005f8

08001870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <MX_TIM3_Init+0x100>)
 80018a2:	4a34      	ldr	r2, [pc, #208]	; (8001974 <MX_TIM3_Init+0x104>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <MX_TIM3_Init+0x100>)
 80018a8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_TIM3_Init+0x100>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <MX_TIM3_Init+0x100>)
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <MX_TIM3_Init+0x100>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <MX_TIM3_Init+0x100>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c8:	4829      	ldr	r0, [pc, #164]	; (8001970 <MX_TIM3_Init+0x100>)
 80018ca:	f002 fe89 	bl	80045e0 <HAL_TIM_Base_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018d4:	f000 f8ba 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4822      	ldr	r0, [pc, #136]	; (8001970 <MX_TIM3_Init+0x100>)
 80018e6:	f003 f9d5 	bl	8004c94 <HAL_TIM_ConfigClockSource>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018f0:	f000 f8ac 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f4:	481e      	ldr	r0, [pc, #120]	; (8001970 <MX_TIM3_Init+0x100>)
 80018f6:	f002 ff0f 	bl	8004718 <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001900:	f000 f8a4 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	4817      	ldr	r0, [pc, #92]	; (8001970 <MX_TIM3_Init+0x100>)
 8001914:	f003 fd44 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800191e:	f000 f895 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	; 0x60
 8001924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <MX_TIM3_Init+0x100>)
 800193a:	f003 f8e9 	bl	8004b10 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001944:	f000 f882 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001948:	2304      	movs	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM3_Init+0x100>)
 8001954:	f003 f8dc 	bl	8004b10 <HAL_TIM_PWM_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800195e:	f000 f875 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM3_Init+0x100>)
 8001964:	f000 fa00 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001968:	bf00      	nop
 800196a:	3738      	adds	r7, #56	; 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000640 	.word	0x20000640
 8001974:	40000400 	.word	0x40000400

08001978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_DMA_Init+0x38>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <MX_DMA_Init+0x38>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6153      	str	r3, [r2, #20]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_DMA_Init+0x38>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	200b      	movs	r0, #11
 800199c:	f001 fd89 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a0:	200b      	movs	r0, #11
 80019a2:	f001 fda2 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019ce:	f043 0320 	orr.w	r3, r3, #32
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <MX_GPIO_Init+0x8c>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_GPIO_Init+0x8c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Camshaft_Pin */
  GPIO_InitStruct.Pin = Camshaft_Pin;
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_GPIO_Init+0x90>)
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Camshaft_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_GPIO_Init+0x94>)
 8001a24:	f001 ffb4 	bl	8003990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2017      	movs	r0, #23
 8001a2e:	f001 fd40 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a32:	2017      	movs	r0, #23
 8001a34:	f001 fd59 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	10210000 	.word	0x10210000
 8001a48:	40010c00 	.word	0x40010c00

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <Error_Handler+0x8>
	...

08001a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_MspInit+0x40>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_MspInit+0x40>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_MspInit+0x40>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_MspInit+0x40>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_MspInit+0x40>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_MspInit+0x40>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <HAL_ADC_MspInit+0xbc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d149      	bne.n	8001b50 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_ADC_MspInit+0xc0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001aec:	231e      	movs	r3, #30
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af0:	2303      	movs	r3, #3
 8001af2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <HAL_ADC_MspInit+0xc4>)
 8001afc:	f001 ff48 	bl	8003990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_ADC_MspInit+0xcc>)
 8001b04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b36:	f001 fd01 	bl	800353c <HAL_DMA_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b40:	f7ff ff84 	bl	8001a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b48:	621a      	str	r2, [r3, #32]
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_ADC_MspInit+0xc8>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	20000544 	.word	0x20000544
 8001b68:	40020008 	.word	0x40020008

08001b6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <HAL_CAN_MspInit+0xf0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d163      	bne.n	8001c54 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b96:	61d3      	str	r3, [r2, #28]
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_CAN_MspInit+0xf4>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4824      	ldr	r0, [pc, #144]	; (8001c64 <HAL_CAN_MspInit+0xf8>)
 8001bd2:	f001 fedd 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	481e      	ldr	r0, [pc, #120]	; (8001c64 <HAL_CAN_MspInit+0xf8>)
 8001bec:	f001 fed0 	bl	8003990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_CAN_MspInit+0xfc>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_CAN_MspInit+0xfc>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2013      	movs	r0, #19
 8001c1a:	f001 fc4a 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001c1e:	2013      	movs	r0, #19
 8001c20:	f001 fc63 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2014      	movs	r0, #20
 8001c2a:	f001 fc42 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c2e:	2014      	movs	r0, #20
 8001c30:	f001 fc5b 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2015      	movs	r0, #21
 8001c3a:	f001 fc3a 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c3e:	2015      	movs	r0, #21
 8001c40:	f001 fc53 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2016      	movs	r0, #22
 8001c4a:	f001 fc32 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001c4e:	2016      	movs	r0, #22
 8001c50:	f001 fc4b 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40006400 	.word	0x40006400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d12d      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001c92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = Crankshaft_Pin;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Crankshaft_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 0318 	add.w	r3, r7, #24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4823      	ldr	r0, [pc, #140]	; (8001d60 <HAL_TIM_Base_MspInit+0xf4>)
 8001cd2:	f001 fe5d 	bl	8003990 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2019      	movs	r0, #25
 8001cdc:	f001 fbe9 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ce0:	2019      	movs	r0, #25
 8001ce2:	f001 fc02 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ce6:	e032      	b.n	8001d4e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d114      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	201c      	movs	r0, #28
 8001d10:	f001 fbcf 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d14:	201c      	movs	r0, #28
 8001d16:	f001 fbe8 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001d1a:	e018      	b.n	8001d4e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_TIM_Base_MspInit+0xf8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d113      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	201d      	movs	r0, #29
 8001d44:	f001 fbb5 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d48:	201d      	movs	r0, #29
 8001d4a:	f001 fbce 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40000400 	.word	0x40000400

08001d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d86:	d12b      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Injection_Pin;
 8001da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Injection_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <HAL_TIM_MspPostInit+0xc0>)
 8001db6:	f001 fdeb 	bl	8003990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_TIM_MspPostInit+0xc4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_TIM_MspPostInit+0xc4>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dde:	e01c      	b.n	8001e1a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIM_MspPostInit+0xc8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d117      	bne.n	8001e1a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_TIM_MspPostInit+0xbc>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Ignition1_Pin|Ignition2_Pin;
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <HAL_TIM_MspPostInit+0xcc>)
 8001e16:	f001 fdbb 	bl	8003990 <HAL_GPIO_Init>
}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40010800 	.word	0x40010800

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f000 f8cd 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA1_Channel1_IRQHandler+0x10>)
 8001e8e:	f001 fc4b 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000544 	.word	0x20000544

08001e9c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001ea2:	f000 ffdf 	bl	8002e64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000588 	.word	0x20000588

08001eb0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eb6:	f000 ffd5 	bl	8002e64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000588 	.word	0x20000588

08001ec4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <CAN1_RX1_IRQHandler+0x10>)
 8001eca:	f000 ffcb 	bl	8002e64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000588 	.word	0x20000588

08001ed8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <CAN1_SCE_IRQHandler+0x10>)
 8001ede:	f000 ffc1 	bl	8002e64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000588 	.word	0x20000588

08001eec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camshaft_Pin);
 8001ef0:	2080      	movs	r0, #128	; 0x80
 8001ef2:	f001 fec9 	bl	8003c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIM1_UP_IRQHandler+0x10>)
 8001f02:	f002 fcfd 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200005b0 	.word	0x200005b0

08001f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM2_IRQHandler+0x10>)
 8001f16:	f002 fcf3 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200005f8 	.word	0x200005f8

08001f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM3_IRQHandler+0x10>)
 8001f2a:	f002 fce9 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000640 	.word	0x20000640

08001f38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f44:	f7ff fff8 	bl	8001f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f4a:	490c      	ldr	r1, [pc, #48]	; (8001f7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f60:	4c09      	ldr	r4, [pc, #36]	; (8001f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f003 fa81 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f72:	f7ff f9c1 	bl	80012f8 <main>
  bx lr
 8001f76:	4770      	bx	lr
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8001f80:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8001f84:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8001f88:	200006e8 	.word	0x200006e8

08001f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC1_2_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x28>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x28>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f001 fa7b 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fd54 	bl	8001a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 faa1 	bl	8003522 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f001 fa5b 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200004ec 	.word	0x200004ec
 8002014:	200004f4 	.word	0x200004f4
 8002018:	200004f0 	.word	0x200004f0

0800201c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_IncTick+0x1c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_IncTick+0x20>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <HAL_IncTick+0x20>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	200004f4 	.word	0x200004f4
 800203c:	200006e4 	.word	0x200006e4

08002040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <HAL_GetTick+0x10>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	200006e4 	.word	0x200006e4

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fff0 	bl	8002040 <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffe0 	bl	8002040 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200004f4 	.word	0x200004f4

0800209c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0be      	b.n	800223c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fcde 	bl	8001a9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fb41 	bl	8002768 <ADC_ConversionStop_Disable>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8099 	bne.w	800222a <HAL_ADC_Init+0x18e>
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8095 	bne.w	800222a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002108:	f023 0302 	bic.w	r3, r3, #2
 800210c:	f043 0202 	orr.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7b1b      	ldrb	r3, [r3, #12]
 8002122:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002124:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4313      	orrs	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002134:	d003      	beq.n	800213e <HAL_ADC_Init+0xa2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_ADC_Init+0xa8>
 800213e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002142:	e000      	b.n	8002146 <HAL_ADC_Init+0xaa>
 8002144:	2300      	movs	r3, #0
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7d1b      	ldrb	r3, [r3, #20]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d119      	bne.n	8002188 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7b1b      	ldrb	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	3b01      	subs	r3, #1
 8002162:	035a      	lsls	r2, r3, #13
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	e00b      	b.n	8002188 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_ADC_Init+0x1a8>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b8:	d003      	beq.n	80021c2 <HAL_ADC_Init+0x126>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d104      	bne.n	80021cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	051b      	lsls	r3, r3, #20
 80021ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	430a      	orrs	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_ADC_Init+0x1ac>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d10b      	bne.n	8002208 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002206:	e018      	b.n	800223a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f023 0312 	bic.w	r3, r3, #18
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002228:	e007      	b.n	800223a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	ffe1f7fd 	.word	0xffe1f7fd
 8002248:	ff1f0efe 	.word	0xff1f0efe

0800224c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a64      	ldr	r2, [pc, #400]	; (80023f4 <HAL_ADC_Start_DMA+0x1a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_ADC_Start_DMA+0x24>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <HAL_ADC_Start_DMA+0x1ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d106      	bne.n	800227e <HAL_ADC_Start_DMA+0x32>
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <HAL_ADC_Start_DMA+0x1a8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 80b3 	bne.w	80023e4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_Start_DMA+0x40>
 8002288:	2302      	movs	r3, #2
 800228a:	e0ae      	b.n	80023ea <HAL_ADC_Start_DMA+0x19e>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fa0d 	bl	80026b4 <ADC_Enable>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 809a 	bne.w	80023da <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_ADC_Start_DMA+0x1ac>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x84>
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_ADC_Start_DMA+0x1a8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d115      	bne.n	80022fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d026      	beq.n	8002338 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022fa:	e01d      	b.n	8002338 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_ADC_Start_DMA+0x1a8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_ADC_Start_DMA+0xd0>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_ADC_Start_DMA+0x1ac>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d10d      	bne.n	8002338 <HAL_ADC_Start_DMA+0xec>
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_ADC_Start_DMA+0x1a8>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002330:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f023 0206 	bic.w	r2, r3, #6
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002350:	e002      	b.n	8002358 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_ADC_Start_DMA+0x1b0>)
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_ADC_Start_DMA+0x1b4>)
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_ADC_Start_DMA+0x1b8>)
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0202 	mvn.w	r2, #2
 8002380:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002390:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a18      	ldr	r0, [r3, #32]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	334c      	adds	r3, #76	; 0x4c
 800239c:	4619      	mov	r1, r3
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f001 f925 	bl	80035f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023b4:	d108      	bne.n	80023c8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023c4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023c6:	e00f      	b.n	80023e8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023d6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023d8:	e006      	b.n	80023e8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80023e2:	e001      	b.n	80023e8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40012400 	.word	0x40012400
 80023f8:	40012800 	.word	0x40012800
 80023fc:	080027eb 	.word	0x080027eb
 8002400:	08002867 	.word	0x08002867
 8002404:	08002883 	.word	0x08002883

08002408 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Stop_DMA+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e03a      	b.n	8002498 <HAL_ADC_Stop_DMA+0x90>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f99c 	bl	8002768 <ADC_ConversionStop_Disable>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d129      	bne.n	800248e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d11a      	bne.n	800248e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f927 	bl	80036b0 <HAL_DMA_Abort>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
 8002480:	e005      	b.n	800248e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x20>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0dc      	b.n	800269e <HAL_ADC_ConfigChannel+0x1da>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d81c      	bhi.n	800252e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b05      	subs	r3, #5
 8002506:	221f      	movs	r2, #31
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	4019      	ands	r1, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b05      	subs	r3, #5
 8002520:	fa00 f203 	lsl.w	r2, r0, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
 800252c:	e03c      	b.n	80025a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d81c      	bhi.n	8002570 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b23      	subs	r3, #35	; 0x23
 8002548:	221f      	movs	r2, #31
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	4019      	ands	r1, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b23      	subs	r3, #35	; 0x23
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
 800256e:	e01b      	b.n	80025a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b41      	subs	r3, #65	; 0x41
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	4019      	ands	r1, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b41      	subs	r3, #65	; 0x41
 800259c:	fa00 f203 	lsl.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d91c      	bls.n	80025ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	3b1e      	subs	r3, #30
 80025c2:	2207      	movs	r2, #7
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	4019      	ands	r1, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6898      	ldr	r0, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	3b1e      	subs	r3, #30
 80025dc:	fa00 f203 	lsl.w	r2, r0, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	e019      	b.n	800261e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6919      	ldr	r1, [r3, #16]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	2207      	movs	r2, #7
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4019      	ands	r1, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6898      	ldr	r0, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	fa00 f203 	lsl.w	r2, r0, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d003      	beq.n	800262e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800262a:	2b11      	cmp	r3, #17
 800262c:	d132      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d125      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d126      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002654:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d11a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	0c9a      	lsrs	r2, r3, #18
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002674:	e002      	b.n	800267c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x1b2>
 8002682:	e007      	b.n	8002694 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40012400 	.word	0x40012400
 80026ac:	200004ec 	.word	0x200004ec
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d040      	beq.n	8002754 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <ADC_Enable+0xac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <ADC_Enable+0xb0>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f0:	e002      	b.n	80026f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fe:	f7ff fc9f 	bl	8002040 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002704:	e01f      	b.n	8002746 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002706:	f7ff fc9b 	bl	8002040 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d918      	bls.n	8002746 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d011      	beq.n	8002746 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1d8      	bne.n	8002706 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200004ec 	.word	0x200004ec
 8002764:	431bde83 	.word	0x431bde83

08002768 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d12e      	bne.n	80027e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002792:	f7ff fc55 	bl	8002040 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002798:	e01b      	b.n	80027d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800279a:	f7ff fc51 	bl	8002040 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d914      	bls.n	80027d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d0dc      	beq.n	800279a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002800:	2b00      	cmp	r3, #0
 8002802:	d127      	bne.n	8002854 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800281a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281e:	d115      	bne.n	800284c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7fe fbfb 	bl	8001048 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002852:	e004      	b.n	800285e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff fe13 	bl	80024a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fe02 	bl	80024b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0ed      	b.n	8002aa4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff f949 	bl	8001b6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fba9 	bl	8002040 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028f0:	e012      	b.n	8002918 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f2:	f7ff fba5 	bl	8002040 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	d90b      	bls.n	8002918 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0c5      	b.n	8002aa4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0e5      	beq.n	80028f2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0202 	bic.w	r2, r2, #2
 8002934:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002936:	f7ff fb83 	bl	8002040 <HAL_GetTick>
 800293a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800293c:	e012      	b.n	8002964 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800293e:	f7ff fb7f 	bl	8002040 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d90b      	bls.n	8002964 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2205      	movs	r2, #5
 800295c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e09f      	b.n	8002aa4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e5      	bne.n	800293e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e1b      	ldrb	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d108      	bne.n	800298c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7e5b      	ldrb	r3, [r3, #25]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d108      	bne.n	80029b6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e007      	b.n	80029c6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7e9b      	ldrb	r3, [r3, #26]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d108      	bne.n	80029e0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0220 	orr.w	r2, r2, #32
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e007      	b.n	80029f0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0220 	bic.w	r2, r2, #32
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7edb      	ldrb	r3, [r3, #27]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0210 	bic.w	r2, r2, #16
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e007      	b.n	8002a1a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0210 	orr.w	r2, r2, #16
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7f1b      	ldrb	r3, [r3, #28]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0208 	orr.w	r2, r2, #8
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e007      	b.n	8002a44 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0208 	bic.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7f5b      	ldrb	r3, [r3, #29]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d108      	bne.n	8002a5e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0204 	orr.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e007      	b.n	8002a6e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	ea42 0103 	orr.w	r1, r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <HAL_CAN_ConfigFilter+0x26>
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f040 80aa 	bne.w	8002c26 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d123      	bne.n	8002b54 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3248      	adds	r2, #72	; 0x48
 8002b34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b4a:	6979      	ldr	r1, [r7, #20]
 8002b4c:	3348      	adds	r3, #72	; 0x48
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d122      	bne.n	8002ba2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3248      	adds	r2, #72	; 0x48
 8002b82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	3348      	adds	r3, #72	; 0x48
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bbc:	e007      	b.n	8002bce <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002be8:	e007      	b.n	8002bfa <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c18:	f023 0201 	bic.w	r2, r3, #1
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e006      	b.n	8002c34 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12e      	bne.n	8002cb0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6a:	f7ff f9e9 	bl	8002040 <HAL_GetTick>
 8002c6e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c70:	e012      	b.n	8002c98 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c72:	f7ff f9e5 	bl	8002040 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b0a      	cmp	r3, #10
 8002c7e:	d90b      	bls.n	8002c98 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2205      	movs	r2, #5
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e012      	b.n	8002cbe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e006      	b.n	8002cbe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b089      	sub	sp, #36	; 0x24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cda:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <HAL_CAN_AddTxMessage+0x2c>
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 80ad 	bne.w	8002e4c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8095 	beq.w	8002e3c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	0e1b      	lsrs	r3, r3, #24
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	409a      	lsls	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	6809      	ldr	r1, [r1, #0]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3318      	adds	r3, #24
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	440b      	add	r3, r1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e00f      	b.n	8002d6a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d54:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d5e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3318      	adds	r3, #24
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	440b      	add	r3, r1
 8002d68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3318      	adds	r3, #24
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	440b      	add	r3, r1
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	7d1b      	ldrb	r3, [r3, #20]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d111      	bne.n	8002daa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	3304      	adds	r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6811      	ldr	r1, [r2, #0]
 8002d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3318      	adds	r3, #24
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	440b      	add	r3, r1
 8002da6:	3304      	adds	r3, #4
 8002da8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3307      	adds	r3, #7
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	061a      	lsls	r2, r3, #24
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3306      	adds	r3, #6
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3305      	adds	r3, #5
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	3204      	adds	r2, #4
 8002dca:	7812      	ldrb	r2, [r2, #0]
 8002dcc:	4610      	mov	r0, r2
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	ea43 0200 	orr.w	r2, r3, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002de0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3303      	adds	r3, #3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	061a      	lsls	r2, r3, #24
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3302      	adds	r3, #2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3301      	adds	r3, #1
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	4610      	mov	r0, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	6811      	ldr	r1, [r2, #0]
 8002e08:	ea43 0200 	orr.w	r2, r3, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4413      	add	r3, r2
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	6811      	ldr	r1, [r2, #0]
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3318      	adds	r3, #24
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e00e      	b.n	8002e5a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e006      	b.n	8002e5a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d07c      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f983 	bl	80031d2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ecc:	e016      	b.n	8002efc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	e00c      	b.n	8002efc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e002      	b.n	8002efc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f986 	bl	8003208 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d024      	beq.n	8002f50 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f962 	bl	80031e4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f20:	e016      	b.n	8002f50 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	e00c      	b.n	8002f50 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	e002      	b.n	8002f50 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f965 	bl	800321a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d024      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f941 	bl	80031f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f74:	e016      	b.n	8002fa4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	e00c      	b.n	8002fa4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9c:	e002      	b.n	8002fa4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f944 	bl	800322c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f933 	bl	8003250 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f91b 	bl	800323e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003022:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2208      	movs	r2, #8
 8003046:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f913 	bl	8003274 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8fb 	bl	8003262 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8fc 	bl	8003286 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2208      	movs	r2, #8
 80030a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8f4 	bl	8003298 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d07b      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d072      	beq.n	80031aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f043 0302 	orr.w	r3, r3, #2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	2b00      	cmp	r3, #0
 8003120:	d043      	beq.n	80031aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03e      	beq.n	80031aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003132:	2b60      	cmp	r3, #96	; 0x60
 8003134:	d02b      	beq.n	800318e <HAL_CAN_IRQHandler+0x32a>
 8003136:	2b60      	cmp	r3, #96	; 0x60
 8003138:	d82e      	bhi.n	8003198 <HAL_CAN_IRQHandler+0x334>
 800313a:	2b50      	cmp	r3, #80	; 0x50
 800313c:	d022      	beq.n	8003184 <HAL_CAN_IRQHandler+0x320>
 800313e:	2b50      	cmp	r3, #80	; 0x50
 8003140:	d82a      	bhi.n	8003198 <HAL_CAN_IRQHandler+0x334>
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d019      	beq.n	800317a <HAL_CAN_IRQHandler+0x316>
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d826      	bhi.n	8003198 <HAL_CAN_IRQHandler+0x334>
 800314a:	2b30      	cmp	r3, #48	; 0x30
 800314c:	d010      	beq.n	8003170 <HAL_CAN_IRQHandler+0x30c>
 800314e:	2b30      	cmp	r3, #48	; 0x30
 8003150:	d822      	bhi.n	8003198 <HAL_CAN_IRQHandler+0x334>
 8003152:	2b10      	cmp	r3, #16
 8003154:	d002      	beq.n	800315c <HAL_CAN_IRQHandler+0x2f8>
 8003156:	2b20      	cmp	r3, #32
 8003158:	d005      	beq.n	8003166 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800315a:	e01d      	b.n	8003198 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003164:	e019      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800316e:	e014      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f043 0320 	orr.w	r3, r3, #32
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003178:	e00f      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003182:	e00a      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800318c:	e005      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003196:	e000      	b.n	800319a <HAL_CAN_IRQHandler+0x336>
            break;
 8003198:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2204      	movs	r2, #4
 80031b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f870 	bl	80032aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0b      	blt.n	800334a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4906      	ldr	r1, [pc, #24]	; (8003354 <__NVIC_EnableIRQ+0x34>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db12      	blt.n	8003390 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	490a      	ldr	r1, [pc, #40]	; (800339c <__NVIC_DisableIRQ+0x44>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	3320      	adds	r3, #32
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003384:	f3bf 8f4f 	dsb	sy
}
 8003388:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800338a:	f3bf 8f6f 	isb	sy
}
 800338e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db0a      	blt.n	80033ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	490c      	ldr	r1, [pc, #48]	; (80033ec <__NVIC_SetPriority+0x4c>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	440b      	add	r3, r1
 80033c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c8:	e00a      	b.n	80033e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <__NVIC_SetPriority+0x50>)
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b04      	subs	r3, #4
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	440b      	add	r3, r1
 80033de:	761a      	strb	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000e100 	.word	0xe000e100
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf28      	it	cs
 8003412:	2304      	movcs	r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	2b06      	cmp	r3, #6
 800341c:	d902      	bls.n	8003424 <NVIC_EncodePriority+0x30>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3b03      	subs	r3, #3
 8003422:	e000      	b.n	8003426 <NVIC_EncodePriority+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	f04f 32ff 	mov.w	r2, #4294967295
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	401a      	ands	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	4313      	orrs	r3, r2
         );
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff90 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff09 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff1e 	bl	8003304 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff90 	bl	80033f4 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5f 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff11 	bl	8003320 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff1f 	bl	8003358 <__NVIC_DisableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff94 	bl	8003458 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e043      	b.n	80035da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_DMA_Init+0xa8>)
 800355a:	4413      	add	r3, r2
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_DMA_Init+0xac>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_DMA_Init+0xb0>)
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800358a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	bffdfff8 	.word	0xbffdfff8
 80035e8:	cccccccd 	.word	0xcccccccd
 80035ec:	40020000 	.word	0x40020000

080035f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_DMA_Start_IT+0x20>
 800360c:	2302      	movs	r3, #2
 800360e:	e04b      	b.n	80036a8 <HAL_DMA_Start_IT+0xb8>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d13a      	bne.n	800369a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f973 	bl	8003934 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 020e 	orr.w	r2, r2, #14
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e00f      	b.n	8003688 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 020a 	orr.w	r2, r2, #10
 8003686:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e005      	b.n	80036a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d008      	beq.n	80036da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e020      	b.n	800371c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 020e 	bic.w	r2, r2, #14
 80036e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
	...

08003728 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d04f      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xc8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04a      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a66      	ldr	r2, [pc, #408]	; (8003918 <HAL_DMA_IRQHandler+0x1f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d029      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xae>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a65      	ldr	r2, [pc, #404]	; (800391c <HAL_DMA_IRQHandler+0x1f4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0xaa>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a63      	ldr	r2, [pc, #396]	; (8003920 <HAL_DMA_IRQHandler+0x1f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01a      	beq.n	80037cc <HAL_DMA_IRQHandler+0xa4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a62      	ldr	r2, [pc, #392]	; (8003924 <HAL_DMA_IRQHandler+0x1fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d012      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x9e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a60      	ldr	r2, [pc, #384]	; (8003928 <HAL_DMA_IRQHandler+0x200>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00a      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x98>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	; (800392c <HAL_DMA_IRQHandler+0x204>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d102      	bne.n	80037ba <HAL_DMA_IRQHandler+0x92>
 80037b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037b8:	e00e      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037be:	e00b      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037c4:	e008      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ca:	e005      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d0:	e002      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_IRQHandler+0xb0>
 80037d6:	2304      	movs	r3, #4
 80037d8:	4a55      	ldr	r2, [pc, #340]	; (8003930 <HAL_DMA_IRQHandler+0x208>)
 80037da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8094 	beq.w	800390e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037ee:	e08e      	b.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	2202      	movs	r2, #2
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d056      	beq.n	80038ae <HAL_DMA_IRQHandler+0x186>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d051      	beq.n	80038ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020a 	bic.w	r2, r2, #10
 8003826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_DMA_IRQHandler+0x1f0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d029      	beq.n	800388e <HAL_DMA_IRQHandler+0x166>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a37      	ldr	r2, [pc, #220]	; (800391c <HAL_DMA_IRQHandler+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_IRQHandler+0x162>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a35      	ldr	r2, [pc, #212]	; (8003920 <HAL_DMA_IRQHandler+0x1f8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x15c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <HAL_DMA_IRQHandler+0x1fc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0x156>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_DMA_IRQHandler+0x200>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00a      	beq.n	8003878 <HAL_DMA_IRQHandler+0x150>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_DMA_IRQHandler+0x204>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d102      	bne.n	8003872 <HAL_DMA_IRQHandler+0x14a>
 800386c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003870:	e00e      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003876:	e00b      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387c:	e008      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800387e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003882:	e005      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 8003884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003888:	e002      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800388a:	2320      	movs	r3, #32
 800388c:	e000      	b.n	8003890 <HAL_DMA_IRQHandler+0x168>
 800388e:	2302      	movs	r3, #2
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_DMA_IRQHandler+0x208>)
 8003892:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d034      	beq.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038ac:	e02f      	b.n	800390e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2208      	movs	r2, #8
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d028      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 020e 	bic.w	r2, r2, #14
 80038d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    }
  }
  return;
 800390e:	bf00      	nop
 8003910:	bf00      	nop
}
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40020008 	.word	0x40020008
 800391c:	4002001c 	.word	0x4002001c
 8003920:	40020030 	.word	0x40020030
 8003924:	40020044 	.word	0x40020044
 8003928:	40020058 	.word	0x40020058
 800392c:	4002006c 	.word	0x4002006c
 8003930:	40020000 	.word	0x40020000

08003934 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b10      	cmp	r3, #16
 8003960:	d108      	bne.n	8003974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003972:	e007      	b.n	8003984 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
	...

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b08b      	sub	sp, #44	; 0x2c
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a2:	e161      	b.n	8003c68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039a4:	2201      	movs	r2, #1
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 8150 	bne.w	8003c62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a97      	ldr	r2, [pc, #604]	; (8003c24 <HAL_GPIO_Init+0x294>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d05e      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039cc:	4a95      	ldr	r2, [pc, #596]	; (8003c24 <HAL_GPIO_Init+0x294>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d875      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039d2:	4a95      	ldr	r2, [pc, #596]	; (8003c28 <HAL_GPIO_Init+0x298>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d058      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039d8:	4a93      	ldr	r2, [pc, #588]	; (8003c28 <HAL_GPIO_Init+0x298>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d86f      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039de:	4a93      	ldr	r2, [pc, #588]	; (8003c2c <HAL_GPIO_Init+0x29c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d052      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039e4:	4a91      	ldr	r2, [pc, #580]	; (8003c2c <HAL_GPIO_Init+0x29c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d869      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039ea:	4a91      	ldr	r2, [pc, #580]	; (8003c30 <HAL_GPIO_Init+0x2a0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04c      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039f0:	4a8f      	ldr	r2, [pc, #572]	; (8003c30 <HAL_GPIO_Init+0x2a0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d863      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 80039f6:	4a8f      	ldr	r2, [pc, #572]	; (8003c34 <HAL_GPIO_Init+0x2a4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d046      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
 80039fc:	4a8d      	ldr	r2, [pc, #564]	; (8003c34 <HAL_GPIO_Init+0x2a4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d85d      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 8003a02:	2b12      	cmp	r3, #18
 8003a04:	d82a      	bhi.n	8003a5c <HAL_GPIO_Init+0xcc>
 8003a06:	2b12      	cmp	r3, #18
 8003a08:	d859      	bhi.n	8003abe <HAL_GPIO_Init+0x12e>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_GPIO_Init+0x80>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a8b 	.word	0x08003a8b
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a77 	.word	0x08003a77
 8003a1c:	08003ab9 	.word	0x08003ab9
 8003a20:	08003abf 	.word	0x08003abf
 8003a24:	08003abf 	.word	0x08003abf
 8003a28:	08003abf 	.word	0x08003abf
 8003a2c:	08003abf 	.word	0x08003abf
 8003a30:	08003abf 	.word	0x08003abf
 8003a34:	08003abf 	.word	0x08003abf
 8003a38:	08003abf 	.word	0x08003abf
 8003a3c:	08003abf 	.word	0x08003abf
 8003a40:	08003abf 	.word	0x08003abf
 8003a44:	08003abf 	.word	0x08003abf
 8003a48:	08003abf 	.word	0x08003abf
 8003a4c:	08003abf 	.word	0x08003abf
 8003a50:	08003abf 	.word	0x08003abf
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003a81 	.word	0x08003a81
 8003a5c:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <HAL_GPIO_Init+0x2a8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a62:	e02c      	b.n	8003abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e029      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	623b      	str	r3, [r7, #32]
          break;
 8003a74:	e024      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	623b      	str	r3, [r7, #32]
          break;
 8003a7e:	e01f      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	330c      	adds	r3, #12
 8003a86:	623b      	str	r3, [r7, #32]
          break;
 8003a88:	e01a      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a92:	2304      	movs	r3, #4
 8003a94:	623b      	str	r3, [r7, #32]
          break;
 8003a96:	e013      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	611a      	str	r2, [r3, #16]
          break;
 8003aaa:	e009      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aac:	2308      	movs	r3, #8
 8003aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	615a      	str	r2, [r3, #20]
          break;
 8003ab6:	e003      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	623b      	str	r3, [r7, #32]
          break;
 8003abc:	e000      	b.n	8003ac0 <HAL_GPIO_Init+0x130>
          break;
 8003abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2bff      	cmp	r3, #255	; 0xff
 8003ac4:	d801      	bhi.n	8003aca <HAL_GPIO_Init+0x13a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	e001      	b.n	8003ace <HAL_GPIO_Init+0x13e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2bff      	cmp	r3, #255	; 0xff
 8003ad4:	d802      	bhi.n	8003adc <HAL_GPIO_Init+0x14c>
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	e002      	b.n	8003ae2 <HAL_GPIO_Init+0x152>
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3b08      	subs	r3, #8
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	210f      	movs	r1, #15
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	431a      	orrs	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80a9 	beq.w	8003c62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_GPIO_Init+0x2ac>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4a49      	ldr	r2, [pc, #292]	; (8003c3c <HAL_GPIO_Init+0x2ac>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6193      	str	r3, [r2, #24]
 8003b1c:	4b47      	ldr	r3, [pc, #284]	; (8003c3c <HAL_GPIO_Init+0x2ac>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b28:	4a45      	ldr	r2, [pc, #276]	; (8003c40 <HAL_GPIO_Init+0x2b0>)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <HAL_GPIO_Init+0x2b4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00d      	beq.n	8003b70 <HAL_GPIO_Init+0x1e0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3c      	ldr	r2, [pc, #240]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x1dc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3b      	ldr	r2, [pc, #236]	; (8003c4c <HAL_GPIO_Init+0x2bc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_GPIO_Init+0x1d8>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e004      	b.n	8003b72 <HAL_GPIO_Init+0x1e2>
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e002      	b.n	8003b72 <HAL_GPIO_Init+0x1e2>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_GPIO_Init+0x1e2>
 8003b70:	2300      	movs	r3, #0
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	f002 0203 	and.w	r2, r2, #3
 8003b78:	0092      	lsls	r2, r2, #2
 8003b7a:	4093      	lsls	r3, r2
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b82:	492f      	ldr	r1, [pc, #188]	; (8003c40 <HAL_GPIO_Init+0x2b0>)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	3302      	adds	r3, #2
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	492b      	ldr	r1, [pc, #172]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003baa:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	4927      	ldr	r1, [pc, #156]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bc4:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	4921      	ldr	r1, [pc, #132]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	491d      	ldr	r1, [pc, #116]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4917      	ldr	r1, [pc, #92]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	4913      	ldr	r1, [pc, #76]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01f      	beq.n	8003c54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	490d      	ldr	r1, [pc, #52]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e01f      	b.n	8003c62 <HAL_GPIO_Init+0x2d2>
 8003c22:	bf00      	nop
 8003c24:	10320000 	.word	0x10320000
 8003c28:	10310000 	.word	0x10310000
 8003c2c:	10220000 	.word	0x10220000
 8003c30:	10210000 	.word	0x10210000
 8003c34:	10120000 	.word	0x10120000
 8003c38:	10110000 	.word	0x10110000
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40010800 	.word	0x40010800
 8003c48:	40010c00 	.word	0x40010c00
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_GPIO_Init+0x2f4>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	4909      	ldr	r1, [pc, #36]	; (8003c84 <HAL_GPIO_Init+0x2f4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f47f ae96 	bne.w	80039a4 <HAL_GPIO_Init+0x14>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	372c      	adds	r7, #44	; 0x2c
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40010400 	.word	0x40010400

08003c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd f9da 	bl	8001060 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e272      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8087 	beq.w	8003de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd8:	4b92      	ldr	r3, [pc, #584]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d00c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d112      	bne.n	8003d16 <HAL_RCC_OscConfig+0x5e>
 8003cf0:	4b8c      	ldr	r3, [pc, #560]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfe:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d06c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x12c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d168      	bne.n	8003de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e24c      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x76>
 8003d20:	4b80      	ldr	r3, [pc, #512]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7f      	ldr	r2, [pc, #508]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e02e      	b.n	8003d8c <HAL_RCC_OscConfig+0xd4>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x98>
 8003d36:	4b7b      	ldr	r3, [pc, #492]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7a      	ldr	r2, [pc, #488]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xd4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0xbc>
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a71      	ldr	r2, [pc, #452]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6e      	ldr	r2, [pc, #440]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xd4>
 8003d74:	4b6b      	ldr	r3, [pc, #428]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6a      	ldr	r2, [pc, #424]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b68      	ldr	r3, [pc, #416]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe f954 	bl	8002040 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f950 	bl	8002040 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e200      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5d      	ldr	r3, [pc, #372]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xe4>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f940 	bl	8002040 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe f93c 	bl	8002040 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1ec      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x10c>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003df2:	4b4c      	ldr	r3, [pc, #304]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dfe:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x18c>
 8003e0a:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b43      	ldr	r3, [pc, #268]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x176>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c0      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4939      	ldr	r1, [pc, #228]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fe f8f5 	bl	8002040 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fe f8f1 	bl	8002040 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a1      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4927      	ldr	r1, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCC_OscConfig+0x270>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe f8d4 	bl	8002040 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fe f8d0 	bl	8002040 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e180      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d03a      	beq.n	8003f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_RCC_OscConfig+0x274>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fe f8b4 	bl	8002040 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fe f8b0 	bl	8002040 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e160      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003efa:	2001      	movs	r0, #1
 8003efc:	f000 fa9c 	bl	8004438 <RCC_Delay>
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_RCC_OscConfig+0x274>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe f89a 	bl	8002040 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0e:	e00f      	b.n	8003f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f10:	f7fe f896 	bl	8002040 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d908      	bls.n	8003f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e146      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	42420000 	.word	0x42420000
 8003f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	4b92      	ldr	r3, [pc, #584]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e9      	bne.n	8003f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a6 	beq.w	8004096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4e:	4b8b      	ldr	r3, [pc, #556]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4b88      	ldr	r3, [pc, #544]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4a87      	ldr	r2, [pc, #540]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	61d3      	str	r3, [r2, #28]
 8003f66:	4b85      	ldr	r3, [pc, #532]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	4b82      	ldr	r3, [pc, #520]	; (8004180 <HAL_RCC_OscConfig+0x4c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d118      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f82:	4b7f      	ldr	r3, [pc, #508]	; (8004180 <HAL_RCC_OscConfig+0x4c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7e      	ldr	r2, [pc, #504]	; (8004180 <HAL_RCC_OscConfig+0x4c8>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe f857 	bl	8002040 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f96:	f7fe f853 	bl	8002040 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e103      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	4b75      	ldr	r3, [pc, #468]	; (8004180 <HAL_RCC_OscConfig+0x4c8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x312>
 8003fbc:	4b6f      	ldr	r3, [pc, #444]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4a6e      	ldr	r2, [pc, #440]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6213      	str	r3, [r2, #32]
 8003fc8:	e02d      	b.n	8004026 <HAL_RCC_OscConfig+0x36e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x334>
 8003fd2:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4a69      	ldr	r2, [pc, #420]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6213      	str	r3, [r2, #32]
 8003fde:	4b67      	ldr	r3, [pc, #412]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4a66      	ldr	r2, [pc, #408]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	6213      	str	r3, [r2, #32]
 8003fea:	e01c      	b.n	8004026 <HAL_RCC_OscConfig+0x36e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d10c      	bne.n	800400e <HAL_RCC_OscConfig+0x356>
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4a60      	ldr	r2, [pc, #384]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	f043 0304 	orr.w	r3, r3, #4
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	4b5e      	ldr	r3, [pc, #376]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4a5d      	ldr	r2, [pc, #372]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6213      	str	r3, [r2, #32]
 800400c:	e00b      	b.n	8004026 <HAL_RCC_OscConfig+0x36e>
 800400e:	4b5b      	ldr	r3, [pc, #364]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a5a      	ldr	r2, [pc, #360]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a57      	ldr	r2, [pc, #348]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d015      	beq.n	800405a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe f807 	bl	8002040 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe f803 	bl	8002040 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0b1      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ee      	beq.n	8004036 <HAL_RCC_OscConfig+0x37e>
 8004058:	e014      	b.n	8004084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405a:	f7fd fff1 	bl	8002040 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd ffed 	bl	8002040 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e09b      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004078:	4b40      	ldr	r3, [pc, #256]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ee      	bne.n	8004062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d105      	bne.n	8004096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408a:	4b3c      	ldr	r3, [pc, #240]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4a3b      	ldr	r2, [pc, #236]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8087 	beq.w	80041ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d061      	beq.n	8004170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d146      	bne.n	8004142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fd ffc1 	bl	8002040 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fd ffbd 	bl	8002040 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e06d      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4921      	ldr	r1, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fc:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a19      	ldr	r1, [r3, #32]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	430b      	orrs	r3, r1
 800410e:	491b      	ldr	r1, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fd ff91 	bl	8002040 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fd ff8d 	bl	8002040 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e03d      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x46a>
 8004140:	e035      	b.n	80041ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd ff7a 	bl	8002040 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd ff76 	bl	8002040 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e026      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_OscConfig+0x4c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x498>
 800416e:	e01e      	b.n	80041ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e019      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
 8004184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_OscConfig+0x500>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	429a      	cmp	r2, r3
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0d0      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 0207 	bic.w	r2, r3, #7
 80041e6:	4965      	ldr	r1, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800423a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d040      	beq.n	80042dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d115      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e073      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06b      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4936      	ldr	r1, [pc, #216]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fec8 	bl	8002040 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fd fec4 	bl	8002040 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e053      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d210      	bcs.n	800430c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	4922      	ldr	r1, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1cc>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1d0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fe26 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40022000 	.word	0x40022000
 8004380:	40021000 	.word	0x40021000
 8004384:	080054e4 	.word	0x080054e4
 8004388:	200004ec 	.word	0x200004ec
 800438c:	200004f0 	.word	0x200004f0

08004390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_GetSysClockFreq+0x94>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x36>
 80043be:	e027      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_GetSysClockFreq+0x98>)
 80043c2:	613b      	str	r3, [r7, #16]
      break;
 80043c4:	e027      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_RCC_GetSysClockFreq+0x94>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0c5b      	lsrs	r3, r3, #17
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <HAL_RCC_GetSysClockFreq+0x98>)
 80043f2:	fb03 f202 	mul.w	r2, r3, r2
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e004      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	613b      	str	r3, [r7, #16]
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetSysClockFreq+0x98>)
 8004412:	613b      	str	r3, [r7, #16]
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	693b      	ldr	r3, [r7, #16]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	007a1200 	.word	0x007a1200
 800442c:	080054f4 	.word	0x080054f4
 8004430:	08005504 	.word	0x08005504
 8004434:	003d0900 	.word	0x003d0900

08004438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <RCC_Delay+0x34>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <RCC_Delay+0x38>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004454:	bf00      	nop
  }
  while (Delay --);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <RCC_Delay+0x1c>
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	200004ec 	.word	0x200004ec
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d07d      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004494:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	4a4b      	ldr	r2, [pc, #300]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	61d3      	str	r3, [r2, #28]
 80044ac:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d118      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a42      	ldr	r2, [pc, #264]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d4:	f7fd fdb4 	bl	8002040 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	e008      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fd fdb0 	bl	8002040 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e06d      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02e      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d027      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004518:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004522:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004528:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800452e:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d014      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7fd fd7f 	bl	8002040 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fd fd7b 	bl	8002040 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e036      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ee      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4917      	ldr	r1, [pc, #92]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	4313      	orrs	r3, r2
 8004578:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004598:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	490b      	ldr	r1, [pc, #44]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4904      	ldr	r1, [pc, #16]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42420440 	.word	0x42420440

080045e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e041      	b.n	8004676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fb30 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fc24 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e035      	b.n	8004704 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_TIM_Base_Start_IT+0x90>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x4e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d004      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x4e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a12      	ldr	r2, [pc, #72]	; (8004714 <HAL_TIM_Base_Start_IT+0x94>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d010      	beq.n	8004702 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f0:	e007      	b.n	8004702 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40000400 	.word	0x40000400

08004718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e041      	b.n	80047ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f839 	bl	80047b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fb88 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x24>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e022      	b.n	8004832 <HAL_TIM_PWM_Start+0x6a>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d109      	bne.n	8004806 <HAL_TIM_PWM_Start+0x3e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e015      	b.n	8004832 <HAL_TIM_PWM_Start+0x6a>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x58>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e008      	b.n	8004832 <HAL_TIM_PWM_Start+0x6a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e059      	b.n	80048ee <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0x82>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	e013      	b.n	8004872 <HAL_TIM_PWM_Start+0xaa>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0x92>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	e00b      	b.n	8004872 <HAL_TIM_PWM_Start+0xaa>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xa2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	e003      	b.n	8004872 <HAL_TIM_PWM_Start+0xaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2201      	movs	r2, #1
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fd6c 	bl	8005358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_TIM_PWM_Start+0x130>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d107      	bne.n	800489a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_TIM_PWM_Start+0x130>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_PWM_Start+0xf0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_PWM_Start+0xf0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <HAL_TIM_PWM_Start+0x134>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d010      	beq.n	80048ec <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e007      	b.n	80048ec <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400

08004900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0202 	mvn.w	r2, #2
 800492c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa76 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa69 	bl	8004e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa78 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0204 	mvn.w	r2, #4
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa4c 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa3f 	bl	8004e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa4e 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0208 	mvn.w	r2, #8
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2204      	movs	r2, #4
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa22 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa15 	bl	8004e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa24 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0210 	mvn.w	r2, #16
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9f8 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9eb 	bl	8004e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9fa 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10e      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0201 	mvn.w	r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fb16 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d10e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fcd9 	bl	8005462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9be 	bl	8004e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fca4 	bl	8005450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e0ae      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	f200 809f 	bhi.w	8004c7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004c7d 	.word	0x08004c7d
 8004b4c:	08004c7d 	.word	0x08004c7d
 8004b50:	08004c7d 	.word	0x08004c7d
 8004b54:	08004bb9 	.word	0x08004bb9
 8004b58:	08004c7d 	.word	0x08004c7d
 8004b5c:	08004c7d 	.word	0x08004c7d
 8004b60:	08004c7d 	.word	0x08004c7d
 8004b64:	08004bfb 	.word	0x08004bfb
 8004b68:	08004c7d 	.word	0x08004c7d
 8004b6c:	08004c7d 	.word	0x08004c7d
 8004b70:	08004c7d 	.word	0x08004c7d
 8004b74:	08004c3b 	.word	0x08004c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f9cc 	bl	8004f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0208 	orr.w	r2, r2, #8
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0204 	bic.w	r2, r2, #4
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	619a      	str	r2, [r3, #24]
      break;
 8004bb6:	e064      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa12 	bl	8004fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6999      	ldr	r1, [r3, #24]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	021a      	lsls	r2, r3, #8
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	619a      	str	r2, [r3, #24]
      break;
 8004bf8:	e043      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fa5b 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0208 	orr.w	r2, r2, #8
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0204 	bic.w	r2, r2, #4
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	61da      	str	r2, [r3, #28]
      break;
 8004c38:	e023      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 faa5 	bl	8005190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69d9      	ldr	r1, [r3, #28]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	021a      	lsls	r2, r3, #8
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	61da      	str	r2, [r3, #28]
      break;
 8004c7a:	e002      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0b4      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x186>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce8:	d03e      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0xd4>
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cee:	f200 8087 	bhi.w	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	f000 8086 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x172>
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfe:	d87f      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b70      	cmp	r3, #112	; 0x70
 8004d02:	d01a      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xa6>
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d87b      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b60      	cmp	r3, #96	; 0x60
 8004d0a:	d050      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x11a>
 8004d0c:	2b60      	cmp	r3, #96	; 0x60
 8004d0e:	d877      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b50      	cmp	r3, #80	; 0x50
 8004d12:	d03c      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0xfa>
 8004d14:	2b50      	cmp	r3, #80	; 0x50
 8004d16:	d873      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d058      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x13a>
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d86f      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d064      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d86b      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d060      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d867      	bhi.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d05c      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d05a      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	e062      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f000 fae6 	bl	800531a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	609a      	str	r2, [r3, #8]
      break;
 8004d66:	e04f      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f000 facf 	bl	800531a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d8a:	609a      	str	r2, [r3, #8]
      break;
 8004d8c:	e03c      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fa46 	bl	800522c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2150      	movs	r1, #80	; 0x50
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa9d 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e02c      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f000 fa64 	bl	8005288 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2160      	movs	r1, #96	; 0x60
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fa8d 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e01c      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fa26 	bl	800522c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa7d 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004dec:	e00c      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f000 fa74 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004dfe:	e003      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e000      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <TIM_Base_SetConfig+0xa8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_Base_SetConfig+0x28>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0x28>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <TIM_Base_SetConfig+0xac>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <TIM_Base_SetConfig+0xa8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0x52>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0x52>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <TIM_Base_SetConfig+0xac>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <TIM_Base_SetConfig+0xa8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400

08004f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0302 	bic.w	r3, r3, #2
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <TIM_OC1_SetConfig+0xc8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10c      	bne.n	8004f92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0308 	bic.w	r3, r3, #8
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <TIM_OC1_SetConfig+0xc8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d111      	bne.n	8004fbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40012c00 	.word	0x40012c00

08004fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0210 	bic.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <TIM_OC2_SetConfig+0xd0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d10d      	bne.n	8005064 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <TIM_OC2_SetConfig+0xd0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d113      	bne.n	8005094 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	40012c00 	.word	0x40012c00

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <TIM_OC3_SetConfig+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <TIM_OC3_SetConfig+0xd0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d113      	bne.n	8005166 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40012c00 	.word	0x40012c00

08005190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0f      	ldr	r2, [pc, #60]	; (8005228 <TIM_OC4_SetConfig+0x98>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d109      	bne.n	8005204 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	40012c00 	.word	0x40012c00

0800522c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 030a 	bic.w	r3, r3, #10
 8005268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0210 	bic.w	r2, r3, #16
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	f043 0307 	orr.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005334:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	021a      	lsls	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	431a      	orrs	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4313      	orrs	r3, r2
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	609a      	str	r2, [r3, #8]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e041      	b.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a14      	ldr	r2, [pc, #80]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d004      	beq.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a10      	ldr	r2, [pc, #64]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10c      	bne.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4313      	orrs	r3, r2
 8005420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400

08005450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	2600      	movs	r6, #0
 8005478:	4d0c      	ldr	r5, [pc, #48]	; (80054ac <__libc_init_array+0x38>)
 800547a:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	f000 f822 	bl	80054cc <_init>
 8005488:	2600      	movs	r6, #0
 800548a:	4d0a      	ldr	r5, [pc, #40]	; (80054b4 <__libc_init_array+0x40>)
 800548c:	4c0a      	ldr	r4, [pc, #40]	; (80054b8 <__libc_init_array+0x44>)
 800548e:	1b64      	subs	r4, r4, r5
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	08005508 	.word	0x08005508
 80054b0:	08005508 	.word	0x08005508
 80054b4:	08005508 	.word	0x08005508
 80054b8:	0800550c 	.word	0x0800550c

080054bc <memset>:
 80054bc:	4603      	mov	r3, r0
 80054be:	4402      	add	r2, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
