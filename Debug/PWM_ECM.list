
PWM_ECM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bbc  08002bbc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002bbc  08002bbc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bbc  08002bbc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000018  08002bdc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002bdc  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008638  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001580  00000000  00000000  00028679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161fd  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000941a  00000000  00000000  00041005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d51  00000000  00000000  0004a41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000cc1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b80 	.word	0x08002b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002b80 	.word	0x08002b80

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <HAL_GPIO_EXTI_Callback>:

uint32_t current_time=0;
uint32_t elapsed_time= 0;
uint32_t last_time=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
  TIM2->CNT = 0;
 800069e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80006ac:	2009      	movs	r0, #9
 80006ae:	f000 fd64 	bl	800117a <HAL_NVIC_DisableIRQ>
  sync++;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd4c 	bl	8000158 <__addsf3>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40000400 	.word	0x40000400
 80006d4:	200000cc 	.word	0x200000cc

080006d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
if (htim->Instance == TIM2) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e8:	d175      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0xfe>
	current_time=HAL_GetTick();
 80006ea:	f000 fbf3 	bl	8000ed4 <HAL_GetTick>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a43      	ldr	r2, [pc, #268]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80006f2:	6013      	str	r3, [r2, #0]
	elapsed_time=current_time-last_time;
 80006f4:	4b42      	ldr	r3, [pc, #264]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000700:	6013      	str	r3, [r2, #0]
	RPM = (1 / (float)elapsed_time)*2*60*1000;
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fdd6 	bl	80002b8 <__aeabi_ui2f>
 800070c:	4603      	mov	r3, r0
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000714:	f7ff fedc 	bl	80004d0 <__aeabi_fdiv>
 8000718:	4603      	mov	r3, r0
 800071a:	4619      	mov	r1, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd1b 	bl	8000158 <__addsf3>
 8000722:	4603      	mov	r3, r0
 8000724:	4939      	ldr	r1, [pc, #228]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe1e 	bl	8000368 <__aeabi_fmul>
 800072c:	4603      	mov	r3, r0
 800072e:	4938      	ldr	r1, [pc, #224]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fe19 	bl	8000368 <__aeabi_fmul>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800073c:	601a      	str	r2, [r3, #0]
	last_time=current_time;
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a30      	ldr	r2, [pc, #192]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000744:	6013      	str	r3, [r2, #0]

	TIM3->CCR1=(int) inj*10;
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff5c 	bl	8000608 <__aeabi_f2iz>
 8000750:	4602      	mov	r2, r0
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	461a      	mov	r2, r3
 800075c:	4b2f      	ldr	r3, [pc, #188]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=(int) ign*10;
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff4f 	bl	8000608 <__aeabi_f2iz>
 800076a:	4602      	mov	r2, r0
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000778:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3=(int) ign*10+10*ignition_duration;
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff42 	bl	8000608 <__aeabi_f2iz>
 8000784:	4602      	mov	r2, r0
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd96 	bl	80002c0 <__aeabi_i2f>
 8000794:	4604      	mov	r4, r0
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4923      	ldr	r1, [pc, #140]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fde3 	bl	8000368 <__aeabi_fmul>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4620      	mov	r0, r4
 80007a8:	f7ff fcd6 	bl	8000158 <__addsf3>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4c1b      	ldr	r4, [pc, #108]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff4f 	bl	8000654 <__aeabi_f2uiz>
 80007b6:	4603      	mov	r3, r0
 80007b8:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM3->CNT=0;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
	cycles++;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fcc5 	bl	8000158 <__addsf3>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80007d4:	601a      	str	r2, [r3, #0]
}
if (htim->Instance == TIM3){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d10a      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x11e>
	fired++;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcb5 	bl	8000158 <__addsf3>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80007f4:	601a      	str	r2, [r3, #0]
}
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000d4 	.word	0x200000d4
 8000804:	200000dc 	.word	0x200000dc
 8000808:	200000d8 	.word	0x200000d8
 800080c:	42700000 	.word	0x42700000
 8000810:	447a0000 	.word	0x447a0000
 8000814:	200000c4 	.word	0x200000c4
 8000818:	20000000 	.word	0x20000000
 800081c:	40000400 	.word	0x40000400
 8000820:	20000004 	.word	0x20000004
 8000824:	20000008 	.word	0x20000008
 8000828:	41200000 	.word	0x41200000
 800082c:	200000d0 	.word	0x200000d0
 8000830:	200000c8 	.word	0x200000c8

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 faf4 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f822 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f952 	bl	8000ae8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000844:	f000 f864 	bl	8000910 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000848:	f000 f8b4 	bl	80009b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start_IT(&htim2);//start the timer TIM2 in interrupt mode
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <main+0x48>)
 800084e:	f001 fa71 	bl	8001d34 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim3);
 8000852:	480b      	ldr	r0, [pc, #44]	; (8000880 <main+0x4c>)
 8000854:	f001 fa6e 	bl	8001d34 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <main+0x4c>)
 800085c:	f001 fb0e 	bl	8001e7c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000860:	2104      	movs	r1, #4
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0x4c>)
 8000864:	f001 fb0a 	bl	8001e7c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000868:	2108      	movs	r1, #8
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <main+0x4c>)
 800086c:	f001 fb06 	bl	8001e7c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f000 fb38 	bl	8000ee8 <HAL_Delay>
 8000878:	e7fa      	b.n	8000870 <main+0x3c>
 800087a:	bf00      	nop
 800087c:	20000034 	.word	0x20000034
 8000880:	2000007c 	.word	0x2000007c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b090      	sub	sp, #64	; 0x40
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	2228      	movs	r2, #40	; 0x28
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f96c 	bl	8002b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fe03 	bl	80014d8 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008d8:	f000 f952 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 f870 	bl	80019dc <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000902:	f000 f93d 	bl	8000b80 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3740      	adds	r7, #64	; 0x40
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_TIM2_Init+0xa0>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_TIM2_Init+0xa0>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_TIM2_Init+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_TIM2_Init+0xa0>)
 8000942:	2245      	movs	r2, #69	; 0x45
 8000944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM2_Init+0xa0>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_TIM2_Init+0xa0>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_TIM2_Init+0xa0>)
 8000954:	f001 f99e 	bl	8001c94 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f90f 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_TIM2_Init+0xa0>)
 800097c:	f001 fce4 	bl	8002348 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000986:	f000 f8fb 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_TIM2_Init+0xa0>)
 8000998:	f002 f85c 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009a2:	f000 f8ed 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000034 	.word	0x20000034

080009b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 80009e6:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <MX_TIM3_Init+0x130>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 80009ec:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80009f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 80009fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0c:	4834      	ldr	r0, [pc, #208]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a0e:	f001 f941 	bl	8001c94 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a18:	f000 f8b2 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	4619      	mov	r1, r3
 8000a28:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a2a:	f001 fc8d 	bl	8002348 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a34:	f000 f8a4 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a38:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a3a:	f001 f9c7 	bl	8001dcc <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 f89c 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4619      	mov	r1, r3
 8000a56:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a58:	f001 fffc 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a62:	f000 f88d 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000a6a:	2332      	movs	r3, #50	; 0x32
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a7e:	f001 fba1 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a88:	f000 f87a 	bl	8000b80 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0208 	bic.w	r2, r2, #8
 8000a9a:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 100;
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000aa8:	f001 fb8c 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000ab2:	f000 f865 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8000ab6:	2396      	movs	r3, #150	; 0x96
 8000ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2208      	movs	r2, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000ac2:	f001 fb7f 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000acc:	f000 f858 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM3_Init+0x12c>)
 8000ad2:	f000 f8ed 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000007c 	.word	0x2000007c
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_GPIO_Init+0x8c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Camshaft_Pin */
  GPIO_InitStruct.Pin = Camshaft_Pin;
 8000b44:	2308      	movs	r3, #8
 8000b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_GPIO_Init+0x90>)
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Camshaft_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	4809      	ldr	r0, [pc, #36]	; (8000b7c <MX_GPIO_Init+0x94>)
 8000b58:	f000 fb2a 	bl	80011b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2009      	movs	r0, #9
 8000b62:	f000 fae0 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b66:	2009      	movs	r0, #9
 8000b68:	f000 faf9 	bl	800115e <HAL_NVIC_EnableIRQ>

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	10210000 	.word	0x10210000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_MspInit+0x5c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_MspInit+0x5c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MspInit+0x60>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_MspInit+0x60>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0e:	d12c      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	61d3      	str	r3, [r2, #28]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = Crankshaft_Pin;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Crankshaft_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c54:	f000 faac 	bl	80011b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	201c      	movs	r0, #28
 8000c5e:	f000 fa62 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c62:	201c      	movs	r0, #28
 8000c64:	f000 fa7b 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c68:	e018      	b.n	8000c9c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_TIM_Base_MspInit+0xbc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d113      	bne.n	8000c9c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	61d3      	str	r3, [r2, #28]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201d      	movs	r0, #29
 8000c92:	f000 fa48 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c96:	201d      	movs	r0, #29
 8000c98:	f000 fa61 	bl	800115e <HAL_NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40000400 	.word	0x40000400

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <HAL_TIM_MspPostInit+0x88>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d12f      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_TIM_MspPostInit+0x8c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Injection_Pin|Ignition1_Pin;
 8000d00:	23c0      	movs	r3, #192	; 0xc0
 8000d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_TIM_MspPostInit+0x90>)
 8000d14:	f000 fa4c 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Ignition2_Pin;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Ignition2_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <HAL_TIM_MspPostInit+0x94>)
 8000d2c:	f000 fa40 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f88f 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camshaft_Pin);
 8000d9a:	2008      	movs	r0, #8
 8000d9c:	f000 fb84 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM2_IRQHandler+0x10>)
 8000daa:	f001 f903 	bl	8001fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000034 	.word	0x20000034

08000db8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM3_IRQHandler+0x10>)
 8000dbe:	f001 f8f9 	bl	8001fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000007c 	.word	0x2000007c

08000dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff fff8 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dde:	490c      	ldr	r1, [pc, #48]	; (8000e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000df4:	4c09      	ldr	r4, [pc, #36]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f001 fe91 	bl	8002b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff fd15 	bl	8000834 <main>
  bx lr
 8000e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e14:	08002bc4 	.word	0x08002bc4
  ldr r2, =_sbss
 8000e18:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e1c:	200000e4 	.word	0x200000e4

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f96b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fea4 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f991 	bl	8001196 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f94b 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000014 	.word	0x20000014
 8000eac:	20000010 	.word	0x20000010

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	200000e0 	.word	0x200000e0

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	200000e0 	.word	0x200000e0

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000014 	.word	0x20000014

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4906      	ldr	r1, [pc, #24]	; (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db12      	blt.n	8001004 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	490a      	ldr	r1, [pc, #40]	; (8001010 <__NVIC_DisableIRQ+0x44>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	3320      	adds	r3, #32
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff8:	f3bf 8f4f 	dsb	sy
}
 8000ffc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffe:	f3bf 8f6f 	isb	sy
}
 8001002:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff09 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff1e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff11 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff1f 	bl	8000fcc <__NVIC_DisableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff94 	bl	80010cc <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	e161      	b.n	8001488 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8150 	bne.w	8001482 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a97      	ldr	r2, [pc, #604]	; (8001444 <HAL_GPIO_Init+0x294>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011ec:	4a95      	ldr	r2, [pc, #596]	; (8001444 <HAL_GPIO_Init+0x294>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d875      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011f2:	4a95      	ldr	r2, [pc, #596]	; (8001448 <HAL_GPIO_Init+0x298>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d058      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011f8:	4a93      	ldr	r2, [pc, #588]	; (8001448 <HAL_GPIO_Init+0x298>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d86f      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011fe:	4a93      	ldr	r2, [pc, #588]	; (800144c <HAL_GPIO_Init+0x29c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d052      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001204:	4a91      	ldr	r2, [pc, #580]	; (800144c <HAL_GPIO_Init+0x29c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d869      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800120a:	4a91      	ldr	r2, [pc, #580]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d04c      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001210:	4a8f      	ldr	r2, [pc, #572]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d863      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001216:	4a8f      	ldr	r2, [pc, #572]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d046      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 800121c:	4a8d      	ldr	r2, [pc, #564]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d85d      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d82a      	bhi.n	800127c <HAL_GPIO_Init+0xcc>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d859      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <HAL_GPIO_Init+0x80>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012ab 	.word	0x080012ab
 8001234:	08001285 	.word	0x08001285
 8001238:	08001297 	.word	0x08001297
 800123c:	080012d9 	.word	0x080012d9
 8001240:	080012df 	.word	0x080012df
 8001244:	080012df 	.word	0x080012df
 8001248:	080012df 	.word	0x080012df
 800124c:	080012df 	.word	0x080012df
 8001250:	080012df 	.word	0x080012df
 8001254:	080012df 	.word	0x080012df
 8001258:	080012df 	.word	0x080012df
 800125c:	080012df 	.word	0x080012df
 8001260:	080012df 	.word	0x080012df
 8001264:	080012df 	.word	0x080012df
 8001268:	080012df 	.word	0x080012df
 800126c:	080012df 	.word	0x080012df
 8001270:	080012df 	.word	0x080012df
 8001274:	0800128d 	.word	0x0800128d
 8001278:	080012a1 	.word	0x080012a1
 800127c:	4a76      	ldr	r2, [pc, #472]	; (8001458 <HAL_GPIO_Init+0x2a8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e02c      	b.n	80012de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e029      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	3304      	adds	r3, #4
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e024      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	3308      	adds	r3, #8
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e01f      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	330c      	adds	r3, #12
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e01a      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b2:	2304      	movs	r3, #4
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e013      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	611a      	str	r2, [r3, #16]
          break;
 80012ca:	e009      	b.n	80012e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	615a      	str	r2, [r3, #20]
          break;
 80012d6:	e003      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          break;
 80012de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d801      	bhi.n	80012ea <HAL_GPIO_Init+0x13a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_Init+0x13e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d802      	bhi.n	80012fc <HAL_GPIO_Init+0x14c>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x152>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	3b08      	subs	r3, #8
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	210f      	movs	r1, #15
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80a9 	beq.w	8001482 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_GPIO_Init+0x2ac>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x2ac>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_GPIO_Init+0x2ac>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x2b4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1dc>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3b      	ldr	r2, [pc, #236]	; (800146c <HAL_GPIO_Init+0x2bc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1d8>
 8001384:	2302      	movs	r3, #2
 8001386:	e004      	b.n	8001392 <HAL_GPIO_Init+0x1e2>
 8001388:	2303      	movs	r3, #3
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x1e2>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_GPIO_Init+0x1e2>
 8001390:	2300      	movs	r3, #0
 8001392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001394:	f002 0203 	and.w	r2, r2, #3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4093      	lsls	r3, r2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a2:	492f      	ldr	r1, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	492b      	ldr	r1, [pc, #172]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4927      	ldr	r1, [pc, #156]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	4921      	ldr	r1, [pc, #132]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	491d      	ldr	r1, [pc, #116]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4917      	ldr	r1, [pc, #92]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	4913      	ldr	r1, [pc, #76]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01f      	beq.n	8001474 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	490d      	ldr	r1, [pc, #52]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e01f      	b.n	8001482 <HAL_GPIO_Init+0x2d2>
 8001442:	bf00      	nop
 8001444:	10320000 	.word	0x10320000
 8001448:	10310000 	.word	0x10310000
 800144c:	10220000 	.word	0x10220000
 8001450:	10210000 	.word	0x10210000
 8001454:	10120000 	.word	0x10120000
 8001458:	10110000 	.word	0x10110000
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	40010800 	.word	0x40010800
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40011000 	.word	0x40011000
 8001470:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_GPIO_Init+0x2f4>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	43db      	mvns	r3, r3
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <HAL_GPIO_Init+0x2f4>)
 800147e:	4013      	ands	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	3301      	adds	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	f47f ae96 	bne.w	80011c4 <HAL_GPIO_Init+0x14>
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	372c      	adds	r7, #44	; 0x2c
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40010400 	.word	0x40010400

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f8e4 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e272      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8087 	beq.w	8001606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f8:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	d00c      	beq.n	800151e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d112      	bne.n	8001536 <HAL_RCC_OscConfig+0x5e>
 8001510:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d10b      	bne.n	8001536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d06c      	beq.n	8001604 <HAL_RCC_OscConfig+0x12c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d168      	bne.n	8001604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e24c      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x76>
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e02e      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a77      	ldr	r2, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e01d      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0xbc>
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a71      	ldr	r2, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 8001594:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800159a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc8e 	bl	8000ed4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fc8a 	bl	8000ed4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e200      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0xe4>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc7a 	bl	8000ed4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fc76 	bl	8000ed4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1ec      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x10c>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d063      	beq.n	80016da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001612:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d11c      	bne.n	8001664 <HAL_RCC_OscConfig+0x18c>
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x176>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e1c0      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4939      	ldr	r1, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e03a      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fc2f 	bl	8000ed4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fc2b 	bl	8000ed4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1a1      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc0e 	bl	8000ed4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc0a 	bl	8000ed4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e180      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03a      	beq.n	800175c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d019      	beq.n	8001722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_RCC_OscConfig+0x274>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fbee 	bl	8000ed4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fbea 	bl	8000ed4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e160      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f000 fa9c 	bl	8001c58 <RCC_Delay>
 8001720:	e01c      	b.n	800175c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_OscConfig+0x274>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fbd4 	bl	8000ed4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172e:	e00f      	b.n	8001750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fbd0 	bl	8000ed4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d908      	bls.n	8001750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e146      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	42420000 	.word	0x42420000
 800174c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e9      	bne.n	8001730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a6 	beq.w	80018b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176e:	4b8b      	ldr	r3, [pc, #556]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10d      	bne.n	8001796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a87      	ldr	r2, [pc, #540]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b85      	ldr	r3, [pc, #532]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <HAL_RCC_OscConfig+0x4c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x4c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7e      	ldr	r2, [pc, #504]	; (80019a0 <HAL_RCC_OscConfig+0x4c8>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb91 	bl	8000ed4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff fb8d 	bl	8000ed4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b64      	cmp	r3, #100	; 0x64
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e103      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b75      	ldr	r3, [pc, #468]	; (80019a0 <HAL_RCC_OscConfig+0x4c8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x312>
 80017dc:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	e02d      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x334>
 80017f2:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	e01c      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x356>
 8001814:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a60      	ldr	r2, [pc, #384]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	4b5e      	ldr	r3, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a5d      	ldr	r2, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 800182e:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d015      	beq.n	800187a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb41 	bl	8000ed4 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fb3d 	bl	8000ed4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0b1      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ee      	beq.n	8001856 <HAL_RCC_OscConfig+0x37e>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb2b 	bl	8000ed4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb27 	bl	8000ed4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e09b      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d105      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8087 	beq.w	80019ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d061      	beq.n	8001990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d146      	bne.n	8001962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fafb 	bl	8000ed4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff faf7 	bl	8000ed4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e06d      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4921      	ldr	r1, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a19      	ldr	r1, [r3, #32]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	430b      	orrs	r3, r1
 800192e:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff facb 	bl	8000ed4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fac7 	bl	8000ed4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e03d      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x46a>
 8001960:	e035      	b.n	80019ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fab4 	bl	8000ed4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fab0 	bl	8000ed4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e026      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x4c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x498>
 800198e:	e01e      	b.n	80019ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e019      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x500>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0d0      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d910      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4965      	ldr	r1, [pc, #404]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b8      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	494d      	ldr	r1, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d040      	beq.n	8001afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e07f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e073      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e06b      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fa02 	bl	8000ed4 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f9fe 	bl	8000ed4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e053      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d210      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4922      	ldr	r1, [pc, #136]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e032      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b6a:	f000 f821 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	490a      	ldr	r1, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	5ccb      	ldrb	r3, [r1, r3]
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f960 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08002b98 	.word	0x08002b98
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000010 	.word	0x20000010

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x30>
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x36>
 8001bde:	e027      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001be2:	613b      	str	r3, [r7, #16]
      break;
 8001be4:	e027      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	0c5b      	lsrs	r3, r3, #17
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c12:	fb03 f202 	mul.w	r2, r3, r2
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e004      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	613b      	str	r3, [r7, #16]
      break;
 8001c2e:	e002      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c32:	613b      	str	r3, [r7, #16]
      break;
 8001c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c36:	693b      	ldr	r3, [r7, #16]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	08002ba8 	.word	0x08002ba8
 8001c50:	08002bb8 	.word	0x08002bb8
 8001c54:	003d0900 	.word	0x003d0900

08001c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <RCC_Delay+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <RCC_Delay+0x38>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c74:	bf00      	nop
  }
  while (Delay --);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <RCC_Delay+0x1c>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e041      	b.n	8001d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe ff98 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 fc24 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d001      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e035      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_Start_IT+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d76:	d004      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_Base_Start_IT+0x94>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d010      	beq.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400

08001dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f839 	bl	8001e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 fb88 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_TIM_PWM_Start+0x24>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e022      	b.n	8001ee6 <HAL_TIM_PWM_Start+0x6a>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d109      	bne.n	8001eba <HAL_TIM_PWM_Start+0x3e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	e015      	b.n	8001ee6 <HAL_TIM_PWM_Start+0x6a>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d109      	bne.n	8001ed4 <HAL_TIM_PWM_Start+0x58>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e008      	b.n	8001ee6 <HAL_TIM_PWM_Start+0x6a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e059      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_TIM_PWM_Start+0x82>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001efc:	e013      	b.n	8001f26 <HAL_TIM_PWM_Start+0xaa>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0x92>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0c:	e00b      	b.n	8001f26 <HAL_TIM_PWM_Start+0xaa>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0xa2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1c:	e003      	b.n	8001f26 <HAL_TIM_PWM_Start+0xaa>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fd6c 	bl	8002a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_TIM_PWM_Start+0x130>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_TIM_PWM_Start+0x130>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_TIM_PWM_Start+0xf0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d004      	beq.n	8001f6c <HAL_TIM_PWM_Start+0xf0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_TIM_PWM_Start+0x134>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d010      	beq.n	8001fa0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	e007      	b.n	8001fa0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0202 	mvn.w	r2, #2
 8001fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fa76 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa69 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa78 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0204 	mvn.w	r2, #4
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa4c 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa3f 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa4e 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0208 	mvn.w	r2, #8
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa22 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fa15 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fa24 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0210 	mvn.w	r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9f8 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f9eb 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f9fa 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0201 	mvn.w	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fad0 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fcd9 	bl	8002b16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9be 	bl	800250c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0220 	mvn.w	r2, #32
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fca4 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0ae      	b.n	8002340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	f200 809f 	bhi.w	8002330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	08002331 	.word	0x08002331
 8002200:	08002331 	.word	0x08002331
 8002204:	08002331 	.word	0x08002331
 8002208:	0800226d 	.word	0x0800226d
 800220c:	08002331 	.word	0x08002331
 8002210:	08002331 	.word	0x08002331
 8002214:	08002331 	.word	0x08002331
 8002218:	080022af 	.word	0x080022af
 800221c:	08002331 	.word	0x08002331
 8002220:	08002331 	.word	0x08002331
 8002224:	08002331 	.word	0x08002331
 8002228:	080022ef 	.word	0x080022ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f9cc 	bl	80025d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0208 	orr.w	r2, r2, #8
 8002246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6999      	ldr	r1, [r3, #24]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	619a      	str	r2, [r3, #24]
      break;
 800226a:	e064      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fa12 	bl	800269c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6999      	ldr	r1, [r3, #24]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
      break;
 80022ac:	e043      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa5b 	bl	8002770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0208 	orr.w	r2, r2, #8
 80022c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0204 	bic.w	r2, r2, #4
 80022d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69d9      	ldr	r1, [r3, #28]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
      break;
 80022ec:	e023      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 faa5 	bl	8002844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69d9      	ldr	r1, [r3, #28]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	61da      	str	r2, [r3, #28]
      break;
 800232e:	e002      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	75fb      	strb	r3, [r7, #23]
      break;
 8002334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_TIM_ConfigClockSource+0x1c>
 8002360:	2302      	movs	r3, #2
 8002362:	e0b4      	b.n	80024ce <HAL_TIM_ConfigClockSource+0x186>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d03e      	beq.n	800241c <HAL_TIM_ConfigClockSource+0xd4>
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	f200 8087 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	f000 8086 	beq.w	80024ba <HAL_TIM_ConfigClockSource+0x172>
 80023ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b2:	d87f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b70      	cmp	r3, #112	; 0x70
 80023b6:	d01a      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xa6>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d87b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b60      	cmp	r3, #96	; 0x60
 80023be:	d050      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x11a>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d877      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b50      	cmp	r3, #80	; 0x50
 80023c6:	d03c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0xfa>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d873      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d058      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x13a>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d86f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b30      	cmp	r3, #48	; 0x30
 80023d6:	d064      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x15a>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d86b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d060      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x15a>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d867      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05c      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x15a>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d05a      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	e062      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f000 fae6 	bl	80029ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
      break;
 800241a:	e04f      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f000 facf 	bl	80029ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800243e:	609a      	str	r2, [r3, #8]
      break;
 8002440:	e03c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fa46 	bl	80028e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2150      	movs	r1, #80	; 0x50
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fa9d 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002460:	e02c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fa64 	bl	800293c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2160      	movs	r1, #96	; 0x60
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa8d 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002480:	e01c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	461a      	mov	r2, r3
 8002490:	f000 fa26 	bl	80028e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fa7d 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 80024a0:	e00c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f000 fa74 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 80024b2:	e003      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e000      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <TIM_Base_SetConfig+0xa8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_Base_SetConfig+0x28>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d003      	beq.n	8002548 <TIM_Base_SetConfig+0x28>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a22      	ldr	r2, [pc, #136]	; (80025cc <TIM_Base_SetConfig+0xac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d108      	bne.n	800255a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <TIM_Base_SetConfig+0xa8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <TIM_Base_SetConfig+0x52>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002568:	d003      	beq.n	8002572 <TIM_Base_SetConfig+0x52>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a17      	ldr	r2, [pc, #92]	; (80025cc <TIM_Base_SetConfig+0xac>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d108      	bne.n	8002584 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <TIM_Base_SetConfig+0xa8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400

080025d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 0201 	bic.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <TIM_OC1_SetConfig+0xc8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d10c      	bne.n	8002646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f023 0308 	bic.w	r3, r3, #8
 8002632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <TIM_OC1_SetConfig+0xc8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d111      	bne.n	8002672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 0210 	bic.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0320 	bic.w	r3, r3, #32
 80026e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <TIM_OC2_SetConfig+0xd0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10d      	bne.n	8002718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a14      	ldr	r2, [pc, #80]	; (800276c <TIM_OC2_SetConfig+0xd0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d113      	bne.n	8002748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40012c00 	.word	0x40012c00

08002770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <TIM_OC3_SetConfig+0xd0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10d      	bne.n	80027ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <TIM_OC3_SetConfig+0xd0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00

08002844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800288e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	031b      	lsls	r3, r3, #12
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <TIM_OC4_SetConfig+0x98>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d109      	bne.n	80028b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 0201 	bic.w	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 030a 	bic.w	r3, r3, #10
 800291c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0210 	bic.w	r2, r3, #16
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	031b      	lsls	r3, r3, #12
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f043 0307 	orr.w	r3, r3, #7
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2201      	movs	r2, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	401a      	ands	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e041      	b.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10c      	bne.n	8002ade <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <__libc_init_array>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	4d0c      	ldr	r5, [pc, #48]	; (8002b60 <__libc_init_array+0x38>)
 8002b2e:	4c0d      	ldr	r4, [pc, #52]	; (8002b64 <__libc_init_array+0x3c>)
 8002b30:	1b64      	subs	r4, r4, r5
 8002b32:	10a4      	asrs	r4, r4, #2
 8002b34:	42a6      	cmp	r6, r4
 8002b36:	d109      	bne.n	8002b4c <__libc_init_array+0x24>
 8002b38:	f000 f822 	bl	8002b80 <_init>
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	4d0a      	ldr	r5, [pc, #40]	; (8002b68 <__libc_init_array+0x40>)
 8002b40:	4c0a      	ldr	r4, [pc, #40]	; (8002b6c <__libc_init_array+0x44>)
 8002b42:	1b64      	subs	r4, r4, r5
 8002b44:	10a4      	asrs	r4, r4, #2
 8002b46:	42a6      	cmp	r6, r4
 8002b48:	d105      	bne.n	8002b56 <__libc_init_array+0x2e>
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
 8002b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b50:	4798      	blx	r3
 8002b52:	3601      	adds	r6, #1
 8002b54:	e7ee      	b.n	8002b34 <__libc_init_array+0xc>
 8002b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5a:	4798      	blx	r3
 8002b5c:	3601      	adds	r6, #1
 8002b5e:	e7f2      	b.n	8002b46 <__libc_init_array+0x1e>
 8002b60:	08002bbc 	.word	0x08002bbc
 8002b64:	08002bbc 	.word	0x08002bbc
 8002b68:	08002bbc 	.word	0x08002bbc
 8002b6c:	08002bc0 	.word	0x08002bc0

08002b70 <memset>:
 8002b70:	4603      	mov	r3, r0
 8002b72:	4402      	add	r2, r0
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d100      	bne.n	8002b7a <memset+0xa>
 8002b78:	4770      	bx	lr
 8002b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7e:	e7f9      	b.n	8002b74 <memset+0x4>

08002b80 <_init>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr

08002b8c <_fini>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr
