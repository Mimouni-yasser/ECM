
ECM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020554  2**0
                  CONTENTS
  4 .ARM          00000000  0800614c  0800614c  00020554  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800614c  0800614c  00020554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000554  20000000  08006154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  20000554  080066a8  00020554  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001afc  080066a8  00021afc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020554  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012641  00000000  00000000  0002057d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d68  00000000  00000000  00032bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00035928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019537  00000000  00000000  00037a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f18  00000000  00000000  00050f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950a5  00000000  00000000  00062eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000f7fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000554 	.word	0x20000554
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fd8 	.word	0x08005fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000558 	.word	0x20000558
 800014c:	08005fd8 	.word	0x08005fd8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <__gesf2>:
 8000de8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000dec:	e006      	b.n	8000dfc <__cmpsf2+0x4>
 8000dee:	bf00      	nop

08000df0 <__lesf2>:
 8000df0:	f04f 0c01 	mov.w	ip, #1
 8000df4:	e002      	b.n	8000dfc <__cmpsf2+0x4>
 8000df6:	bf00      	nop

08000df8 <__cmpsf2>:
 8000df8:	f04f 0c01 	mov.w	ip, #1
 8000dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	bf18      	it	ne
 8000e0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e12:	d011      	beq.n	8000e38 <__cmpsf2+0x40>
 8000e14:	b001      	add	sp, #4
 8000e16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1a:	bf18      	it	ne
 8000e1c:	ea90 0f01 	teqne	r0, r1
 8000e20:	bf58      	it	pl
 8000e22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e26:	bf88      	it	hi
 8000e28:	17c8      	asrhi	r0, r1, #31
 8000e2a:	bf38      	it	cc
 8000e2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e30:	bf18      	it	ne
 8000e32:	f040 0001 	orrne.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	d102      	bne.n	8000e44 <__cmpsf2+0x4c>
 8000e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e42:	d105      	bne.n	8000e50 <__cmpsf2+0x58>
 8000e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e48:	d1e4      	bne.n	8000e14 <__cmpsf2+0x1c>
 8000e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4e:	d0e1      	beq.n	8000e14 <__cmpsf2+0x1c>
 8000e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_cfrcmple>:
 8000e58:	4684      	mov	ip, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	e7ff      	b.n	8000e60 <__aeabi_cfcmpeq>

08000e60 <__aeabi_cfcmpeq>:
 8000e60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e62:	f7ff ffc9 	bl	8000df8 <__cmpsf2>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	bf48      	it	mi
 8000e6a:	f110 0f00 	cmnmi.w	r0, #0
 8000e6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e70 <__aeabi_fcmpeq>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff fff4 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e78:	bf0c      	ite	eq
 8000e7a:	2001      	moveq	r0, #1
 8000e7c:	2000      	movne	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_fcmplt>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff ffea 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e8c:	bf34      	ite	cc
 8000e8e:	2001      	movcc	r0, #1
 8000e90:	2000      	movcs	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmple>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffe0 	bl	8000e60 <__aeabi_cfcmpeq>
 8000ea0:	bf94      	ite	ls
 8000ea2:	2001      	movls	r0, #1
 8000ea4:	2000      	movhi	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmpge>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffd2 	bl	8000e58 <__aeabi_cfrcmple>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpgt>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffc8 	bl	8000e58 <__aeabi_cfrcmple>
 8000ec8:	bf34      	ite	cc
 8000eca:	2001      	movcc	r0, #1
 8000ecc:	2000      	movcs	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_f2uiz>:
 8000ed4:	0042      	lsls	r2, r0, #1
 8000ed6:	d20e      	bcs.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ed8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000edc:	d30b      	bcc.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ede:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ee2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee6:	d409      	bmi.n	8000efc <__aeabi_f2uiz+0x28>
 8000ee8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr
 8000efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f00:	d101      	bne.n	8000f06 <__aeabi_f2uiz+0x32>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d102      	bne.n	8000f0c <__aeabi_f2uiz+0x38>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0a:	4770      	bx	lr
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <vApplicationGetIdleTaskMemory+0x28>)
 8000f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000570 	.word	0x20000570
 8000f40:	20000624 	.word	0x20000624

08000f44 <HAL_GPIO_EXTI_Callback>:
#define O2_val  Data[4]

//TODO: make shorter, consider adding a flag and doing everything in main while loop

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  TIM2->CNT = 0;
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f56:	2009      	movs	r0, #9
 8000f58:	f001 fdc5 	bl	8002ae6 <HAL_NVIC_DisableIRQ>
  sync=true;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000991 	.word	0x20000991

08000f70 <HAL_TIM_PeriodElapsedCallback>:

//function called every time the timer TIM2 overflows
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
if (htim->Instance == TIM2) { //if the timer is TIM2
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d132      	bne.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x78>
	current_time=HAL_GetTick();//get the current time
 8000f82:	f000 ffbb 	bl	8001efc <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a3c      	ldr	r2, [pc, #240]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f8a:	6013      	str	r3, [r2, #0]
	elapsed_time=current_time-last_time;//calculate the time elapsed since the last interrupt
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a3b      	ldr	r2, [pc, #236]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f98:	6013      	str	r3, [r2, #0]
	captured_value++;//increment the number of cycles since the beginning of the program, only for debuggin purposes
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a39      	ldr	r2, [pc, #228]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fa2:	6013      	str	r3, [r2, #0]
	RPM_val = (1 / (float)elapsed_time)*2*60*1000;//calculate the RPM value TODO: optimize, very crude
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fd75 	bl	8000a98 <__aeabi_ui2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000fb6:	f7ff fe7b 	bl	8000cb0 <__aeabi_fdiv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fcba 	bl	8000938 <__addsf3>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4931      	ldr	r1, [pc, #196]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fdbd 	bl	8000b48 <__aeabi_fmul>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	492f      	ldr	r1, [pc, #188]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fdb8 	bl	8000b48 <__aeabi_fmul>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fde:	601a      	str	r2, [r3, #0]
	last_time=current_time;//set the last time to the current time
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000fe6:	6013      	str	r3, [r2, #0]
  }
	fired = false;//set the fired flag to false
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	time_since_cycle = 0;//set the time since the beginning of the cycle to 0
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
	times_overflown = 0;//set the number of times the timer 3 has overflown to 0
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); //set the pin B6 to high, used to start the injection and will be set to low by the output compare register functionnality
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	4829      	ldr	r0, [pc, #164]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001000:	f002 f8f6 	bl	80031f0 <HAL_GPIO_WritePin>
	TIM3->CCR2=INJ*1000;//set the output compare register to the value of the injection timing using the value we got from the lookup table
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4921      	ldr	r1, [pc, #132]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fd9c 	bl	8000b48 <__aeabi_fmul>
 8001010:	4603      	mov	r3, r0
 8001012:	4c26      	ldr	r4, [pc, #152]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__aeabi_f2uiz>
 800101a:	4603      	mov	r3, r0
 800101c:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM3->CNT=0;//reset the counter to 0, so that the timer can start counting from 0deg of crankshaft
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
     TIM3 counts microseconds, so we need to multiply the value of injection timing (calculated in thread) by 1000 to get microseconds
     after the TIM3 gets to CCR2, it pulls the pin B6 low, which ends the injection
      TIM3->CNT=0; resets the counter to 0, so that the timer can start counting from 0deg of crankshaft
  */

if(htim->Instance == TIM3)//if the timer is TIM3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d122      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x104>
{
	times_overflown++;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001038:	801a      	strh	r2, [r3, #0]
	cycles_to_IGN--;//decrement the number of times the TIM3 overflows until the ignition is fired
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001044:	801a      	strh	r2, [r3, #0]
	if(!cycles_to_IGN){//if the number of cycles until the ignition is fired is 0
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d112      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x104>
		TIM3->CCR1 = IGN_time-times_overflown*65535;//set the output compare register to the value of the ignition timing using the value we got from the lookup table
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	460b      	mov	r3, r1
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	1a5b      	subs	r3, r3, r1
 800105e:	4913      	ldr	r1, [pc, #76]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	634b      	str	r3, [r1, #52]	; 0x34
  if(cycles_to_IGN==0){
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x104>
		 TIM3->CCR1=IGN_time;
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6353      	str	r3, [r2, #52]	; 0x34
	 }
  }
	}
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000980 	.word	0x20000980
 8001080:	20000988 	.word	0x20000988
 8001084:	20000984 	.word	0x20000984
 8001088:	2000098c 	.word	0x2000098c
 800108c:	42700000 	.word	0x42700000
 8001090:	447a0000 	.word	0x447a0000
 8001094:	200009a0 	.word	0x200009a0
 8001098:	20000990 	.word	0x20000990
 800109c:	20000994 	.word	0x20000994
 80010a0:	20000998 	.word	0x20000998
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	2000097c 	.word	0x2000097c
 80010ac:	40000400 	.word	0x40000400
 80010b0:	2000099a 	.word	0x2000099a
 80010b4:	2000099c 	.word	0x2000099c

080010b8 <HAL_TIM_OC_DelayElapsedCallback>:

//function called every time the timer TIM3 reaches the value of the output compare register
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && !fired)//check if the timer is TIM3, if the channel is 1 and if the ignition has not been fired yet
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f1b      	ldrb	r3, [r3, #28]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10f      	bne.n	80010f2 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
	{
		TIM3->CCR1 += 2000;//add 2000 microseconds to the output compare register, so that the ignition is turned off 2ms after it's turned on
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80010e6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010ea:	6353      	str	r3, [r2, #52]	; 0x34
		fired = true;//set the fired flag to true
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
    // the PIN is toggled by hardware
	}
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40000400 	.word	0x40000400
 8001100:	20000990 	.word	0x20000990

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b0a4      	sub	sp, #144	; 0x90
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f000 fe9f 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f89f 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f000 fa55 	bl	80015c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001116:	f000 fa35 	bl	8001584 <MX_DMA_Init>
  MX_ADC1_Init();
 800111a:	f000 f8e9 	bl	80012f0 <MX_ADC1_Init>
  MX_CAN_Init();
 800111e:	f000 f925 	bl	800136c <MX_CAN_Init>
  MX_TIM2_Init();
 8001122:	f000 f959 	bl	80013d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001126:	f000 f9a9 	bl	800147c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, Data,5);//start the ADC1 in DMA mode, reading 5 values
 800112a:	2205      	movs	r2, #5
 800112c:	4939      	ldr	r1, [pc, #228]	; (8001214 <main+0x110>)
 800112e:	483a      	ldr	r0, [pc, #232]	; (8001218 <main+0x114>)
 8001130:	f000 ffc6 	bl	80020c0 <HAL_ADC_Start_DMA>
  while(!sync){};
 8001134:	bf00      	nop
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <main+0x118>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f8      	bne.n	8001136 <main+0x32>
  HAL_TIM_Base_Start_IT(&htim2);//start the timer TIM2 in interrupt mode
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <main+0x11c>)
 8001146:	f002 fd71 	bl	8003c2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800114a:	213c      	movs	r1, #60	; 0x3c
 800114c:	4835      	ldr	r0, [pc, #212]	; (8001224 <main+0x120>)
 800114e:	f002 fe11 	bl	8003d74 <HAL_TIM_OC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Read_Sensors */
  osThreadDef(Read_Sensors, Read_Sensors_F, osPriorityNormal, 0, 128);
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <main+0x124>)
 8001154:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001158:	461d      	mov	r5, r3
 800115a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Read_SensorsHandle = osThreadCreate(osThread(Read_Sensors), NULL);
 8001166:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fc45 	bl	80049fc <osThreadCreate>
 8001172:	4603      	mov	r3, r0
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <main+0x128>)
 8001176:	6013      	str	r3, [r2, #0]

  /* definition and creation of Read_Lookup */
  osThreadDef(Read_Lookup, Read_lookup_F, osPriorityNormal, 0, 128);
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <main+0x12c>)
 800117a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800117e:	461d      	mov	r5, r3
 8001180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Read_LookupHandle = osThreadCreate(osThread(Read_Lookup), NULL);
 800118c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fc32 	bl	80049fc <osThreadCreate>
 8001198:	4603      	mov	r3, r0
 800119a:	4a26      	ldr	r2, [pc, #152]	; (8001234 <main+0x130>)
 800119c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fire_Ignition */
  osThreadDef(Fire_Ignition, Fire_Ignition_F, osPriorityNormal, 0, 128);
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <main+0x134>)
 80011a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011a4:	461d      	mov	r5, r3
 80011a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fire_IgnitionHandle = osThreadCreate(osThread(Fire_Ignition), NULL);
 80011b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fc1f 	bl	80049fc <osThreadCreate>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <main+0x138>)
 80011c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fire_Injection */
  osThreadDef(Fire_Injection, Fire_Injection_F, osPriorityNormal, 0, 128);
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <main+0x13c>)
 80011c6:	f107 0420 	add.w	r4, r7, #32
 80011ca:	461d      	mov	r5, r3
 80011cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fire_InjectionHandle = osThreadCreate(osThread(Fire_Injection), NULL);
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fc0c 	bl	80049fc <osThreadCreate>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <main+0x140>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Send_CAN */
  osThreadDef(Send_CAN, Send_CAN_F, osPriorityLow, 0, 128);
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <main+0x144>)
 80011ec:	1d3c      	adds	r4, r7, #4
 80011ee:	461d      	mov	r5, r3
 80011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Send_CANHandle = osThreadCreate(osThread(Send_CAN), NULL);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fbfb 	bl	80049fc <osThreadCreate>
 8001206:	4603      	mov	r3, r0
 8001208:	4a10      	ldr	r2, [pc, #64]	; (800124c <main+0x148>)
 800120a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800120c:	f003 fbef 	bl	80049ee <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001210:	e7fe      	b.n	8001210 <main+0x10c>
 8001212:	bf00      	nop
 8001214:	20000964 	.word	0x20000964
 8001218:	20000824 	.word	0x20000824
 800121c:	20000991 	.word	0x20000991
 8001220:	200008c0 	.word	0x200008c0
 8001224:	20000908 	.word	0x20000908
 8001228:	08006038 	.word	0x08006038
 800122c:	20000950 	.word	0x20000950
 8001230:	08006054 	.word	0x08006054
 8001234:	20000954 	.word	0x20000954
 8001238:	08006070 	.word	0x08006070
 800123c:	20000958 	.word	0x20000958
 8001240:	0800608c 	.word	0x0800608c
 8001244:	2000095c 	.word	0x2000095c
 8001248:	080060a8 	.word	0x080060a8
 800124c:	20000960 	.word	0x20000960

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	2228      	movs	r2, #40	; 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fdf4 	bl	8005e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001294:	4618      	mov	r0, r3
 8001296:	f001 ffdb 	bl	8003250 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012a0:	f000 fbc6 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fa48 	bl	8003754 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012ca:	f000 fbb1 	bl	8001a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ce:	2302      	movs	r3, #2
 80012d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fba1 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012e4:	f000 fba4 	bl	8001a30 <Error_Handler>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3750      	adds	r7, #80	; 0x50
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_ADC1_Init+0x74>)
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <MX_ADC1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_ADC1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_ADC1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_ADC1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_ADC1_Init+0x74>)
 800131a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_ADC1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_ADC1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_ADC1_Init+0x74>)
 800132e:	f000 fdef 	bl	8001f10 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fb7a 	bl	8001a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001340:	2301      	movs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_ADC1_Init+0x74>)
 800134e:	f000 ffb1 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001358:	f000 fb6a 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000824 	.word	0x20000824
 8001368:	40012400 	.word	0x40012400

0800136c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_CAN_Init+0x64>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_CAN_Init+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_CAN_Init+0x64>)
 8001378:	2210      	movs	r2, #16
 800137a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_CAN_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_CAN_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_CAN_Init+0x64>)
 800138a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800138e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_CAN_Init+0x64>)
 8001392:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001396:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_CAN_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_CAN_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_CAN_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_CAN_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_CAN_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_CAN_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_CAN_Init+0x64>)
 80013be:	f001 f972 	bl	80026a6 <HAL_CAN_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013c8:	f000 fb32 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000898 	.word	0x20000898
 80013d4:	40006400 	.word	0x40006400

080013d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_TIM2_Init+0xa0>)
 80013f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_TIM2_Init+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0xa0>)
 800140a:	2245      	movs	r2, #69	; 0x45
 800140c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141a:	4817      	ldr	r0, [pc, #92]	; (8001478 <MX_TIM2_Init+0xa0>)
 800141c:	f002 fbb6 	bl	8003b8c <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001426:	f000 fb03 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001444:	f002 fed8 	bl	80041f8 <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800144e:	f000 faef 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001460:	f003 fa44 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800146a:	f000 fae1 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200008c0 	.word	0x200008c0

0800147c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <MX_TIM3_Init+0x100>)
 80014ae:	4a34      	ldr	r2, [pc, #208]	; (8001580 <MX_TIM3_Init+0x104>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <MX_TIM3_Init+0x100>)
 80014b4:	2223      	movs	r2, #35	; 0x23
 80014b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_TIM3_Init+0x100>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <MX_TIM3_Init+0x100>)
 80014c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_TIM3_Init+0x100>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_TIM3_Init+0x100>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d2:	482a      	ldr	r0, [pc, #168]	; (800157c <MX_TIM3_Init+0x100>)
 80014d4:	f002 fb5a 	bl	8003b8c <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014de:	f000 faa7 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM3_Init+0x100>)
 80014f0:	f002 fe82 	bl	80041f8 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014fa:	f000 fa99 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014fe:	481f      	ldr	r0, [pc, #124]	; (800157c <MX_TIM3_Init+0x100>)
 8001500:	f002 fbe0 	bl	8003cc4 <HAL_TIM_OC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800150a:	f000 fa91 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4619      	mov	r1, r3
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <MX_TIM3_Init+0x100>)
 800151e:	f003 f9e5 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001528:	f000 fa82 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800152c:	2330      	movs	r3, #48	; 0x30
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_TIM3_Init+0x100>)
 8001544:	f002 fe00 	bl	8004148 <HAL_TIM_OC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800154e:	f000 fa6f 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001552:	2320      	movs	r3, #32
 8001554:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2204      	movs	r2, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM3_Init+0x100>)
 800155e:	f002 fdf3 	bl	8004148 <HAL_TIM_OC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001568:	f000 fa62 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM3_Init+0x100>)
 800156e:	f000 fbc7 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000908 	.word	0x20000908
 8001580:	40000400 	.word	0x40000400

08001584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_DMA_Init+0x38>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <MX_DMA_Init+0x38>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_DMA_Init+0x38>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2105      	movs	r1, #5
 80015a6:	200b      	movs	r0, #11
 80015a8:	f001 fa73 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015ac:	200b      	movs	r0, #11
 80015ae:	f001 fa8c 	bl	8002aca <HAL_NVIC_EnableIRQ>

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_GPIO_Init+0x8c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MX_GPIO_Init+0x8c>)
 80015da:	f043 0320 	orr.w	r3, r3, #32
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_GPIO_Init+0x8c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_GPIO_Init+0x8c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <MX_GPIO_Init+0x8c>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_GPIO_Init+0x8c>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_GPIO_Init+0x8c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <MX_GPIO_Init+0x8c>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_GPIO_Init+0x8c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800161c:	2308      	movs	r3, #8
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_GPIO_Init+0x90>)
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_GPIO_Init+0x94>)
 8001630:	f001 fc62 	bl	8002ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2009      	movs	r0, #9
 800163a:	f001 fa2a 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800163e:	2009      	movs	r0, #9
 8001640:	f001 fa43 	bl	8002aca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	10210000 	.word	0x10210000
 8001654:	40010c00 	.word	0x40010c00

08001658 <Interpolate_2D>:

/* USER CODE BEGIN 4 */
/**
 * @brief this function interpolates it's in the name
 */
float Interpolate_2D(float T[N][N], const float *Var, const float *RPM, float x, float y){
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b094      	sub	sp, #80	; 0x50
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
    if (x < 300.0 || x > 7000.0 || y < 20.0 || y > 200.0) {
 8001666:	492b      	ldr	r1, [pc, #172]	; (8001714 <Interpolate_2D+0xbc>)
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7ff fc0b 	bl	8000e84 <__aeabi_fcmplt>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d114      	bne.n	800169e <Interpolate_2D+0x46>
 8001674:	4928      	ldr	r1, [pc, #160]	; (8001718 <Interpolate_2D+0xc0>)
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	f7ff fc22 	bl	8000ec0 <__aeabi_fcmpgt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <Interpolate_2D+0x46>
 8001682:	4926      	ldr	r1, [pc, #152]	; (800171c <Interpolate_2D+0xc4>)
 8001684:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001686:	f7ff fbfd 	bl	8000e84 <__aeabi_fcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <Interpolate_2D+0x46>
 8001690:	4923      	ldr	r1, [pc, #140]	; (8001720 <Interpolate_2D+0xc8>)
 8001692:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001694:	f7ff fc14 	bl	8000ec0 <__aeabi_fcmpgt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <Interpolate_2D+0x4a>
        return -1;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <Interpolate_2D+0xcc>)
 80016a0:	e128      	b.n	80018f4 <Interpolate_2D+0x29c>
    }
    int i, j;
    for (i = 0; i < N && RPM[i] <= x; i++);
 80016a2:	2300      	movs	r3, #0
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a6:	e002      	b.n	80016ae <Interpolate_2D+0x56>
 80016a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016aa:	3301      	adds	r3, #1
 80016ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b0:	2b0b      	cmp	r3, #11
 80016b2:	dc0b      	bgt.n	80016cc <Interpolate_2D+0x74>
 80016b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7ff fbf3 	bl	8000eac <__aeabi_fcmpge>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ed      	bne.n	80016a8 <Interpolate_2D+0x50>
    for (j = 0; j < N && Var[j] <= y; j++);
 80016cc:	2300      	movs	r3, #0
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d0:	e002      	b.n	80016d8 <Interpolate_2D+0x80>
 80016d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d4:	3301      	adds	r3, #1
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016da:	2b0b      	cmp	r3, #11
 80016dc:	dc0b      	bgt.n	80016f6 <Interpolate_2D+0x9e>
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80016ec:	f7ff fbde 	bl	8000eac <__aeabi_fcmpge>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ed      	bne.n	80016d2 <Interpolate_2D+0x7a>

    if (i == 0 || j == 0 || i == N || j == N) {
 80016f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <Interpolate_2D+0xb6>
 80016fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <Interpolate_2D+0xb6>
 8001702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d002      	beq.n	800170e <Interpolate_2D+0xb6>
 8001708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d10c      	bne.n	8001728 <Interpolate_2D+0xd0>
        return -1;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <Interpolate_2D+0xcc>)
 8001710:	e0f0      	b.n	80018f4 <Interpolate_2D+0x29c>
 8001712:	bf00      	nop
 8001714:	43960000 	.word	0x43960000
 8001718:	45dac000 	.word	0x45dac000
 800171c:	41a00000 	.word	0x41a00000
 8001720:	43480000 	.word	0x43480000
 8001724:	bf800000 	.word	0xbf800000
    }

    const float x1 = RPM[i-1], x2 = RPM[i];
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800172e:	3b01      	subs	r3, #1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
    const float y1 = Var[j-1], y2 = Var[j];
 8001746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800174c:	3b01      	subs	r3, #1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
    const float f11 = T[j-1][i-1], f12 = T[j-1][i], f21 = T[j][i-1], f22 = T[j][i];
 8001764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	3b30      	subs	r3, #48	; 0x30
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001776:	3a01      	subs	r2, #1
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
 800177e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	3b30      	subs	r3, #48	; 0x30
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
 8001796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a8:	3a01      	subs	r2, #1
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28

    const float factor_1 = (y2 - y) / (y2 - y1);
 80017c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017cc:	f7ff f8b2 	bl	8000934 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461c      	mov	r4, r3
 80017d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017d8:	f7ff f8ac 	bl	8000934 <__aeabi_fsub>
 80017dc:	4603      	mov	r3, r0
 80017de:	4619      	mov	r1, r3
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff fa65 	bl	8000cb0 <__aeabi_fdiv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    const float factor_2 = (y - y1) / (y2 - y1);
 80017ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80017ee:	f7ff f8a1 	bl	8000934 <__aeabi_fsub>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461c      	mov	r4, r3
 80017f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017fa:	f7ff f89b 	bl	8000934 <__aeabi_fsub>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fa54 	bl	8000cb0 <__aeabi_fdiv>
 8001808:	4603      	mov	r3, r0
 800180a:	623b      	str	r3, [r7, #32]
    const float one = (x2 - x) / (x2 - x1);
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001810:	f7ff f890 	bl	8000934 <__aeabi_fsub>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
 8001818:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800181a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800181c:	f7ff f88a 	bl	8000934 <__aeabi_fsub>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fa43 	bl	8000cb0 <__aeabi_fdiv>
 800182a:	4603      	mov	r3, r0
 800182c:	61fb      	str	r3, [r7, #28]
    const float two = (x - x1) / (x2 - x1);
 800182e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7ff f87f 	bl	8000934 <__aeabi_fsub>
 8001836:	4603      	mov	r3, r0
 8001838:	461c      	mov	r4, r3
 800183a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800183c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800183e:	f7ff f879 	bl	8000934 <__aeabi_fsub>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fa32 	bl	8000cb0 <__aeabi_fdiv>
 800184c:	4603      	mov	r3, r0
 800184e:	61bb      	str	r3, [r7, #24]
    const float three = (x2 - x) / (x2 - x1);
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001854:	f7ff f86e 	bl	8000934 <__aeabi_fsub>
 8001858:	4603      	mov	r3, r0
 800185a:	461c      	mov	r4, r3
 800185c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800185e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001860:	f7ff f868 	bl	8000934 <__aeabi_fsub>
 8001864:	4603      	mov	r3, r0
 8001866:	4619      	mov	r1, r3
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff fa21 	bl	8000cb0 <__aeabi_fdiv>
 800186e:	4603      	mov	r3, r0
 8001870:	617b      	str	r3, [r7, #20]
    const float four = (x - x1) / (x2 - x1);
 8001872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f7ff f85d 	bl	8000934 <__aeabi_fsub>
 800187a:	4603      	mov	r3, r0
 800187c:	461c      	mov	r4, r3
 800187e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001880:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001882:	f7ff f857 	bl	8000934 <__aeabi_fsub>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fa10 	bl	8000cb0 <__aeabi_fdiv>
 8001890:	4603      	mov	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

    return factor_1 * (f11 * one + f21 * two) + factor_2 * (f12 * three + f22 * four);
 8001894:	69f9      	ldr	r1, [r7, #28]
 8001896:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001898:	f7ff f956 	bl	8000b48 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	461c      	mov	r4, r3
 80018a0:	69b9      	ldr	r1, [r7, #24]
 80018a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a4:	f7ff f950 	bl	8000b48 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4619      	mov	r1, r3
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff f843 	bl	8000938 <__addsf3>
 80018b2:	4603      	mov	r3, r0
 80018b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f946 	bl	8000b48 <__aeabi_fmul>
 80018bc:	4603      	mov	r3, r0
 80018be:	461c      	mov	r4, r3
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018c4:	f7ff f940 	bl	8000b48 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461d      	mov	r5, r3
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018d0:	f7ff f93a 	bl	8000b48 <__aeabi_fmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4628      	mov	r0, r5
 80018da:	f7ff f82d 	bl	8000938 <__addsf3>
 80018de:	4603      	mov	r3, r0
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f930 	bl	8000b48 <__aeabi_fmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4619      	mov	r1, r3
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff f823 	bl	8000938 <__addsf3>
 80018f2:	4603      	mov	r3, r0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}

080018fc <Read_Sensors_F>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_Sensors_F */
void Read_Sensors_F(void const * argument)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001904:	e7fe      	b.n	8001904 <Read_Sensors_F+0x8>
	...

08001908 <Read_lookup_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_lookup_F */
void Read_lookup_F(void const * argument)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af02      	add	r7, sp, #8
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_lookup_F */
  /* Infinite loop */
  for(;;)
  {
	 IGN= Interpolate_2D(Ignition_Timing,TBP,RPM,RPM_val,30);
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <Read_lookup_F+0xc0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <Read_lookup_F+0xc4>)
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <Read_lookup_F+0xc8>)
 800191a:	492e      	ldr	r1, [pc, #184]	; (80019d4 <Read_lookup_F+0xcc>)
 800191c:	482e      	ldr	r0, [pc, #184]	; (80019d8 <Read_lookup_F+0xd0>)
 800191e:	f7ff fe9b 	bl	8001658 <Interpolate_2D>
 8001922:	4603      	mov	r3, r0
 8001924:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <Read_lookup_F+0xd4>)
 8001926:	6013      	str	r3, [r2, #0]
	 INJ=Interpolate_2D(Injection_Timing,TBP,RPM,RPM_val,30);
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <Read_lookup_F+0xc0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <Read_lookup_F+0xc4>)
 800192e:	9200      	str	r2, [sp, #0]
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <Read_lookup_F+0xc8>)
 8001932:	4928      	ldr	r1, [pc, #160]	; (80019d4 <Read_lookup_F+0xcc>)
 8001934:	482a      	ldr	r0, [pc, #168]	; (80019e0 <Read_lookup_F+0xd8>)
 8001936:	f7ff fe8f 	bl	8001658 <Interpolate_2D>
 800193a:	4603      	mov	r3, r0
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <Read_lookup_F+0xdc>)
 800193e:	6013      	str	r3, [r2, #0]
	 IGN_time = ((360.0-IGN)/(6.0*RPM_val))*1000000; //calulate the time in us from the angle we got from the table
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <Read_lookup_F+0xd4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd67 	bl	8000418 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	4925      	ldr	r1, [pc, #148]	; (80019e8 <Read_lookup_F+0xe0>)
 8001954:	f7fe fc00 	bl	8000158 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Read_lookup_F+0xc0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fd57 	bl	8000418 <__aeabi_f2d>
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <Read_lookup_F+0xe4>)
 8001970:	f7fe fdaa 	bl	80004c8 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fece 	bl	800071c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	a30d      	add	r3, pc, #52	; (adr r3, 80019c0 <Read_lookup_F+0xb8>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fd9b 	bl	80004c8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7fe ffa7 	bl	80008ec <__aeabi_d2uiz>
 800199e:	4603      	mov	r3, r0
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <Read_lookup_F+0xe8>)
 80019a2:	6013      	str	r3, [r2, #0]
	 //VE=Interpolate_2D(VE_Table,MAP,RPM,RPM_val,MAP_val);
	 cycles_to_IGN = (uint32_t) IGN_time/65535; //how many overflows to make the IGN pulse (since TIM3 only counts to 65535 and the IGN pulse is longer than that)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <Read_lookup_F+0xe8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <Read_lookup_F+0xec>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0bdb      	lsrs	r3, r3, #15
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <Read_lookup_F+0xf0>)
 80019b4:	801a      	strh	r2, [r3, #0]
	 TIM3->CCR1=IGN_time;
 80019b6:	4a11      	ldr	r2, [pc, #68]	; (80019fc <Read_lookup_F+0xf4>)
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <Read_lookup_F+0xe8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6353      	str	r3, [r2, #52]	; 0x34
	 IGN= Interpolate_2D(Ignition_Timing,TBP,RPM,RPM_val,30);
 80019be:	e7a7      	b.n	8001910 <Read_lookup_F+0x8>
 80019c0:	00000000 	.word	0x00000000
 80019c4:	412e8480 	.word	0x412e8480
 80019c8:	200009a0 	.word	0x200009a0
 80019cc:	41f00000 	.word	0x41f00000
 80019d0:	20000030 	.word	0x20000030
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000060 	.word	0x20000060
 80019dc:	20000978 	.word	0x20000978
 80019e0:	200002a0 	.word	0x200002a0
 80019e4:	2000097c 	.word	0x2000097c
 80019e8:	40768000 	.word	0x40768000
 80019ec:	40180000 	.word	0x40180000
 80019f0:	2000099c 	.word	0x2000099c
 80019f4:	80008001 	.word	0x80008001
 80019f8:	2000099a 	.word	0x2000099a
 80019fc:	40000400 	.word	0x40000400

08001a00 <Fire_Ignition_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Fire_Ignition_F */
void Fire_Ignition_F(void const * argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Fire_Ignition_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f003 f843 	bl	8004a94 <osDelay>
 8001a0e:	e7fb      	b.n	8001a08 <Fire_Ignition_F+0x8>

08001a10 <Fire_Injection_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Fire_Injection_F */
void Fire_Injection_F(void const * argument)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Fire_Injection_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f003 f83b 	bl	8004a94 <osDelay>
 8001a1e:	e7fb      	b.n	8001a18 <Fire_Injection_F+0x8>

08001a20 <Send_CAN_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send_CAN_F */
void Send_CAN_F(void const * argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send_CAN_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f003 f833 	bl	8004a94 <osDelay>
 8001a2e:	e7fb      	b.n	8001a28 <Send_CAN_F+0x8>

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x68>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	210f      	movs	r1, #15
 8001a76:	f06f 0001 	mvn.w	r0, #1
 8001a7a:	f001 f80a 	bl	8002a92 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_ADC_MspInit+0xbc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d149      	bne.n	8001b60 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_ADC_MspInit+0xc0>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IAT_Pin|CLT_Pin|TPS_Pin|MAP_Pin
 8001afc:	231f      	movs	r3, #31
 8001afe:	613b      	str	r3, [r7, #16]
                          |O2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b00:	2303      	movs	r3, #3
 8001b02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <HAL_ADC_MspInit+0xc4>)
 8001b0c:	f001 f9f4 	bl	8002ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b12:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_ADC_MspInit+0xcc>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b46:	f000 ffe9 	bl	8002b1c <HAL_DMA_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b50:	f7ff ff6e 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b58:	621a      	str	r2, [r3, #32]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_ADC_MspInit+0xc8>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40012400 	.word	0x40012400
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	20000854 	.word	0x20000854
 8001b78:	40020008 	.word	0x40020008

08001b7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_CAN_MspInit+0x8c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d131      	bne.n	8001c00 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	61d3      	str	r3, [r2, #28]
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_CAN_MspInit+0x90>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <HAL_CAN_MspInit+0x94>)
 8001be2:	f001 f989 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_CAN_MspInit+0x94>)
 8001bfc:	f001 f97c 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40006400 	.word	0x40006400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c32:	d13f      	bne.n	8001cb4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = CRANKSHAFT_Pin;
 8001c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CRANKSHAFT_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <HAL_TIM_Base_MspInit+0xe0>)
 8001c7a:	f001 f93d 	bl	8002ef8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_TIM_Base_MspInit+0xe4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <HAL_TIM_Base_MspInit+0xe4>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	201c      	movs	r0, #28
 8001ca8:	f000 fef3 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cac:	201c      	movs	r0, #28
 8001cae:	f000 ff0c 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cb2:	e018      	b.n	8001ce6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_TIM_Base_MspInit+0xe8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d113      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	201d      	movs	r0, #29
 8001cdc:	f000 fed9 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ce0:	201d      	movs	r0, #29
 8001ce2:	f000 fef2 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400

08001d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_TIM_MspPostInit+0x58>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d117      	bne.n	8001d50 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_TIM_MspPostInit+0x5c>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_TIM_MspPostInit+0x5c>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_TIM_MspPostInit+0x5c>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = IGNITION_Pin|INJECTION_Pin;
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_TIM_MspPostInit+0x60>)
 8001d4c:	f001 f8d4 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010800 	.word	0x40010800

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f8a1 	bl	8001ed8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d96:	f003 fc27 	bl	80055e8 <xTaskGetSchedulerState>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001da0:	f003 fe12 	bl	80059c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001dac:	2008      	movs	r0, #8
 8001dae:	f001 fa37 	bl	8003220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dbe:	f000 ff67 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000854 	.word	0x20000854

08001dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM2_IRQHandler+0x10>)
 8001dd2:	f002 f8b1 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200008c0 	.word	0x200008c0

08001de0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM3_IRQHandler+0x10>)
 8001de6:	f002 f8a7 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000908 	.word	0x20000908

08001df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <Reset_Handler>:
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopFillZerobss+0x12>)
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopFillZerobss+0x1a>)
 8001e06:	2300      	movs	r3, #0
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:
 8001e0a:	58d4      	ldr	r4, [r2, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:
 8001e10:	18c4      	adds	r4, r0, r3
 8001e12:	428c      	cmp	r4, r1
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopFillZerobss+0x1e>)
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopFillZerobss+0x22>)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:
 8001e22:	42a2      	cmp	r2, r4
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>
 8001e26:	f7ff ffe5 	bl	8001df4 <SystemInit>
 8001e2a:	f003 ffe9 	bl	8005e00 <__libc_init_array>
 8001e2e:	f7ff f969 	bl	8001104 <main>
 8001e32:	4770      	bx	lr
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000554 	.word	0x20000554
 8001e3c:	08006154 	.word	0x08006154
 8001e40:	20000554 	.word	0x20000554
 8001e44:	20001afc 	.word	0x20001afc

08001e48 <ADC1_2_IRQHandler>:
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 fe0d 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	200f      	movs	r0, #15
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fde8 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fe33 	bl	8002b02 <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb4:	f000 fded 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200004e0 	.word	0x200004e0
 8001ed0:	200004e8 	.word	0x200004e8
 8001ed4:	200004e4 	.word	0x200004e4

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	200004e8 	.word	0x200004e8
 8001ef8:	200009a4 	.word	0x200009a4

08001efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	200009a4 	.word	0x200009a4

08001f10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0be      	b.n	80020b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fdac 	bl	8001aac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 faff 	bl	8002558 <ADC_ConversionStop_Disable>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8099 	bne.w	800209e <HAL_ADC_Init+0x18e>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8095 	bne.w	800209e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7c:	f023 0302 	bic.w	r3, r3, #2
 8001f80:	f043 0202 	orr.w	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7b1b      	ldrb	r3, [r3, #12]
 8001f96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d003      	beq.n	8001fb2 <HAL_ADC_Init+0xa2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_ADC_Init+0xa8>
 8001fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Init+0xaa>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d1b      	ldrb	r3, [r3, #20]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d119      	bne.n	8001ffc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7b1b      	ldrb	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	035a      	lsls	r2, r3, #13
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e00b      	b.n	8001ffc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_ADC_Init+0x1a8>)
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202c:	d003      	beq.n	8002036 <HAL_ADC_Init+0x126>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d104      	bne.n	8002040 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	3b01      	subs	r3, #1
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	430a      	orrs	r2, r1
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_ADC_Init+0x1ac>)
 800205c:	4013      	ands	r3, r2
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d10b      	bne.n	800207c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800207a:	e018      	b.n	80020ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f023 0312 	bic.w	r3, r3, #18
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209c:	e007      	b.n	80020ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	ffe1f7fd 	.word	0xffe1f7fd
 80020bc:	ff1f0efe 	.word	0xff1f0efe

080020c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_ADC_Start_DMA+0x1a8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Start_DMA+0x24>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_ADC_Start_DMA+0x1ac>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_Start_DMA+0x32>
 80020e4:	4b60      	ldr	r3, [pc, #384]	; (8002268 <HAL_ADC_Start_DMA+0x1a8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 80b3 	bne.w	8002258 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_Start_DMA+0x40>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0ae      	b.n	800225e <HAL_ADC_Start_DMA+0x19e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9cb 	bl	80024a4 <ADC_Enable>
 800210e:	4603      	mov	r3, r0
 8002110:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 809a 	bne.w	800224e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_ADC_Start_DMA+0x1ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d105      	bne.n	8002144 <HAL_ADC_Start_DMA+0x84>
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_ADC_Start_DMA+0x1a8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d026      	beq.n	80021ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216e:	e01d      	b.n	80021ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a39      	ldr	r2, [pc, #228]	; (8002268 <HAL_ADC_Start_DMA+0x1a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_ADC_Start_DMA+0xd0>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a38      	ldr	r2, [pc, #224]	; (800226c <HAL_ADC_Start_DMA+0x1ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10d      	bne.n	80021ac <HAL_ADC_Start_DMA+0xec>
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_ADC_Start_DMA+0x1a8>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f023 0206 	bic.w	r2, r3, #6
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c4:	e002      	b.n	80021cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_ADC_Start_DMA+0x1b0>)
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <HAL_ADC_Start_DMA+0x1b4>)
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <HAL_ADC_Start_DMA+0x1b8>)
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0202 	mvn.w	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002204:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a18      	ldr	r0, [r3, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	334c      	adds	r3, #76	; 0x4c
 8002210:	4619      	mov	r1, r3
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f000 fcdb 	bl	8002bd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002224:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002228:	d108      	bne.n	800223c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002238:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800223a:	e00f      	b.n	800225c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800224a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800224c:	e006      	b.n	800225c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002256:	e001      	b.n	800225c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800225c:	7dfb      	ldrb	r3, [r7, #23]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40012400 	.word	0x40012400
 800226c:	40012800 	.word	0x40012800
 8002270:	080025db 	.word	0x080025db
 8002274:	08002657 	.word	0x08002657
 8002278:	08002673 	.word	0x08002673

0800227c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x20>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0dc      	b.n	800248e <HAL_ADC_ConfigChannel+0x1da>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d81c      	bhi.n	800231e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3b05      	subs	r3, #5
 80022f6:	221f      	movs	r2, #31
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4019      	ands	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b05      	subs	r3, #5
 8002310:	fa00 f203 	lsl.w	r2, r0, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
 800231c:	e03c      	b.n	8002398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d81c      	bhi.n	8002360 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b23      	subs	r3, #35	; 0x23
 8002338:	221f      	movs	r2, #31
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	4019      	ands	r1, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	; 0x23
 8002352:	fa00 f203 	lsl.w	r2, r0, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
 800235e:	e01b      	b.n	8002398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b41      	subs	r3, #65	; 0x41
 8002372:	221f      	movs	r2, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	4019      	ands	r1, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	fa00 f203 	lsl.w	r2, r0, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d91c      	bls.n	80023da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	3b1e      	subs	r3, #30
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	e019      	b.n	800240e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6919      	ldr	r1, [r3, #16]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d003      	beq.n	800241e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800241a:	2b11      	cmp	r3, #17
 800241c:	d132      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_ADC_ConfigChannel+0x1e4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d125      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d126      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002444:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d11a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_ADC_ConfigChannel+0x1e8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	0c9a      	lsrs	r2, r3, #18
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002464:	e002      	b.n	800246c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3b01      	subs	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x1b2>
 8002472:	e007      	b.n	8002484 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40012400 	.word	0x40012400
 800249c:	200004e0 	.word	0x200004e0
 80024a0:	431bde83 	.word	0x431bde83

080024a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d040      	beq.n	8002544 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <ADC_Enable+0xac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <ADC_Enable+0xb0>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9b      	lsrs	r3, r3, #18
 80024de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e0:	e002      	b.n	80024e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ee:	f7ff fd05 	bl	8001efc <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024f4:	e01f      	b.n	8002536 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024f6:	f7ff fd01 	bl	8001efc <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d918      	bls.n	8002536 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d011      	beq.n	8002536 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e007      	b.n	8002546 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d1d8      	bne.n	80024f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200004e0 	.word	0x200004e0
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d12e      	bne.n	80025d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002582:	f7ff fcbb 	bl	8001efc <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002588:	e01b      	b.n	80025c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258a:	f7ff fcb7 	bl	8001efc <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d914      	bls.n	80025c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10d      	bne.n	80025c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d0dc      	beq.n	800258a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d127      	bne.n	8002644 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800260a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800260e:	d115      	bne.n	800263c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff fe1d 	bl	800227c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002642:	e004      	b.n	800264e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff fe12 	bl	800228e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fe01 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0ed      	b.n	8002894 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fa59 	bl	8001b7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026da:	f7ff fc0f 	bl	8001efc <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026e0:	e012      	b.n	8002708 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e2:	f7ff fc0b 	bl	8001efc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b0a      	cmp	r3, #10
 80026ee:	d90b      	bls.n	8002708 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2205      	movs	r2, #5
 8002700:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0c5      	b.n	8002894 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0e5      	beq.n	80026e2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0202 	bic.w	r2, r2, #2
 8002724:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002726:	f7ff fbe9 	bl	8001efc <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800272c:	e012      	b.n	8002754 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800272e:	f7ff fbe5 	bl	8001efc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b0a      	cmp	r3, #10
 800273a:	d90b      	bls.n	8002754 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e09f      	b.n	8002894 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e5      	bne.n	800272e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7e1b      	ldrb	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d108      	bne.n	800277c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7e5b      	ldrb	r3, [r3, #25]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d108      	bne.n	80027a6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e007      	b.n	80027b6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7e9b      	ldrb	r3, [r3, #26]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e007      	b.n	80027e0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0220 	bic.w	r2, r2, #32
 80027de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7edb      	ldrb	r3, [r3, #27]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d108      	bne.n	80027fa <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0210 	bic.w	r2, r2, #16
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0210 	orr.w	r2, r2, #16
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7f1b      	ldrb	r3, [r3, #28]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0208 	orr.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e007      	b.n	8002834 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7f5b      	ldrb	r3, [r3, #29]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0204 	orr.w	r2, r2, #4
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e007      	b.n	800285e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0204 	bic.w	r2, r2, #4
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	ea42 0103 	orr.w	r1, r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db0b      	blt.n	800292a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4906      	ldr	r1, [pc, #24]	; (8002934 <__NVIC_EnableIRQ+0x34>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2001      	movs	r0, #1
 8002922:	fa00 f202 	lsl.w	r2, r0, r2
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db12      	blt.n	8002970 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	490a      	ldr	r1, [pc, #40]	; (800297c <__NVIC_DisableIRQ+0x44>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	3320      	adds	r3, #32
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002964:	f3bf 8f4f 	dsb	sy
}
 8002968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800296a:	f3bf 8f6f 	isb	sy
}
 800296e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a5c:	f7ff ff90 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff09 	bl	800289c <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff1e 	bl	80028e4 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff11 	bl	8002900 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff1f 	bl	8002938 <__NVIC_DisableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff94 	bl	8002a38 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e043      	b.n	8002bba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_DMA_Init+0xa8>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_DMA_Init+0xac>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_DMA_Init+0xb0>)
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	bffdfff8 	.word	0xbffdfff8
 8002bc8:	cccccccd 	.word	0xcccccccd
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Start_IT+0x20>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e04a      	b.n	8002c86 <HAL_DMA_Start_IT+0xb6>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d13a      	bne.n	8002c78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f938 	bl	8002e9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 020e 	orr.w	r2, r2, #14
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e00f      	b.n	8002c66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 020a 	orr.w	r2, r2, #10
 8002c64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e005      	b.n	8002c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
 8002c82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2204      	movs	r2, #4
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d04f      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xc8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <HAL_DMA_IRQHandler+0x1f0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d029      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xae>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_DMA_IRQHandler+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xaa>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_DMA_IRQHandler+0x1f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xa4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a62      	ldr	r2, [pc, #392]	; (8002e8c <HAL_DMA_IRQHandler+0x1fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x9e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a60      	ldr	r2, [pc, #384]	; (8002e90 <HAL_DMA_IRQHandler+0x200>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x98>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_DMA_IRQHandler+0x204>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x92>
 8002d1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d20:	e00e      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d26:	e00b      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d2c:	e008      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d32:	e005      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d38:	e002      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_IRQHandler+0xb0>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	4a55      	ldr	r2, [pc, #340]	; (8002e98 <HAL_DMA_IRQHandler+0x208>)
 8002d42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8094 	beq.w	8002e76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d56:	e08e      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d056      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x186>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d051      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 020a 	bic.w	r2, r2, #10
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a38      	ldr	r2, [pc, #224]	; (8002e80 <HAL_DMA_IRQHandler+0x1f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d029      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x166>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a37      	ldr	r2, [pc, #220]	; (8002e84 <HAL_DMA_IRQHandler+0x1f4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d022      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x162>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <HAL_DMA_IRQHandler+0x1f8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01a      	beq.n	8002dec <HAL_DMA_IRQHandler+0x15c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a34      	ldr	r2, [pc, #208]	; (8002e8c <HAL_DMA_IRQHandler+0x1fc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x156>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a32      	ldr	r2, [pc, #200]	; (8002e90 <HAL_DMA_IRQHandler+0x200>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x150>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a31      	ldr	r2, [pc, #196]	; (8002e94 <HAL_DMA_IRQHandler+0x204>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_DMA_IRQHandler+0x14a>
 8002dd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dd8:	e00e      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dde:	e00b      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	e008      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dea:	e005      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df0:	e002      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002df2:	2320      	movs	r3, #32
 8002df4:	e000      	b.n	8002df8 <HAL_DMA_IRQHandler+0x168>
 8002df6:	2302      	movs	r3, #2
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_DMA_IRQHandler+0x208>)
 8002dfa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d034      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e14:	e02f      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d028      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x1e8>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d023      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 020e 	bic.w	r2, r2, #14
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
    }
  }
  return;
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
}
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40020008 	.word	0x40020008
 8002e84:	4002001c 	.word	0x4002001c
 8002e88:	40020030 	.word	0x40020030
 8002e8c:	40020044 	.word	0x40020044
 8002e90:	40020058 	.word	0x40020058
 8002e94:	4002006c 	.word	0x4002006c
 8002e98:	40020000 	.word	0x40020000

08002e9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d108      	bne.n	8002edc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eda:	e007      	b.n	8002eec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e161      	b.n	80031d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8150 	bne.w	80031ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a97      	ldr	r2, [pc, #604]	; (800318c <HAL_GPIO_Init+0x294>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d05e      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f34:	4a95      	ldr	r2, [pc, #596]	; (800318c <HAL_GPIO_Init+0x294>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d875      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f3a:	4a95      	ldr	r2, [pc, #596]	; (8003190 <HAL_GPIO_Init+0x298>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d058      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f40:	4a93      	ldr	r2, [pc, #588]	; (8003190 <HAL_GPIO_Init+0x298>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d86f      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f46:	4a93      	ldr	r2, [pc, #588]	; (8003194 <HAL_GPIO_Init+0x29c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d052      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f4c:	4a91      	ldr	r2, [pc, #580]	; (8003194 <HAL_GPIO_Init+0x29c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d869      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f52:	4a91      	ldr	r2, [pc, #580]	; (8003198 <HAL_GPIO_Init+0x2a0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04c      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f58:	4a8f      	ldr	r2, [pc, #572]	; (8003198 <HAL_GPIO_Init+0x2a0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d863      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f5e:	4a8f      	ldr	r2, [pc, #572]	; (800319c <HAL_GPIO_Init+0x2a4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d046      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f64:	4a8d      	ldr	r2, [pc, #564]	; (800319c <HAL_GPIO_Init+0x2a4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d85d      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d82a      	bhi.n	8002fc4 <HAL_GPIO_Init+0xcc>
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d859      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_GPIO_Init+0x80>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002ff3 	.word	0x08002ff3
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08002fdf 	.word	0x08002fdf
 8002f84:	08003021 	.word	0x08003021
 8002f88:	08003027 	.word	0x08003027
 8002f8c:	08003027 	.word	0x08003027
 8002f90:	08003027 	.word	0x08003027
 8002f94:	08003027 	.word	0x08003027
 8002f98:	08003027 	.word	0x08003027
 8002f9c:	08003027 	.word	0x08003027
 8002fa0:	08003027 	.word	0x08003027
 8002fa4:	08003027 	.word	0x08003027
 8002fa8:	08003027 	.word	0x08003027
 8002fac:	08003027 	.word	0x08003027
 8002fb0:	08003027 	.word	0x08003027
 8002fb4:	08003027 	.word	0x08003027
 8002fb8:	08003027 	.word	0x08003027
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fe9 	.word	0x08002fe9
 8002fc4:	4a76      	ldr	r2, [pc, #472]	; (80031a0 <HAL_GPIO_Init+0x2a8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fca:	e02c      	b.n	8003026 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	623b      	str	r3, [r7, #32]
          break;
 8002fd2:	e029      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e024      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	623b      	str	r3, [r7, #32]
          break;
 8002fe6:	e01f      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	330c      	adds	r3, #12
 8002fee:	623b      	str	r3, [r7, #32]
          break;
 8002ff0:	e01a      	b.n	8003028 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	623b      	str	r3, [r7, #32]
          break;
 8002ffe:	e013      	b.n	8003028 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	611a      	str	r2, [r3, #16]
          break;
 8003012:	e009      	b.n	8003028 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003014:	2308      	movs	r3, #8
 8003016:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	615a      	str	r2, [r3, #20]
          break;
 800301e:	e003      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
          break;
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x130>
          break;
 8003026:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2bff      	cmp	r3, #255	; 0xff
 800302c:	d801      	bhi.n	8003032 <HAL_GPIO_Init+0x13a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e001      	b.n	8003036 <HAL_GPIO_Init+0x13e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2bff      	cmp	r3, #255	; 0xff
 800303c:	d802      	bhi.n	8003044 <HAL_GPIO_Init+0x14c>
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	e002      	b.n	800304a <HAL_GPIO_Init+0x152>
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	3b08      	subs	r3, #8
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	210f      	movs	r1, #15
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a9 	beq.w	80031ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2ac>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <HAL_GPIO_Init+0x2ac>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_GPIO_Init+0x2ac>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003090:	4a45      	ldr	r2, [pc, #276]	; (80031a8 <HAL_GPIO_Init+0x2b0>)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <HAL_GPIO_Init+0x2b4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00d      	beq.n	80030d8 <HAL_GPIO_Init+0x1e0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <HAL_GPIO_Init+0x1dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <HAL_GPIO_Init+0x2bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_GPIO_Init+0x1d8>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x1e2>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x1e2>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x1e2>
 80030d8:	2300      	movs	r3, #0
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ea:	492f      	ldr	r1, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x2b0>)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	492b      	ldr	r1, [pc, #172]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4927      	ldr	r1, [pc, #156]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800311c:	4013      	ands	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4921      	ldr	r1, [pc, #132]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	491d      	ldr	r1, [pc, #116]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003144:	4013      	ands	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4917      	ldr	r1, [pc, #92]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	4913      	ldr	r1, [pc, #76]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800316c:	4013      	ands	r3, r2
 800316e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01f      	beq.n	80031bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	490d      	ldr	r1, [pc, #52]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	60cb      	str	r3, [r1, #12]
 8003188:	e01f      	b.n	80031ca <HAL_GPIO_Init+0x2d2>
 800318a:	bf00      	nop
 800318c:	10320000 	.word	0x10320000
 8003190:	10310000 	.word	0x10310000
 8003194:	10220000 	.word	0x10220000
 8003198:	10210000 	.word	0x10210000
 800319c:	10120000 	.word	0x10120000
 80031a0:	10110000 	.word	0x10110000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_GPIO_Init+0x2f4>)
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	4909      	ldr	r1, [pc, #36]	; (80031ec <HAL_GPIO_Init+0x2f4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	3301      	adds	r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f47f ae96 	bne.w	8002f0c <HAL_GPIO_Init+0x14>
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	372c      	adds	r7, #44	; 0x2c
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40010400 	.word	0x40010400

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fe80 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40010400 	.word	0x40010400

08003250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e272      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003270:	4b92      	ldr	r3, [pc, #584]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00c      	beq.n	8003296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800327c:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d112      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
 8003288:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d10b      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4b89      	ldr	r3, [pc, #548]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06c      	beq.n	800337c <HAL_RCC_OscConfig+0x12c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d168      	bne.n	800337c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e24c      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x76>
 80032b8:	4b80      	ldr	r3, [pc, #512]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7f      	ldr	r2, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x98>
 80032ce:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7a      	ldr	r2, [pc, #488]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b78      	ldr	r3, [pc, #480]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a77      	ldr	r2, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xbc>
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a71      	ldr	r2, [pc, #452]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6e      	ldr	r2, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 800330c:	4b6b      	ldr	r3, [pc, #428]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b68      	ldr	r3, [pc, #416]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a67      	ldr	r2, [pc, #412]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fde6 	bl	8001efc <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fde2 	bl	8001efc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e200      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xe4>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fdd2 	bl	8001efc <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fdce 	bl	8001efc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1ec      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x10c>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d063      	beq.n	8003452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x18c>
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x176>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1c0      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4939      	ldr	r1, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e03a      	b.n	8003452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fd87 	bl	8001efc <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe fd83 	bl	8001efc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1a1      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4927      	ldr	r1, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fd66 	bl	8001efc <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe fd62 	bl	8001efc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e180      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03a      	beq.n	80034d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d019      	beq.n	800349a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_RCC_OscConfig+0x274>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7fe fd46 	bl	8001efc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe fd42 	bl	8001efc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e160      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003492:	2001      	movs	r0, #1
 8003494:	f000 faa6 	bl	80039e4 <RCC_Delay>
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_RCC_OscConfig+0x274>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fd2c 	bl	8001efc <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a6:	e00f      	b.n	80034c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe fd28 	bl	8001efc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d908      	bls.n	80034c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e146      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	42420000 	.word	0x42420000
 80034c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e9      	bne.n	80034a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a6 	beq.w	800362e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a87      	ldr	r2, [pc, #540]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	61d3      	str	r3, [r2, #28]
 80034fe:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b82      	ldr	r3, [pc, #520]	; (8003718 <HAL_RCC_OscConfig+0x4c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x4c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x4c8>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fe fce9 	bl	8001efc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352e:	f7fe fce5 	bl	8001efc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b64      	cmp	r3, #100	; 0x64
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e103      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b75      	ldr	r3, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x4c8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x312>
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6213      	str	r3, [r2, #32]
 8003560:	e02d      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x334>
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a69      	ldr	r2, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a66      	ldr	r2, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	e01c      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x356>
 800358c:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a60      	ldr	r2, [pc, #384]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a5d      	ldr	r2, [pc, #372]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 80035a6:	4b5b      	ldr	r3, [pc, #364]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a5a      	ldr	r2, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4b58      	ldr	r3, [pc, #352]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fc99 	bl	8001efc <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fc95 	bl	8001efc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0b1      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x37e>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fc83 	bl	8001efc <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fc7f 	bl	8001efc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e09b      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4a3b      	ldr	r2, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8087 	beq.w	8003746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d061      	beq.n	8003708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d146      	bne.n	80036da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_RCC_OscConfig+0x4cc>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fc53 	bl	8001efc <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fc4f 	bl	8001efc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e06d      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a19      	ldr	r1, [r3, #32]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	430b      	orrs	r3, r1
 80036a6:	491b      	ldr	r1, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe fc23 	bl	8001efc <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe fc1f 	bl	8001efc <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e03d      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x46a>
 80036d8:	e035      	b.n	8003746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_RCC_OscConfig+0x4cc>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe fc0c 	bl	8001efc <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fc08 	bl	8001efc <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e026      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x498>
 8003706:	e01e      	b.n	8003746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e019      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
 800371c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_OscConfig+0x500>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	429a      	cmp	r2, r3
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0d0      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d910      	bls.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b67      	ldr	r3, [pc, #412]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4965      	ldr	r1, [pc, #404]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0b8      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c8:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	494d      	ldr	r1, [pc, #308]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d040      	beq.n	8003874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d115      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07f      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e073      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06b      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4936      	ldr	r1, [pc, #216]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7fe fb5a 	bl	8001efc <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fe fb56 	bl	8001efc <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e053      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b27      	ldr	r3, [pc, #156]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d210      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4922      	ldr	r1, [pc, #136]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e032      	b.n	800390a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4916      	ldr	r1, [pc, #88]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038e2:	f000 f821 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490a      	ldr	r1, [pc, #40]	; (800391c <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a09      	ldr	r2, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1cc>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_ClockConfig+0x1d0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fab8 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40022000 	.word	0x40022000
 8003918:	40021000 	.word	0x40021000
 800391c:	080060dc 	.word	0x080060dc
 8003920:	200004e0 	.word	0x200004e0
 8003924:	200004e4 	.word	0x200004e4

08003928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	b490      	push	{r4, r7}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003930:	1d3c      	adds	r4, r7, #4
 8003932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003938:	f240 2301 	movw	r3, #513	; 0x201
 800393c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b04      	cmp	r3, #4
 8003960:	d002      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x40>
 8003962:	2b08      	cmp	r3, #8
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x46>
 8003966:	e02b      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003968:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800396a:	623b      	str	r3, [r7, #32]
      break;
 800396c:	e02b      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	0c9b      	lsrs	r3, r3, #18
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3328      	adds	r3, #40	; 0x28
 8003978:	443b      	add	r3, r7
 800397a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800397e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	0c5b      	lsrs	r3, r3, #17
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	3328      	adds	r3, #40	; 0x28
 8003996:	443b      	add	r3, r7
 8003998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800399c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e004      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	623b      	str	r3, [r7, #32]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80039c2:	623b      	str	r3, [r7, #32]
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc90      	pop	{r4, r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	080060c4 	.word	0x080060c4
 80039d8:	40021000 	.word	0x40021000
 80039dc:	007a1200 	.word	0x007a1200
 80039e0:	003d0900 	.word	0x003d0900

080039e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCC_Delay+0x34>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <RCC_Delay+0x38>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a00:	bf00      	nop
  }
  while (Delay --);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	60fa      	str	r2, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f9      	bne.n	8003a00 <RCC_Delay+0x1c>
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	200004e0 	.word	0x200004e0
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d07d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	61d3      	str	r3, [r2, #28]
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a74:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a80:	f7fe fa3c 	bl	8001efc <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	e008      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fe fa38 	bl	8001efc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e06d      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d027      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	4b2e      	ldr	r3, [pc, #184]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d014      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe fa07 	bl	8001efc <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe fa03 	bl	8001efc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4917      	ldr	r1, [pc, #92]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
 8003b88:	42420440 	.word	0x42420440

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe f82e 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fbf4 	bl	80043b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e035      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <HAL_TIM_Base_Start_IT+0x90>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x4e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x4e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <HAL_TIM_Base_Start_IT+0x94>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d010      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	e007      	b.n	8003cae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40000400 	.word	0x40000400

08003cc4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e041      	b.n	8003d5a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f839 	bl	8003d62 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f000 fb58 	bl	80043b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_TIM_OC_Start_IT+0x24>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e022      	b.n	8003dde <HAL_TIM_OC_Start_IT+0x6a>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d109      	bne.n	8003db2 <HAL_TIM_OC_Start_IT+0x3e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	bf14      	ite	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	2300      	moveq	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	e015      	b.n	8003dde <HAL_TIM_OC_Start_IT+0x6a>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_OC_Start_IT+0x58>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e008      	b.n	8003dde <HAL_TIM_OC_Start_IT+0x6a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e09f      	b.n	8003f26 <HAL_TIM_OC_Start_IT+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_OC_Start_IT+0x82>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df4:	e013      	b.n	8003e1e <HAL_TIM_OC_Start_IT+0xaa>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_OC_Start_IT+0x92>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e04:	e00b      	b.n	8003e1e <HAL_TIM_OC_Start_IT+0xaa>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_OC_Start_IT+0xa2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e14:	e003      	b.n	8003e1e <HAL_TIM_OC_Start_IT+0xaa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d841      	bhi.n	8003ea8 <HAL_TIM_OC_Start_IT+0x134>
 8003e24:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_TIM_OC_Start_IT+0xb8>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003ea9 	.word	0x08003ea9
 8003e38:	08003ea9 	.word	0x08003ea9
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003ea9 	.word	0x08003ea9
 8003e48:	08003ea9 	.word	0x08003ea9
 8003e4c:	08003e85 	.word	0x08003e85
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003ea9 	.word	0x08003ea9
 8003e5c:	08003e97 	.word	0x08003e97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0202 	orr.w	r2, r2, #2
 8003e6e:	60da      	str	r2, [r3, #12]
      break;
 8003e70:	e01b      	b.n	8003eaa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0204 	orr.w	r2, r2, #4
 8003e80:	60da      	str	r2, [r3, #12]
      break;
 8003e82:	e012      	b.n	8003eaa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0208 	orr.w	r2, r2, #8
 8003e92:	60da      	str	r2, [r3, #12]
      break;
 8003e94:	e009      	b.n	8003eaa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0210 	orr.w	r2, r2, #16
 8003ea4:	60da      	str	r2, [r3, #12]
      break;
 8003ea6:	e000      	b.n	8003eaa <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003ea8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fcf6 	bl	80048a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_TIM_OC_Start_IT+0x1bc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_TIM_OC_Start_IT+0x1bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIM_OC_Start_IT+0x17c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_OC_Start_IT+0x17c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_TIM_OC_Start_IT+0x1c0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d111      	bne.n	8003f14 <HAL_TIM_OC_Start_IT+0x1a0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d010      	beq.n	8003f24 <HAL_TIM_OC_Start_IT+0x1b0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	e007      	b.n	8003f24 <HAL_TIM_OC_Start_IT+0x1b0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0202 	mvn.w	r2, #2
 8003f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa00 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd f898 	bl	80010b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa02 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9d6 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd f86e 	bl	80010b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f9d8 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0208 	mvn.w	r2, #8
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2204      	movs	r2, #4
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f9ac 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd f844 	bl	80010b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9ae 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0210 	mvn.w	r2, #16
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2208      	movs	r2, #8
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f982 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd f81a 	bl	80010b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f984 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0201 	mvn.w	r2, #1
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc ff5a 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fc63 	bl	80049ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f948 	bl	80043a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b20      	cmp	r3, #32
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b20      	cmp	r3, #32
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0220 	mvn.w	r2, #32
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fc2e 	bl	800499c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_OC_ConfigChannel+0x1a>
 800415e:	2302      	movs	r3, #2
 8004160:	e046      	b.n	80041f0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d839      	bhi.n	80041e4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041e5 	.word	0x080041e5
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080041e5 	.word	0x080041e5
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041e5 	.word	0x080041e5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f958 	bl	8004468 <TIM_OC1_SetConfig>
      break;
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f9b7 	bl	8004534 <TIM_OC2_SetConfig>
      break;
 80041c6:	e00e      	b.n	80041e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa1a 	bl	8004608 <TIM_OC3_SetConfig>
      break;
 80041d4:	e007      	b.n	80041e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fa7d 	bl	80046dc <TIM_OC4_SetConfig>
      break;
 80041e2:	e000      	b.n	80041e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80041e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIM_ConfigClockSource+0x18>
 800420c:	2302      	movs	r3, #2
 800420e:	e0b3      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x180>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd0>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	f000 8085 	beq.w	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xa2>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x116>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xf6>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x136>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x156>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x156>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x156>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 fadc 	bl	8004866 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04e      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 fac5 	bl	8004866 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03b      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fa3c 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	; 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fa93 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800430c:	e02b      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fa5a 	bl	80047d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	; 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa83 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800432c:	e01b      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fa1c 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fa73 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800434c:	e00b      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 fa6a 	bl	8004832 <TIM_ITRx_SetConfig>
        break;
 800435e:	e002      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004364:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
	...

080043b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <TIM_Base_SetConfig+0xa8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x28>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x28>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a22      	ldr	r2, [pc, #136]	; (8004464 <TIM_Base_SetConfig+0xac>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <TIM_Base_SetConfig+0xa8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_Base_SetConfig+0x52>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d003      	beq.n	800440a <TIM_Base_SetConfig+0x52>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <TIM_Base_SetConfig+0xac>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a07      	ldr	r2, [pc, #28]	; (8004460 <TIM_Base_SetConfig+0xa8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d103      	bne.n	8004450 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	615a      	str	r2, [r3, #20]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400

08004468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <TIM_OC1_SetConfig+0xc8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <TIM_OC1_SetConfig+0xc8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d111      	bne.n	800450a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00

08004534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <TIM_OC2_SetConfig+0xd0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10d      	bne.n	80045b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a14      	ldr	r2, [pc, #80]	; (8004604 <TIM_OC2_SetConfig+0xd0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d113      	bne.n	80045e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00

08004608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <TIM_OC3_SetConfig+0xd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10d      	bne.n	8004682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800466c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <TIM_OC3_SetConfig+0xd0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d113      	bne.n	80046b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00

080046dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	031b      	lsls	r3, r3, #12
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0f      	ldr	r2, [pc, #60]	; (8004774 <TIM_OC4_SetConfig+0x98>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d109      	bne.n	8004750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00

08004778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f023 030a 	bic.w	r3, r3, #10
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 0210 	bic.w	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	031b      	lsls	r3, r3, #12
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr

08004832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	f043 0307 	orr.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004880:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	021a      	lsls	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	431a      	orrs	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2201      	movs	r2, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e041      	b.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d004      	beq.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a10      	ldr	r2, [pc, #64]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10c      	bne.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400

0800499c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d2:	2b84      	cmp	r3, #132	; 0x84
 80049d4:	d005      	beq.n	80049e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	3303      	adds	r3, #3
 80049e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049f2:	f000 fae7 	bl	8004fc4 <vTaskStartScheduler>
  
  return osOK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}

080049fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af04      	add	r7, sp, #16
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <osThreadCreate+0x54>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01c      	beq.n	8004a50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685c      	ldr	r4, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691e      	ldr	r6, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ffc9 	bl	80049c0 <makeFreeRtosPriority>
 8004a2e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a38:	9202      	str	r2, [sp, #8]
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	9100      	str	r1, [sp, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4632      	mov	r2, r6
 8004a42:	4629      	mov	r1, r5
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 f8e8 	bl	8004c1a <xTaskCreateStatic>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e01c      	b.n	8004a8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685c      	ldr	r4, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a5c:	b29e      	uxth	r6, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ffab 	bl	80049c0 <makeFreeRtosPriority>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	9200      	str	r2, [sp, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4632      	mov	r2, r6
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f929 	bl	8004cd2 <xTaskCreate>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <osDelay+0x16>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	e000      	b.n	8004aac <osDelay+0x18>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fa55 	bl	8004f5c <vTaskDelay>
  
  return osOK;
 8004ab2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f103 0208 	add.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 0208 	add.w	r2, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f103 0208 	add.w	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6e:	d103      	bne.n	8004b78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e00c      	b.n	8004b92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e002      	b.n	8004b86 <vListInsert+0x2e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d2f6      	bcs.n	8004b80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6892      	ldr	r2, [r2, #8]
 8004bde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6852      	ldr	r2, [r2, #4]
 8004be8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d103      	bne.n	8004bfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b08e      	sub	sp, #56	; 0x38
 8004c1e:	af04      	add	r7, sp, #16
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <xTaskCreateStatic+0x46>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	61fb      	str	r3, [r7, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c60:	23b4      	movs	r3, #180	; 0xb4
 8004c62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2bb4      	cmp	r3, #180	; 0xb4
 8004c68:	d00a      	beq.n	8004c80 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61bb      	str	r3, [r7, #24]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01e      	beq.n	8004cc4 <xTaskCreateStatic+0xaa>
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f850 	bl	8004d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbe:	f000 f8e3 	bl	8004e88 <prvAddNewTaskToReadyList>
 8004cc2:	e001      	b.n	8004cc8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cc8:	697b      	ldr	r3, [r7, #20]
	}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08c      	sub	sp, #48	; 0x30
 8004cd6:	af04      	add	r7, sp, #16
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 feb2 	bl	8005a50 <pvPortMalloc>
 8004cec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004cf4:	20b4      	movs	r0, #180	; 0xb4
 8004cf6:	f000 feab 	bl	8005a50 <pvPortMalloc>
 8004cfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
 8004d08:	e005      	b.n	8004d16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f000 ff64 	bl	8005bd8 <vPortFree>
 8004d10:	e001      	b.n	8004d16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	2300      	movs	r3, #0
 8004d28:	9303      	str	r3, [sp, #12]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	9302      	str	r3, [sp, #8]
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f80e 	bl	8004d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d40:	69f8      	ldr	r0, [r7, #28]
 8004d42:	f000 f8a1 	bl	8004e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e002      	b.n	8004d52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d52:	69bb      	ldr	r3, [r7, #24]
	}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d74:	3b01      	subs	r3, #1
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e012      	b.n	8004dd0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	7819      	ldrb	r1, [r3, #0]
 8004db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	3334      	adds	r3, #52	; 0x34
 8004dba:	460a      	mov	r2, r1
 8004dbc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d006      	beq.n	8004dd8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d9e9      	bls.n	8004daa <prvInitialiseNewTask+0x4e>
 8004dd6:	e000      	b.n	8004dda <prvInitialiseNewTask+0x7e>
		{
			break;
 8004dd8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	2b06      	cmp	r3, #6
 8004de6:	d901      	bls.n	8004dec <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004de8:	2306      	movs	r3, #6
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	3304      	adds	r3, #4
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe79 	bl	8004afa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fe74 	bl	8004afa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f1c3 0207 	rsb	r2, r3, #7
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	334c      	adds	r3, #76	; 0x4c
 8004e3c:	2260      	movs	r2, #96	; 0x60
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 f803 	bl	8005e4c <memset>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	4a0c      	ldr	r2, [pc, #48]	; (8004e7c <prvInitialiseNewTask+0x120>)
 8004e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <prvInitialiseNewTask+0x124>)
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <prvInitialiseNewTask+0x128>)
 8004e56:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	69b8      	ldr	r0, [r7, #24]
 8004e5e:	f000 fc47 	bl	80056f0 <pxPortInitialiseStack>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e74:	bf00      	nop
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	0800610c 	.word	0x0800610c
 8004e80:	0800612c 	.word	0x0800612c
 8004e84:	080060ec 	.word	0x080060ec

08004e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e90:	f000 fd1c 	bl	80058cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e94:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <prvAddNewTaskToReadyList+0xb8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <prvAddNewTaskToReadyList+0xb8>)
 8004e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <prvAddNewTaskToReadyList+0xbc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ea6:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <prvAddNewTaskToReadyList+0xbc>)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <prvAddNewTaskToReadyList+0xb8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d110      	bne.n	8004ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eb4:	f000 fad2 	bl	800545c <prvInitialiseTaskLists>
 8004eb8:	e00d      	b.n	8004ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <prvAddNewTaskToReadyList+0xc0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <prvAddNewTaskToReadyList+0xbc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d802      	bhi.n	8004ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <prvAddNewTaskToReadyList+0xbc>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <prvAddNewTaskToReadyList+0xc4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <prvAddNewTaskToReadyList+0xc4>)
 8004ede:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <prvAddNewTaskToReadyList+0xc8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <prvAddNewTaskToReadyList+0xc8>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <prvAddNewTaskToReadyList+0xcc>)
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7ff fe02 	bl	8004b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f0e:	f000 fd0d 	bl	800592c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <prvAddNewTaskToReadyList+0xc0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <prvAddNewTaskToReadyList+0xbc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d207      	bcs.n	8004f38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <prvAddNewTaskToReadyList+0xd0>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000aa8 	.word	0x20000aa8
 8004f44:	200009a8 	.word	0x200009a8
 8004f48:	20000ab4 	.word	0x20000ab4
 8004f4c:	20000ac4 	.word	0x20000ac4
 8004f50:	20000ab0 	.word	0x20000ab0
 8004f54:	200009ac 	.word	0x200009ac
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <vTaskDelay+0x60>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <vTaskDelay+0x30>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f8c:	f000 f884 	bl	8005098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f90:	2100      	movs	r1, #0
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb46 	bl	8005624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f98:	f000 f88c 	bl	80050b4 <xTaskResumeAll>
 8004f9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <vTaskDelay+0x64>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000ad0 	.word	0x20000ad0
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	1d39      	adds	r1, r7, #4
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb ff9a 	bl	8000f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	9202      	str	r2, [sp, #8]
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	460a      	mov	r2, r1
 8004ff2:	4921      	ldr	r1, [pc, #132]	; (8005078 <vTaskStartScheduler+0xb4>)
 8004ff4:	4821      	ldr	r0, [pc, #132]	; (800507c <vTaskStartScheduler+0xb8>)
 8004ff6:	f7ff fe10 	bl	8004c1a <xTaskCreateStatic>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <vTaskStartScheduler+0xbc>)
 8004ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <vTaskStartScheduler+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005008:	2301      	movs	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e001      	b.n	8005012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d11b      	bne.n	8005050 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	613b      	str	r3, [r7, #16]
}
 800502a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800502c:	4b15      	ldr	r3, [pc, #84]	; (8005084 <vTaskStartScheduler+0xc0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	334c      	adds	r3, #76	; 0x4c
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <vTaskStartScheduler+0xc4>)
 8005034:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <vTaskStartScheduler+0xc8>)
 8005038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800503c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <vTaskStartScheduler+0xcc>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <vTaskStartScheduler+0xd0>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800504a:	f000 fbcd 	bl	80057e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800504e:	e00e      	b.n	800506e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005056:	d10a      	bne.n	800506e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60fb      	str	r3, [r7, #12]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <vTaskStartScheduler+0xa8>
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	080060d4 	.word	0x080060d4
 800507c:	0800542d 	.word	0x0800542d
 8005080:	20000acc 	.word	0x20000acc
 8005084:	200009a8 	.word	0x200009a8
 8005088:	200004f0 	.word	0x200004f0
 800508c:	20000ac8 	.word	0x20000ac8
 8005090:	20000ab4 	.word	0x20000ab4
 8005094:	20000aac 	.word	0x20000aac

08005098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <vTaskSuspendAll+0x18>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a03      	ldr	r2, [pc, #12]	; (80050b0 <vTaskSuspendAll+0x18>)
 80050a4:	6013      	str	r3, [r2, #0]
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000ad0 	.word	0x20000ad0

080050b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <xTaskResumeAll+0x114>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050e0:	f000 fbf4 	bl	80058cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050e4:	4b38      	ldr	r3, [pc, #224]	; (80051c8 <xTaskResumeAll+0x114>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4a37      	ldr	r2, [pc, #220]	; (80051c8 <xTaskResumeAll+0x114>)
 80050ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ee:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <xTaskResumeAll+0x114>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d161      	bne.n	80051ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <xTaskResumeAll+0x118>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d05d      	beq.n	80051ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050fe:	e02e      	b.n	800515e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005100:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <xTaskResumeAll+0x11c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3318      	adds	r3, #24
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fd5b 	bl	8004bc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3304      	adds	r3, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fd56 	bl	8004bc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	2201      	movs	r2, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <xTaskResumeAll+0x120>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <xTaskResumeAll+0x120>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <xTaskResumeAll+0x124>)
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7ff fce4 	bl	8004b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <xTaskResumeAll+0x128>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005158:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <xTaskResumeAll+0x12c>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800515e:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <xTaskResumeAll+0x11c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1cc      	bne.n	8005100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800516c:	f000 fa18 	bl	80055a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <xTaskResumeAll+0x130>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800517c:	f000 f836 	bl	80051ec <xTaskIncrementTick>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <xTaskResumeAll+0x12c>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f1      	bne.n	800517c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005198:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <xTaskResumeAll+0x130>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <xTaskResumeAll+0x12c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <xTaskResumeAll+0x134>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051ba:	f000 fbb7 	bl	800592c <vPortExitCritical>

	return xAlreadyYielded;
 80051be:	68bb      	ldr	r3, [r7, #8]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000ad0 	.word	0x20000ad0
 80051cc:	20000aa8 	.word	0x20000aa8
 80051d0:	20000a68 	.word	0x20000a68
 80051d4:	20000ab0 	.word	0x20000ab0
 80051d8:	200009ac 	.word	0x200009ac
 80051dc:	200009a8 	.word	0x200009a8
 80051e0:	20000abc 	.word	0x20000abc
 80051e4:	20000ab8 	.word	0x20000ab8
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f6:	4b51      	ldr	r3, [pc, #324]	; (800533c <xTaskIncrementTick+0x150>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 808d 	bne.w	800531a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005200:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <xTaskIncrementTick+0x154>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005208:	4a4d      	ldr	r2, [pc, #308]	; (8005340 <xTaskIncrementTick+0x154>)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d120      	bne.n	8005256 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005214:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <xTaskIncrementTick+0x158>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <xTaskIncrementTick+0x48>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	603b      	str	r3, [r7, #0]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskIncrementTick+0x46>
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <xTaskIncrementTick+0x158>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <xTaskIncrementTick+0x15c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a41      	ldr	r2, [pc, #260]	; (8005344 <xTaskIncrementTick+0x158>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <xTaskIncrementTick+0x15c>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	4b40      	ldr	r3, [pc, #256]	; (800534c <xTaskIncrementTick+0x160>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a3f      	ldr	r2, [pc, #252]	; (800534c <xTaskIncrementTick+0x160>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	f000 f9a5 	bl	80055a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005256:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <xTaskIncrementTick+0x164>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	429a      	cmp	r2, r3
 800525e:	d34d      	bcc.n	80052fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005260:	4b38      	ldr	r3, [pc, #224]	; (8005344 <xTaskIncrementTick+0x158>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <xTaskIncrementTick+0x82>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <xTaskIncrementTick+0x84>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005274:	4b36      	ldr	r3, [pc, #216]	; (8005350 <xTaskIncrementTick+0x164>)
 8005276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800527a:	601a      	str	r2, [r3, #0]
					break;
 800527c:	e03e      	b.n	80052fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <xTaskIncrementTick+0x158>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d203      	bcs.n	800529e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005296:	4a2e      	ldr	r2, [pc, #184]	; (8005350 <xTaskIncrementTick+0x164>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6013      	str	r3, [r2, #0]
						break;
 800529c:	e02e      	b.n	80052fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fc90 	bl	8004bc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3318      	adds	r3, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fc87 	bl	8004bc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	2201      	movs	r2, #1
 80052c0:	409a      	lsls	r2, r3
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <xTaskIncrementTick+0x168>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <xTaskIncrementTick+0x168>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <xTaskIncrementTick+0x16c>)
 80052da:	441a      	add	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7ff fc15 	bl	8004b12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <xTaskIncrementTick+0x170>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3b4      	bcc.n	8005260 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052fa:	e7b1      	b.n	8005260 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <xTaskIncrementTick+0x170>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4915      	ldr	r1, [pc, #84]	; (8005358 <xTaskIncrementTick+0x16c>)
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d907      	bls.n	8005324 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <xTaskIncrementTick+0x174>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <xTaskIncrementTick+0x174>)
 8005322:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <xTaskIncrementTick+0x178>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800532c:	2301      	movs	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005330:	697b      	ldr	r3, [r7, #20]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000ad0 	.word	0x20000ad0
 8005340:	20000aac 	.word	0x20000aac
 8005344:	20000a60 	.word	0x20000a60
 8005348:	20000a64 	.word	0x20000a64
 800534c:	20000ac0 	.word	0x20000ac0
 8005350:	20000ac8 	.word	0x20000ac8
 8005354:	20000ab0 	.word	0x20000ab0
 8005358:	200009ac 	.word	0x200009ac
 800535c:	200009a8 	.word	0x200009a8
 8005360:	20000ab8 	.word	0x20000ab8
 8005364:	20000abc 	.word	0x20000abc

08005368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <vTaskSwitchContext+0xac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <vTaskSwitchContext+0xb0>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800537c:	e044      	b.n	8005408 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <vTaskSwitchContext+0xb0>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <vTaskSwitchContext+0xb4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	f1c3 031f 	rsb	r3, r3, #31
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	4921      	ldr	r1, [pc, #132]	; (8005420 <vTaskSwitchContext+0xb8>)
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <vTaskSwitchContext+0x5a>
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a14      	ldr	r2, [pc, #80]	; (8005420 <vTaskSwitchContext+0xb8>)
 80053d0:	4413      	add	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3308      	adds	r3, #8
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d104      	bne.n	80053f4 <vTaskSwitchContext+0x8c>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <vTaskSwitchContext+0xbc>)
 80053fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <vTaskSwitchContext+0xbc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	334c      	adds	r3, #76	; 0x4c
 8005404:	4a08      	ldr	r2, [pc, #32]	; (8005428 <vTaskSwitchContext+0xc0>)
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000ad0 	.word	0x20000ad0
 8005418:	20000abc 	.word	0x20000abc
 800541c:	20000ab0 	.word	0x20000ab0
 8005420:	200009ac 	.word	0x200009ac
 8005424:	200009a8 	.word	0x200009a8
 8005428:	200004f0 	.word	0x200004f0

0800542c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005434:	f000 f852 	bl	80054dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <prvIdleTask+0x28>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d9f9      	bls.n	8005434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <prvIdleTask+0x2c>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005450:	e7f0      	b.n	8005434 <prvIdleTask+0x8>
 8005452:	bf00      	nop
 8005454:	200009ac 	.word	0x200009ac
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
 8005466:	e00c      	b.n	8005482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <prvInitialiseTaskLists+0x60>)
 8005474:	4413      	add	r3, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fb20 	bl	8004abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3301      	adds	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d9ef      	bls.n	8005468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005488:	480d      	ldr	r0, [pc, #52]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 800548a:	f7ff fb17 	bl	8004abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800548e:	480d      	ldr	r0, [pc, #52]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 8005490:	f7ff fb14 	bl	8004abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005494:	480c      	ldr	r0, [pc, #48]	; (80054c8 <prvInitialiseTaskLists+0x6c>)
 8005496:	f7ff fb11 	bl	8004abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800549a:	480c      	ldr	r0, [pc, #48]	; (80054cc <prvInitialiseTaskLists+0x70>)
 800549c:	f7ff fb0e 	bl	8004abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054a0:	480b      	ldr	r0, [pc, #44]	; (80054d0 <prvInitialiseTaskLists+0x74>)
 80054a2:	f7ff fb0b 	bl	8004abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvInitialiseTaskLists+0x78>)
 80054a8:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 80054aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvInitialiseTaskLists+0x7c>)
 80054ae:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200009ac 	.word	0x200009ac
 80054c0:	20000a38 	.word	0x20000a38
 80054c4:	20000a4c 	.word	0x20000a4c
 80054c8:	20000a68 	.word	0x20000a68
 80054cc:	20000a7c 	.word	0x20000a7c
 80054d0:	20000a94 	.word	0x20000a94
 80054d4:	20000a60 	.word	0x20000a60
 80054d8:	20000a64 	.word	0x20000a64

080054dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e2:	e019      	b.n	8005518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054e4:	f000 f9f2 	bl	80058cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <prvCheckTasksWaitingTermination+0x50>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fb67 	bl	8004bc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3b01      	subs	r3, #1
 8005500:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 8005502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800550c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800550e:	f000 fa0d 	bl	800592c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f810 	bl	8005538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e1      	bne.n	80054e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000a7c 	.word	0x20000a7c
 8005530:	20000aa8 	.word	0x20000aa8
 8005534:	20000a90 	.word	0x20000a90

08005538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	334c      	adds	r3, #76	; 0x4c
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fc97 	bl	8005e78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fb3d 	bl	8005bd8 <vPortFree>
				vPortFree( pxTCB );
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb3a 	bl	8005bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005564:	e018      	b.n	8005598 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d103      	bne.n	8005578 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb31 	bl	8005bd8 <vPortFree>
	}
 8005576:	e00f      	b.n	8005598 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800557e:	2b02      	cmp	r3, #2
 8005580:	d00a      	beq.n	8005598 <prvDeleteTCB+0x60>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <prvDeleteTCB+0x5e>
	}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <prvResetNextTaskUnblockTime+0x40>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <prvResetNextTaskUnblockTime+0x14>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <prvResetNextTaskUnblockTime+0x16>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <prvResetNextTaskUnblockTime+0x44>)
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055c2:	e008      	b.n	80055d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <prvResetNextTaskUnblockTime+0x40>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvResetNextTaskUnblockTime+0x44>)
 80055d4:	6013      	str	r3, [r2, #0]
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	20000a60 	.word	0x20000a60
 80055e4:	20000ac8 	.word	0x20000ac8

080055e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <xTaskGetSchedulerState+0x34>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055f6:	2301      	movs	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	e008      	b.n	800560e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <xTaskGetSchedulerState+0x38>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005604:	2302      	movs	r3, #2
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e001      	b.n	800560e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800560e:	687b      	ldr	r3, [r7, #4]
	}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000ab4 	.word	0x20000ab4
 8005620:	20000ad0 	.word	0x20000ad0

08005624 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005634:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fac4 	bl	8004bc8 <uxListRemove>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	2201      	movs	r2, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	4a20      	ldr	r2, [pc, #128]	; (80056dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800565c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005664:	d10a      	bne.n	800567c <prvAddCurrentTaskToDelayedList+0x58>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	481a      	ldr	r0, [pc, #104]	; (80056e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005676:	f7ff fa4c 	bl	8004b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800567a:	e026      	b.n	80056ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d209      	bcs.n	80056a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7ff fa59 	bl	8004b58 <vListInsert>
}
 80056a6:	e010      	b.n	80056ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7ff fa4f 	bl	8004b58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056ba:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d202      	bcs.n	80056ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80056c4:	4a09      	ldr	r2, [pc, #36]	; (80056ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6013      	str	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000aac 	.word	0x20000aac
 80056d8:	200009a8 	.word	0x200009a8
 80056dc:	20000ab0 	.word	0x20000ab0
 80056e0:	20000a94 	.word	0x20000a94
 80056e4:	20000a64 	.word	0x20000a64
 80056e8:	20000a60 	.word	0x20000a60
 80056ec:	20000ac8 	.word	0x20000ac8

080056f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b04      	subs	r3, #4
 8005700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b04      	subs	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <pxPortInitialiseStack+0x54>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b14      	subs	r3, #20
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b20      	subs	r3, #32
 8005736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	08005749 	.word	0x08005749

08005748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <prvTaskExitError+0x54>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575a:	d00a      	beq.n	8005772 <prvTaskExitError+0x2a>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <prvTaskExitError+0x28>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
}
 8005784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005786:	bf00      	nop
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0fc      	beq.n	8005788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	200004ec 	.word	0x200004ec

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80057be:	4770      	bx	lr

080057c0 <pxCurrentTCBConst2>:
 80057c0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80057c8:	4806      	ldr	r0, [pc, #24]	; (80057e4 <prvPortStartFirstTask+0x1c>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	b662      	cpsie	i
 80057d4:	b661      	cpsie	f
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	df00      	svc	0
 80057e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057e2:	bf00      	nop
 80057e4:	e000ed08 	.word	0xe000ed08

080057e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ee:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <xPortStartScheduler+0xd0>)
 80057f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <xPortStartScheduler+0xd4>)
 8005814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005816:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005818:	2207      	movs	r2, #7
 800581a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581c:	e009      	b.n	8005832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800581e:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3b01      	subs	r3, #1
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d0ef      	beq.n	800581e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1c3 0307 	rsb	r3, r3, #7
 8005846:	2b04      	cmp	r3, #4
 8005848:	d00a      	beq.n	8005860 <xPortStartScheduler+0x78>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60bb      	str	r3, [r7, #8]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005868:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <xPortStartScheduler+0xd8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005872:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <xPortStartScheduler+0xd8>)
 8005874:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <xPortStartScheduler+0xdc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <xPortStartScheduler+0xdc>)
 8005884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <xPortStartScheduler+0xdc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <xPortStartScheduler+0xdc>)
 8005890:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005894:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005896:	f000 f8b9 	bl	8005a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <xPortStartScheduler+0xe0>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058a0:	f7ff ff92 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058a4:	f7ff fd60 	bl	8005368 <vTaskSwitchContext>
	prvTaskExitError();
 80058a8:	f7ff ff4e 	bl	8005748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	e000e400 	.word	0xe000e400
 80058bc:	20000ad4 	.word	0x20000ad4
 80058c0:	20000ad8 	.word	0x20000ad8
 80058c4:	e000ed20 	.word	0xe000ed20
 80058c8:	200004ec 	.word	0x200004ec

080058cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <vPortEnterCritical+0x58>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a0d      	ldr	r2, [pc, #52]	; (8005924 <vPortEnterCritical+0x58>)
 80058ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <vPortEnterCritical+0x58>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10f      	bne.n	8005918 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <vPortEnterCritical+0x5c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <vPortEnterCritical+0x4c>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	603b      	str	r3, [r7, #0]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vPortEnterCritical+0x4a>
	}
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	200004ec 	.word	0x200004ec
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <vPortExitCritical+0x4c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <vPortExitCritical+0x24>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <vPortExitCritical+0x4c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3b01      	subs	r3, #1
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <vPortExitCritical+0x4c>)
 8005958:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <vPortExitCritical+0x4c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <vPortExitCritical+0x42>
 8005962:	2300      	movs	r3, #0
 8005964:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800596c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	200004ec 	.word	0x200004ec
 800597c:	00000000 	.word	0x00000000

08005980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005980:	f3ef 8009 	mrs	r0, PSP
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <pxCurrentTCBConst>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005990:	6010      	str	r0, [r2, #0]
 8005992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800599a:	f380 8811 	msr	BASEPRI, r0
 800599e:	f7ff fce3 	bl	8005368 <vTaskSwitchContext>
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059b6:	f380 8809 	msr	PSP, r0
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	4770      	bx	lr

080059c0 <pxCurrentTCBConst>:
 80059c0:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop

080059c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	607b      	str	r3, [r7, #4]
}
 80059e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059e2:	f7ff fc03 	bl	80051ec <xTaskIncrementTick>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <xPortSysTickHandler+0x40>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f383 8811 	msr	BASEPRI, r3
}
 80059fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <vPortSetupTimerInterrupt+0x30>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <vPortSetupTimerInterrupt+0x34>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <vPortSetupTimerInterrupt+0x38>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <vPortSetupTimerInterrupt+0x3c>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <vPortSetupTimerInterrupt+0x40>)
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <vPortSetupTimerInterrupt+0x30>)
 8005a30:	2207      	movs	r2, #7
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	e000e010 	.word	0xe000e010
 8005a40:	e000e018 	.word	0xe000e018
 8005a44:	200004e0 	.word	0x200004e0
 8005a48:	10624dd3 	.word	0x10624dd3
 8005a4c:	e000e014 	.word	0xe000e014

08005a50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a5c:	f7ff fb1c 	bl	8005098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a60:	4b58      	ldr	r3, [pc, #352]	; (8005bc4 <pvPortMalloc+0x174>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a68:	f000 f910 	bl	8005c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a6c:	4b56      	ldr	r3, [pc, #344]	; (8005bc8 <pvPortMalloc+0x178>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 808e 	bne.w	8005b96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01d      	beq.n	8005abc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a80:	2208      	movs	r2, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	3308      	adds	r3, #8
 8005a9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <pvPortMalloc+0x6c>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	617b      	str	r3, [r7, #20]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d069      	beq.n	8005b96 <pvPortMalloc+0x146>
 8005ac2:	4b42      	ldr	r3, [pc, #264]	; (8005bcc <pvPortMalloc+0x17c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d864      	bhi.n	8005b96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005acc:	4b40      	ldr	r3, [pc, #256]	; (8005bd0 <pvPortMalloc+0x180>)
 8005ace:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <pvPortMalloc+0x180>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad6:	e004      	b.n	8005ae2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d903      	bls.n	8005af4 <pvPortMalloc+0xa4>
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f1      	bne.n	8005ad8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <pvPortMalloc+0x174>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d04b      	beq.n	8005b96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2208      	movs	r2, #8
 8005b04:	4413      	add	r3, r2
 8005b06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	2308      	movs	r3, #8
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d91f      	bls.n	8005b60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <pvPortMalloc+0xf8>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	613b      	str	r3, [r7, #16]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b5a:	69b8      	ldr	r0, [r7, #24]
 8005b5c:	f000 f8f8 	bl	8005d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <pvPortMalloc+0x17c>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <pvPortMalloc+0x17c>)
 8005b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b6e:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <pvPortMalloc+0x17c>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <pvPortMalloc+0x184>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d203      	bcs.n	8005b82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <pvPortMalloc+0x17c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <pvPortMalloc+0x184>)
 8005b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <pvPortMalloc+0x178>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b96:	f7ff fa8d 	bl	80050b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <pvPortMalloc+0x16a>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	60fb      	str	r3, [r7, #12]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <pvPortMalloc+0x168>
	return pvReturn;
 8005bba:	69fb      	ldr	r3, [r7, #28]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	; 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20001ae4 	.word	0x20001ae4
 8005bc8:	20001af0 	.word	0x20001af0
 8005bcc:	20001ae8 	.word	0x20001ae8
 8005bd0:	20001adc 	.word	0x20001adc
 8005bd4:	20001aec 	.word	0x20001aec

08005bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d048      	beq.n	8005c7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bea:	2308      	movs	r3, #8
 8005bec:	425b      	negs	r3, r3
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <vPortFree+0xac>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <vPortFree+0x44>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <vPortFree+0x62>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <vPortFree+0xac>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d019      	beq.n	8005c7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d115      	bne.n	8005c7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <vPortFree+0xac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c60:	f7ff fa1a 	bl	8005098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <vPortFree+0xb0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	4a06      	ldr	r2, [pc, #24]	; (8005c88 <vPortFree+0xb0>)
 8005c70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c72:	6938      	ldr	r0, [r7, #16]
 8005c74:	f000 f86c 	bl	8005d50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c78:	f7ff fa1c 	bl	80050b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20001af0 	.word	0x20001af0
 8005c88:	20001ae8 	.word	0x20001ae8

08005c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c98:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <prvHeapInit+0xac>)
 8005c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3307      	adds	r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <prvHeapInit+0xac>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <prvHeapInit+0xb0>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <prvHeapInit+0xb0>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd8:	2208      	movs	r2, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0307 	bic.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <prvHeapInit+0xb4>)
 8005cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <prvHeapInit+0xb4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <prvHeapInit+0xb4>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <prvHeapInit+0xb8>)
 8005d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <prvHeapInit+0xbc>)
 8005d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <prvHeapInit+0xc0>)
 8005d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d2a:	601a      	str	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000adc 	.word	0x20000adc
 8005d3c:	20001adc 	.word	0x20001adc
 8005d40:	20001ae4 	.word	0x20001ae4
 8005d44:	20001aec 	.word	0x20001aec
 8005d48:	20001ae8 	.word	0x20001ae8
 8005d4c:	20001af0 	.word	0x20001af0

08005d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d58:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <prvInsertBlockIntoFreeList+0xa8>)
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e002      	b.n	8005d64 <prvInsertBlockIntoFreeList+0x14>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d8f7      	bhi.n	8005d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d108      	bne.n	8005d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d118      	bne.n	8005dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <prvInsertBlockIntoFreeList+0xac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00d      	beq.n	8005dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e008      	b.n	8005de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <prvInsertBlockIntoFreeList+0xac>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e003      	b.n	8005de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d002      	beq.n	8005dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	20001adc 	.word	0x20001adc
 8005dfc:	20001ae4 	.word	0x20001ae4

08005e00 <__libc_init_array>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	2600      	movs	r6, #0
 8005e04:	4d0c      	ldr	r5, [pc, #48]	; (8005e38 <__libc_init_array+0x38>)
 8005e06:	4c0d      	ldr	r4, [pc, #52]	; (8005e3c <__libc_init_array+0x3c>)
 8005e08:	1b64      	subs	r4, r4, r5
 8005e0a:	10a4      	asrs	r4, r4, #2
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	d109      	bne.n	8005e24 <__libc_init_array+0x24>
 8005e10:	f000 f8e2 	bl	8005fd8 <_init>
 8005e14:	2600      	movs	r6, #0
 8005e16:	4d0a      	ldr	r5, [pc, #40]	; (8005e40 <__libc_init_array+0x40>)
 8005e18:	4c0a      	ldr	r4, [pc, #40]	; (8005e44 <__libc_init_array+0x44>)
 8005e1a:	1b64      	subs	r4, r4, r5
 8005e1c:	10a4      	asrs	r4, r4, #2
 8005e1e:	42a6      	cmp	r6, r4
 8005e20:	d105      	bne.n	8005e2e <__libc_init_array+0x2e>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e28:	4798      	blx	r3
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	e7ee      	b.n	8005e0c <__libc_init_array+0xc>
 8005e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7f2      	b.n	8005e1e <__libc_init_array+0x1e>
 8005e38:	0800614c 	.word	0x0800614c
 8005e3c:	0800614c 	.word	0x0800614c
 8005e40:	0800614c 	.word	0x0800614c
 8005e44:	08006150 	.word	0x08006150

08005e48 <__retarget_lock_acquire_recursive>:
 8005e48:	4770      	bx	lr

08005e4a <__retarget_lock_release_recursive>:
 8005e4a:	4770      	bx	lr

08005e4c <memset>:
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4402      	add	r2, r0
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d100      	bne.n	8005e56 <memset+0xa>
 8005e54:	4770      	bx	lr
 8005e56:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5a:	e7f9      	b.n	8005e50 <memset+0x4>

08005e5c <cleanup_glue>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	6809      	ldr	r1, [r1, #0]
 8005e62:	4605      	mov	r5, r0
 8005e64:	b109      	cbz	r1, 8005e6a <cleanup_glue+0xe>
 8005e66:	f7ff fff9 	bl	8005e5c <cleanup_glue>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e72:	f000 b869 	b.w	8005f48 <_free_r>
	...

08005e78 <_reclaim_reent>:
 8005e78:	4b2c      	ldr	r3, [pc, #176]	; (8005f2c <_reclaim_reent+0xb4>)
 8005e7a:	b570      	push	{r4, r5, r6, lr}
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4283      	cmp	r3, r0
 8005e82:	d051      	beq.n	8005f28 <_reclaim_reent+0xb0>
 8005e84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e86:	b143      	cbz	r3, 8005e9a <_reclaim_reent+0x22>
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d14a      	bne.n	8005f24 <_reclaim_reent+0xac>
 8005e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	b111      	cbz	r1, 8005e9a <_reclaim_reent+0x22>
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 f857 	bl	8005f48 <_free_r>
 8005e9a:	6961      	ldr	r1, [r4, #20]
 8005e9c:	b111      	cbz	r1, 8005ea4 <_reclaim_reent+0x2c>
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 f852 	bl	8005f48 <_free_r>
 8005ea4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ea6:	b111      	cbz	r1, 8005eae <_reclaim_reent+0x36>
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 f84d 	bl	8005f48 <_free_r>
 8005eae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005eb0:	b111      	cbz	r1, 8005eb8 <_reclaim_reent+0x40>
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f848 	bl	8005f48 <_free_r>
 8005eb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005eba:	b111      	cbz	r1, 8005ec2 <_reclaim_reent+0x4a>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f843 	bl	8005f48 <_free_r>
 8005ec2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ec4:	b111      	cbz	r1, 8005ecc <_reclaim_reent+0x54>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f83e 	bl	8005f48 <_free_r>
 8005ecc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ece:	b111      	cbz	r1, 8005ed6 <_reclaim_reent+0x5e>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 f839 	bl	8005f48 <_free_r>
 8005ed6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ed8:	b111      	cbz	r1, 8005ee0 <_reclaim_reent+0x68>
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f834 	bl	8005f48 <_free_r>
 8005ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee2:	b111      	cbz	r1, 8005eea <_reclaim_reent+0x72>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 f82f 	bl	8005f48 <_free_r>
 8005eea:	69a3      	ldr	r3, [r4, #24]
 8005eec:	b1e3      	cbz	r3, 8005f28 <_reclaim_reent+0xb0>
 8005eee:	4620      	mov	r0, r4
 8005ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ef2:	4798      	blx	r3
 8005ef4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ef6:	b1b9      	cbz	r1, 8005f28 <_reclaim_reent+0xb0>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005efe:	f7ff bfad 	b.w	8005e5c <cleanup_glue>
 8005f02:	5949      	ldr	r1, [r1, r5]
 8005f04:	b941      	cbnz	r1, 8005f18 <_reclaim_reent+0xa0>
 8005f06:	3504      	adds	r5, #4
 8005f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f0a:	2d80      	cmp	r5, #128	; 0x80
 8005f0c:	68d9      	ldr	r1, [r3, #12]
 8005f0e:	d1f8      	bne.n	8005f02 <_reclaim_reent+0x8a>
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 f819 	bl	8005f48 <_free_r>
 8005f16:	e7ba      	b.n	8005e8e <_reclaim_reent+0x16>
 8005f18:	680e      	ldr	r6, [r1, #0]
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 f814 	bl	8005f48 <_free_r>
 8005f20:	4631      	mov	r1, r6
 8005f22:	e7ef      	b.n	8005f04 <_reclaim_reent+0x8c>
 8005f24:	2500      	movs	r5, #0
 8005f26:	e7ef      	b.n	8005f08 <_reclaim_reent+0x90>
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200004f0 	.word	0x200004f0

08005f30 <__malloc_lock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__malloc_lock+0x8>)
 8005f32:	f7ff bf89 	b.w	8005e48 <__retarget_lock_acquire_recursive>
 8005f36:	bf00      	nop
 8005f38:	20001af4 	.word	0x20001af4

08005f3c <__malloc_unlock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_unlock+0x8>)
 8005f3e:	f7ff bf84 	b.w	8005e4a <__retarget_lock_release_recursive>
 8005f42:	bf00      	nop
 8005f44:	20001af4 	.word	0x20001af4

08005f48 <_free_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d040      	beq.n	8005fd2 <_free_r+0x8a>
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f0c      	subs	r4, r1, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	18e4      	addlt	r4, r4, r3
 8005f5c:	f7ff ffe8 	bl	8005f30 <__malloc_lock>
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <_free_r+0x8c>)
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	b933      	cbnz	r3, 8005f74 <_free_r+0x2c>
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6014      	str	r4, [r2, #0]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f70:	f7ff bfe4 	b.w	8005f3c <__malloc_unlock>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d908      	bls.n	8005f8a <_free_r+0x42>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	1821      	adds	r1, r4, r0
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf01      	itttt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	1809      	addeq	r1, r1, r0
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	e7ed      	b.n	8005f66 <_free_r+0x1e>
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b10b      	cbz	r3, 8005f94 <_free_r+0x4c>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d9fa      	bls.n	8005f8a <_free_r+0x42>
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	1850      	adds	r0, r2, r1
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d10b      	bne.n	8005fb4 <_free_r+0x6c>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	1850      	adds	r0, r2, r1
 8005fa2:	4283      	cmp	r3, r0
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	d1e0      	bne.n	8005f6a <_free_r+0x22>
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4401      	add	r1, r0
 8005fae:	6011      	str	r1, [r2, #0]
 8005fb0:	6053      	str	r3, [r2, #4]
 8005fb2:	e7da      	b.n	8005f6a <_free_r+0x22>
 8005fb4:	d902      	bls.n	8005fbc <_free_r+0x74>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	e7d6      	b.n	8005f6a <_free_r+0x22>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	1821      	adds	r1, r4, r0
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	bf01      	itttt	eq
 8005fc4:	6819      	ldreq	r1, [r3, #0]
 8005fc6:	685b      	ldreq	r3, [r3, #4]
 8005fc8:	1809      	addeq	r1, r1, r0
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6054      	str	r4, [r2, #4]
 8005fd0:	e7cb      	b.n	8005f6a <_free_r+0x22>
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20001af8 	.word	0x20001af8

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
