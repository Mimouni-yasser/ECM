
ECM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00020554  2**0
                  CONTENTS
  4 .ARM          00000000  08004c6c  08004c6c  00020554  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c6c  08004c6c  00020554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000554  20000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001588  20000554  080051c8  00020554  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001adc  080051c8  00021adc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020554  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001204e  00000000  00000000  0002057d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2c  00000000  00000000  000325cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00036408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019518  00000000  00000000  000373d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f9b  00000000  00000000  000508e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fb4  00000000  00000000  00062883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  000f7888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000554 	.word	0x20000554
 800012c:	00000000 	.word	0x00000000
 8000130:	08004af8 	.word	0x08004af8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000558 	.word	0x20000558
 800014c:	08004af8 	.word	0x08004af8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4a06      	ldr	r2, [pc, #24]	; (8000720 <vApplicationGetIdleTaskMemory+0x28>)
 8000708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <vApplicationGetIdleTaskMemory+0x2c>)
 800070e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000570 	.word	0x20000570
 8000724:	20000624 	.word	0x20000624

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b0a4      	sub	sp, #144	; 0x90
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fdd5 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f88f 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 fa0f 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 800073a:	f000 f9ef 	bl	8000b1c <MX_DMA_Init>
  MX_ADC1_Init();
 800073e:	f000 f8d9 	bl	80008f4 <MX_ADC1_Init>
  MX_CAN_Init();
 8000742:	f000 f915 	bl	8000970 <MX_CAN_Init>
  MX_TIM2_Init();
 8000746:	f000 f949 	bl	80009dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800074a:	f000 f999 	bl	8000a80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, Data,5);
 800074e:	2205      	movs	r2, #5
 8000750:	4933      	ldr	r1, [pc, #204]	; (8000820 <main+0xf8>)
 8000752:	4834      	ldr	r0, [pc, #208]	; (8000824 <main+0xfc>)
 8000754:	f000 fefc 	bl	8001550 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <main+0x100>)
 800075a:	f002 fc65 	bl	8003028 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Read_Sensors */
  osThreadDef(Read_Sensors, Read_Sensors_F, osPriorityNormal, 0, 128);
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <main+0x104>)
 8000760:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Read_SensorsHandle = osThreadCreate(osThread(Read_Sensors), NULL);
 8000772:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fec9 	bl	8003510 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <main+0x108>)
 8000782:	6013      	str	r3, [r2, #0]

  /* definition and creation of Read_Lookup */
  osThreadDef(Read_Lookup, Read_lookup_F, osPriorityNormal, 0, 128);
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <main+0x10c>)
 8000786:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800078a:	461d      	mov	r5, r3
 800078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000794:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Read_LookupHandle = osThreadCreate(osThread(Read_Lookup), NULL);
 8000798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 feb6 	bl	8003510 <osThreadCreate>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <main+0x110>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fire_Ignition */
  osThreadDef(Fire_Ignition, Fire_Ignition_F, osPriorityNormal, 0, 128);
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <main+0x114>)
 80007ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007b0:	461d      	mov	r5, r3
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fire_IgnitionHandle = osThreadCreate(osThread(Fire_Ignition), NULL);
 80007be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fea3 	bl	8003510 <osThreadCreate>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <main+0x118>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fire_Injection */
  osThreadDef(Fire_Injection, Fire_Injection_F, osPriorityNormal, 0, 128);
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <main+0x11c>)
 80007d2:	f107 0420 	add.w	r4, r7, #32
 80007d6:	461d      	mov	r5, r3
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fire_InjectionHandle = osThreadCreate(osThread(Fire_Injection), NULL);
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fe90 	bl	8003510 <osThreadCreate>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <main+0x120>)
 80007f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Send_CAN */
  osThreadDef(Send_CAN, Send_CAN_F, osPriorityLow, 0, 128);
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <main+0x124>)
 80007f8:	1d3c      	adds	r4, r7, #4
 80007fa:	461d      	mov	r5, r3
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Send_CANHandle = osThreadCreate(osThread(Send_CAN), NULL);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fe7f 	bl	8003510 <osThreadCreate>
 8000812:	4603      	mov	r3, r0
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <main+0x128>)
 8000816:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000818:	f002 fe73 	bl	8003502 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0xf4>
 800081e:	bf00      	nop
 8000820:	20000964 	.word	0x20000964
 8000824:	20000824 	.word	0x20000824
 8000828:	200008c0 	.word	0x200008c0
 800082c:	08004b58 	.word	0x08004b58
 8000830:	20000950 	.word	0x20000950
 8000834:	08004b74 	.word	0x08004b74
 8000838:	20000954 	.word	0x20000954
 800083c:	08004b90 	.word	0x08004b90
 8000840:	20000958 	.word	0x20000958
 8000844:	08004bac 	.word	0x08004bac
 8000848:	2000095c 	.word	0x2000095c
 800084c:	08004bc8 	.word	0x08004bc8
 8000850:	20000960 	.word	0x20000960

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 f882 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000890:	2300      	movs	r3, #0
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fed7 	bl	800264c <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80008a4:	f000 fb6a 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f944 	bl	8002b50 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008ce:	f000 fb55 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d2:	2302      	movs	r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fa9d 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e8:	f000 fb48 	bl	8000f7c <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_ADC1_Init+0x74>)
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <MX_ADC1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_ADC1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_ADC1_Init+0x74>)
 800091e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000922:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_ADC1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_ADC1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_ADC1_Init+0x74>)
 8000932:	f000 fd35 	bl	80013a0 <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 fb1e 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2301      	movs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_ADC1_Init+0x74>)
 8000952:	f000 fef7 	bl	8001744 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800095c:	f000 fb0e 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000824 	.word	0x20000824
 800096c:	40012400 	.word	0x40012400

08000970 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_CAN_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_CAN_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_CAN_Init+0x64>)
 800097c:	2210      	movs	r2, #16
 800097e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_CAN_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_CAN_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_CAN_Init+0x64>)
 800098e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000992:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_CAN_Init+0x64>)
 8000996:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800099a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <MX_CAN_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_CAN_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_CAN_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_CAN_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_CAN_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_CAN_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_CAN_Init+0x64>)
 80009c2:	f001 f8b8 	bl	8001b36 <HAL_CAN_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80009cc:	f000 fad6 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000898 	.word	0x20000898
 80009d8:	40006400 	.word	0x40006400

080009dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_TIM2_Init+0xa0>)
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a22:	f002 fab1 	bl	8002f88 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a2c:	f000 faa6 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a4a:	f002 fb39 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 fa92 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_TIM2_Init+0xa0>)
 8000a66:	f002 fcdd 	bl	8003424 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a70:	f000 fa84 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200008c0 	.word	0x200008c0

08000a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <MX_TIM3_Init+0x98>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000aa4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000ac6:	f002 fa5f 	bl	8002f88 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ad0:	f000 fa54 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000ae2:	f002 faed 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000aec:	f000 fa46 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_TIM3_Init+0x94>)
 8000afe:	f002 fc91 	bl	8003424 <HAL_TIMEx_MasterConfigSynchronization>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 fa38 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000908 	.word	0x20000908
 8000b18:	40000400 	.word	0x40000400

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	200b      	movs	r0, #11
 8000b40:	f001 f9cb 	bl	8001eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b44:	200b      	movs	r0, #11
 8000b46:	f001 f9e4 	bl	8001f12 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0320 	and.w	r3, r3, #32
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xc0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INJECTION_Pin|IGNITION_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000bd4:	f001 fd22 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAMSHAFT_Pin */
  GPIO_InitStruct.Pin = CAMSHAFT_Pin;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAMSHAFT_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_GPIO_Init+0xcc>)
 8000bee:	f001 fb99 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : INJECTION_Pin IGNITION_Pin */
  GPIO_InitStruct.Pin = INJECTION_Pin|IGNITION_Pin;
 8000bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_GPIO_Init+0xc4>)
 8000c0c:	f001 fb8a 	bl	8002324 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	10110000 	.word	0x10110000
 8000c24:	40011000 	.word	0x40011000

08000c28 <Interpolate_2D>:

/* USER CODE BEGIN 4 */
/**
 * this function fucking interpolates it's in the name
 */
float Interpolate_2D(float T[N][N], const float *Var, const float *RPM, float x, float y){
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
    if (x < 300.0 || x > 7000.0 || y < 20.0 || y > 200.0) {
 8000c36:	492b      	ldr	r1, [pc, #172]	; (8000ce4 <Interpolate_2D+0xbc>)
 8000c38:	6838      	ldr	r0, [r7, #0]
 8000c3a:	f7ff fd35 	bl	80006a8 <__aeabi_fcmplt>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d114      	bne.n	8000c6e <Interpolate_2D+0x46>
 8000c44:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <Interpolate_2D+0xc0>)
 8000c46:	6838      	ldr	r0, [r7, #0]
 8000c48:	f7ff fd4c 	bl	80006e4 <__aeabi_fcmpgt>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10d      	bne.n	8000c6e <Interpolate_2D+0x46>
 8000c52:	4926      	ldr	r1, [pc, #152]	; (8000cec <Interpolate_2D+0xc4>)
 8000c54:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000c56:	f7ff fd27 	bl	80006a8 <__aeabi_fcmplt>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <Interpolate_2D+0x46>
 8000c60:	4923      	ldr	r1, [pc, #140]	; (8000cf0 <Interpolate_2D+0xc8>)
 8000c62:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000c64:	f7ff fd3e 	bl	80006e4 <__aeabi_fcmpgt>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <Interpolate_2D+0x4a>
        return -1;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <Interpolate_2D+0xcc>)
 8000c70:	e128      	b.n	8000ec4 <Interpolate_2D+0x29c>
    }
    int i, j;
    for (i = 0; i < N && RPM[i] <= x; i++);
 8000c72:	2300      	movs	r3, #0
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c76:	e002      	b.n	8000c7e <Interpolate_2D+0x56>
 8000c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c80:	2b0b      	cmp	r3, #11
 8000c82:	dc0b      	bgt.n	8000c9c <Interpolate_2D+0x74>
 8000c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	6838      	ldr	r0, [r7, #0]
 8000c92:	f7ff fd1d 	bl	80006d0 <__aeabi_fcmpge>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1ed      	bne.n	8000c78 <Interpolate_2D+0x50>
    for (j = 0; j < N && Var[j] <= y; j++);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ca0:	e002      	b.n	8000ca8 <Interpolate_2D+0x80>
 8000ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000caa:	2b0b      	cmp	r3, #11
 8000cac:	dc0b      	bgt.n	8000cc6 <Interpolate_2D+0x9e>
 8000cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000cbc:	f7ff fd08 	bl	80006d0 <__aeabi_fcmpge>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1ed      	bne.n	8000ca2 <Interpolate_2D+0x7a>

    if (i == 0 || j == 0 || i == N || j == N) {
 8000cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d008      	beq.n	8000cde <Interpolate_2D+0xb6>
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <Interpolate_2D+0xb6>
 8000cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd4:	2b0c      	cmp	r3, #12
 8000cd6:	d002      	beq.n	8000cde <Interpolate_2D+0xb6>
 8000cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cda:	2b0c      	cmp	r3, #12
 8000cdc:	d10c      	bne.n	8000cf8 <Interpolate_2D+0xd0>
        return -1;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <Interpolate_2D+0xcc>)
 8000ce0:	e0f0      	b.n	8000ec4 <Interpolate_2D+0x29c>
 8000ce2:	bf00      	nop
 8000ce4:	43960000 	.word	0x43960000
 8000ce8:	45dac000 	.word	0x45dac000
 8000cec:	41a00000 	.word	0x41a00000
 8000cf0:	43480000 	.word	0x43480000
 8000cf4:	bf800000 	.word	0xbf800000
    }

    const float x1 = RPM[i-1], x2 = RPM[i];
 8000cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	647b      	str	r3, [r7, #68]	; 0x44
 8000d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	643b      	str	r3, [r7, #64]	; 0x40
    const float y1 = Var[j-1], y2 = Var[j];
 8000d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	4413      	add	r3, r2
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
    const float f11 = T[j-1][i-1], f12 = T[j-1][i], f21 = T[j][i-1], f22 = T[j][i];
 8000d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	3b30      	subs	r3, #48	; 0x30
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d46:	3a01      	subs	r2, #1
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	3b30      	subs	r3, #48	; 0x30
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
 8000d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28

    const float factor_1 = (y2 - y) / (y2 - y1);
 8000d98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d9c:	f7ff f9dc 	bl	8000158 <__aeabi_fsub>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461c      	mov	r4, r3
 8000da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000da6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000da8:	f7ff f9d6 	bl	8000158 <__aeabi_fsub>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4619      	mov	r1, r3
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff fb8f 	bl	80004d4 <__aeabi_fdiv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    const float factor_2 = (y - y1) / (y2 - y1);
 8000dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dbc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dbe:	f7ff f9cb 	bl	8000158 <__aeabi_fsub>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000dca:	f7ff f9c5 	bl	8000158 <__aeabi_fsub>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f7ff fb7e 	bl	80004d4 <__aeabi_fdiv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	623b      	str	r3, [r7, #32]
    const float one = (x2 - x) / (x2 - x1);
 8000ddc:	6839      	ldr	r1, [r7, #0]
 8000dde:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000de0:	f7ff f9ba 	bl	8000158 <__aeabi_fsub>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461c      	mov	r4, r3
 8000de8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000dea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000dec:	f7ff f9b4 	bl	8000158 <__aeabi_fsub>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fb6d 	bl	80004d4 <__aeabi_fdiv>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	61fb      	str	r3, [r7, #28]
    const float two = (x - x1) / (x2 - x1);
 8000dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f7ff f9a9 	bl	8000158 <__aeabi_fsub>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461c      	mov	r4, r3
 8000e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e0e:	f7ff f9a3 	bl	8000158 <__aeabi_fsub>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff fb5c 	bl	80004d4 <__aeabi_fdiv>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	61bb      	str	r3, [r7, #24]
    const float three = (x2 - x) / (x2 - x1);
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e24:	f7ff f998 	bl	8000158 <__aeabi_fsub>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461c      	mov	r4, r3
 8000e2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e30:	f7ff f992 	bl	8000158 <__aeabi_fsub>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff fb4b 	bl	80004d4 <__aeabi_fdiv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	617b      	str	r3, [r7, #20]
    const float four = (x - x1) / (x2 - x1);
 8000e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff f987 	bl	8000158 <__aeabi_fsub>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e52:	f7ff f981 	bl	8000158 <__aeabi_fsub>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff fb3a 	bl	80004d4 <__aeabi_fdiv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	613b      	str	r3, [r7, #16]

    return factor_1 * (f11 * one + f21 * two) + factor_2 * (f12 * three + f22 * four);
 8000e64:	69f9      	ldr	r1, [r7, #28]
 8000e66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e68:	f7ff fa80 	bl	800036c <__aeabi_fmul>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461c      	mov	r4, r3
 8000e70:	69b9      	ldr	r1, [r7, #24]
 8000e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e74:	f7ff fa7a 	bl	800036c <__aeabi_fmul>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff f96d 	bl	800015c <__addsf3>
 8000e82:	4603      	mov	r3, r0
 8000e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fa70 	bl	800036c <__aeabi_fmul>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461c      	mov	r4, r3
 8000e90:	6979      	ldr	r1, [r7, #20]
 8000e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e94:	f7ff fa6a 	bl	800036c <__aeabi_fmul>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461d      	mov	r5, r3
 8000e9c:	6939      	ldr	r1, [r7, #16]
 8000e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ea0:	f7ff fa64 	bl	800036c <__aeabi_fmul>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	f7ff f957 	bl	800015c <__addsf3>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6a39      	ldr	r1, [r7, #32]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fa5a 	bl	800036c <__aeabi_fmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff f94d 	bl	800015c <__addsf3>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3750      	adds	r7, #80	; 0x50
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bdb0      	pop	{r4, r5, r7, pc}

08000ecc <Read_Sensors_F>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_Sensors_F */
void Read_Sensors_F(void const * argument)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000ed4:	e7fe      	b.n	8000ed4 <Read_Sensors_F+0x8>
	...

08000ed8 <Read_lookup_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_lookup_F */
void Read_lookup_F(void const * argument)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_lookup_F */
  /* Infinite loop */
  for(;;)
  {
	 IGN= Interpolate_2D(Ignition_Timing,TBP,RPM,RPM_val,TPS_val);
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <Read_lookup_F+0x54>)
 8000ee2:	681c      	ldr	r4, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <Read_lookup_F+0x58>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff f9e7 	bl	80002bc <__aeabi_ui2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <Read_lookup_F+0x5c>)
 8000ef6:	4910      	ldr	r1, [pc, #64]	; (8000f38 <Read_lookup_F+0x60>)
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <Read_lookup_F+0x64>)
 8000efa:	f7ff fe95 	bl	8000c28 <Interpolate_2D>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <Read_lookup_F+0x68>)
 8000f02:	6013      	str	r3, [r2, #0]
	 INJ=Interpolate_2D(Injection_Timing,TBP,RPM,RPM_val,TPS_val);
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <Read_lookup_F+0x54>)
 8000f06:	681c      	ldr	r4, [r3, #0]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <Read_lookup_F+0x58>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f9d5 	bl	80002bc <__aeabi_ui2f>
 8000f12:	4603      	mov	r3, r0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <Read_lookup_F+0x5c>)
 8000f1a:	4907      	ldr	r1, [pc, #28]	; (8000f38 <Read_lookup_F+0x60>)
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <Read_lookup_F+0x6c>)
 8000f1e:	f7ff fe83 	bl	8000c28 <Interpolate_2D>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <Read_lookup_F+0x70>)
 8000f26:	6013      	str	r3, [r2, #0]
	 IGN= Interpolate_2D(Ignition_Timing,TBP,RPM,RPM_val,TPS_val);
 8000f28:	e7da      	b.n	8000ee0 <Read_lookup_F+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	20000980 	.word	0x20000980
 8000f30:	20000964 	.word	0x20000964
 8000f34:	20000030 	.word	0x20000030
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000060 	.word	0x20000060
 8000f40:	20000978 	.word	0x20000978
 8000f44:	200002a0 	.word	0x200002a0
 8000f48:	2000097c 	.word	0x2000097c

08000f4c <Fire_Ignition_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Fire_Ignition_F */
void Fire_Ignition_F(void const * argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Fire_Ignition_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f002 fb27 	bl	80035a8 <osDelay>
 8000f5a:	e7fb      	b.n	8000f54 <Fire_Ignition_F+0x8>

08000f5c <Fire_Injection_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Fire_Injection_F */
void Fire_Injection_F(void const * argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Fire_Injection_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f002 fb1f 	bl	80035a8 <osDelay>
 8000f6a:	e7fb      	b.n	8000f64 <Fire_Injection_F+0x8>

08000f6c <Send_CAN_F>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send_CAN_F */
void Send_CAN_F(void const * argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send_CAN_F */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f002 fb17 	bl	80035a8 <osDelay>
 8000f7a:	e7fb      	b.n	8000f74 <Send_CAN_F+0x8>

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	f06f 0001 	mvn.w	r0, #1
 8000fc6:	f000 ff88 	bl	8001eda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x6c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x6c>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <HAL_ADC_MspInit+0xbc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d149      	bne.n	80010ac <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_ADC_MspInit+0xc0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IAT_Pin|CLT_Pin|TPS_Pin|MAP_Pin
 8001048:	231f      	movs	r3, #31
 800104a:	613b      	str	r3, [r7, #16]
                          |O2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104c:	2303      	movs	r3, #3
 800104e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <HAL_ADC_MspInit+0xc4>)
 8001058:	f001 f964 	bl	8002324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0xcc>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 800107e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001082:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001086:	2220      	movs	r2, #32
 8001088:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001092:	f000 ff59 	bl	8001f48 <HAL_DMA_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800109c:	f7ff ff6e 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 80010a4:	621a      	str	r2, [r3, #32]
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_ADC_MspInit+0xc8>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40012400 	.word	0x40012400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	20000854 	.word	0x20000854
 80010c4:	40020008 	.word	0x40020008

080010c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_CAN_MspInit+0x8c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d131      	bne.n	800114c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_CAN_MspInit+0x90>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_CAN_MspInit+0x90>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_CAN_MspInit+0x90>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_CAN_MspInit+0x90>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_CAN_MspInit+0x90>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_CAN_MspInit+0x90>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <HAL_CAN_MspInit+0x94>)
 800112e:	f001 f8f9 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_CAN_MspInit+0x94>)
 8001148:	f001 f8ec 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40006400 	.word	0x40006400
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800

08001160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117e:	d137      	bne.n	80011f0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a1f      	ldr	r2, [pc, #124]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = CRANKSHAFT_Pin;
 80011b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CRANKSHAFT_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <HAL_TIM_Base_MspInit+0xc0>)
 80011c6:	f001 f8ad 	bl	8002324 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_TIM_Base_MspInit+0xc4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_TIM_Base_MspInit+0xc4>)
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ee:	e010      	b.n	8001212 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_TIM_Base_MspInit+0xc8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10b      	bne.n	8001212 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_TIM_Base_MspInit+0xbc>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010000 	.word	0x40010000
 8001228:	40000400 	.word	0x40000400

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f885 	bl	8001368 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800125e:	f002 ff4d 	bl	80040fc <xTaskGetSchedulerState>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d001      	beq.n	800126c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001268:	f003 f93e 	bl	80044e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Channel1_IRQHandler+0x10>)
 8001276:	f000 ff21 	bl	80020bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000854 	.word	0x20000854

08001284 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b6:	f7ff ffe5 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f003 fb31 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012be:	f7ff fa33 	bl	8000728 <main>
  bx lr
 80012c2:	4770      	bx	lr
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000554 	.word	0x20000554
  ldr r2, =_sidata
 80012cc:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 80012d0:	20000554 	.word	0x20000554
  ldr r4, =_ebss
 80012d4:	20001adc 	.word	0x20001adc

080012d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_2_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x28>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x28>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 fde9 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fe46 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fe01 	bl	8001f2e <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 fdc9 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200004e0 	.word	0x200004e0
 8001360:	200004e8 	.word	0x200004e8
 8001364:	200004e4 	.word	0x200004e4

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x1c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x20>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_IncTick+0x20>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200004e8 	.word	0x200004e8
 8001388:	20000984 	.word	0x20000984

0800138c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <HAL_GetTick+0x10>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000984 	.word	0x20000984

080013a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0be      	b.n	8001540 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe0a 	bl	8000ff8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 faff 	bl	80019e8 <ADC_ConversionStop_Disable>
 80013ea:	4603      	mov	r3, r0
 80013ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8099 	bne.w	800152e <HAL_ADC_Init+0x18e>
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 8095 	bne.w	800152e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140c:	f023 0302 	bic.w	r3, r3, #2
 8001410:	f043 0202 	orr.w	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001420:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b1b      	ldrb	r3, [r3, #12]
 8001426:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001428:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4313      	orrs	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001438:	d003      	beq.n	8001442 <HAL_ADC_Init+0xa2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d102      	bne.n	8001448 <HAL_ADC_Init+0xa8>
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	e000      	b.n	800144a <HAL_ADC_Init+0xaa>
 8001448:	2300      	movs	r3, #0
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7d1b      	ldrb	r3, [r3, #20]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d119      	bne.n	800148c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7b1b      	ldrb	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	3b01      	subs	r3, #1
 8001466:	035a      	lsls	r2, r3, #13
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f043 0220 	orr.w	r2, r3, #32
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_ADC_Init+0x1a8>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014bc:	d003      	beq.n	80014c6 <HAL_ADC_Init+0x126>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d104      	bne.n	80014d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	051b      	lsls	r3, r3, #20
 80014ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_ADC_Init+0x1ac>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d10b      	bne.n	800150c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150a:	e018      	b.n	800153e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f023 0312 	bic.w	r3, r3, #18
 8001514:	f043 0210 	orr.w	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800152c:	e007      	b.n	800153e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f043 0210 	orr.w	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	ffe1f7fd 	.word	0xffe1f7fd
 800154c:	ff1f0efe 	.word	0xff1f0efe

08001550 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a64      	ldr	r2, [pc, #400]	; (80016f8 <HAL_ADC_Start_DMA+0x1a8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d004      	beq.n	8001574 <HAL_ADC_Start_DMA+0x24>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a63      	ldr	r2, [pc, #396]	; (80016fc <HAL_ADC_Start_DMA+0x1ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d106      	bne.n	8001582 <HAL_ADC_Start_DMA+0x32>
 8001574:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_ADC_Start_DMA+0x1a8>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 80b3 	bne.w	80016e8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Start_DMA+0x40>
 800158c:	2302      	movs	r3, #2
 800158e:	e0ae      	b.n	80016ee <HAL_ADC_Start_DMA+0x19e>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f9cb 	bl	8001934 <ADC_Enable>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 809a 	bne.w	80016de <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_ADC_Start_DMA+0x1ac>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_Start_DMA+0x84>
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_ADC_Start_DMA+0x1a8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d115      	bne.n	8001600 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d026      	beq.n	800163c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015fe:	e01d      	b.n	800163c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_ADC_Start_DMA+0x1a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_ADC_Start_DMA+0xd0>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <HAL_ADC_Start_DMA+0x1ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d10d      	bne.n	800163c <HAL_ADC_Start_DMA+0xec>
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <HAL_ADC_Start_DMA+0x1a8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	f023 0206 	bic.w	r2, r3, #6
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
 8001654:	e002      	b.n	800165c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_ADC_Start_DMA+0x1b0>)
 800166a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_ADC_Start_DMA+0x1b4>)
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_ADC_Start_DMA+0x1b8>)
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0202 	mvn.w	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001694:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a18      	ldr	r0, [r3, #32]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	334c      	adds	r3, #76	; 0x4c
 80016a0:	4619      	mov	r1, r3
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f000 fca9 	bl	8001ffc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b8:	d108      	bne.n	80016cc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016c8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016ca:	e00f      	b.n	80016ec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016da:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016dc:	e006      	b.n	80016ec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80016e6:	e001      	b.n	80016ec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012400 	.word	0x40012400
 80016fc:	40012800 	.word	0x40012800
 8001700:	08001a6b 	.word	0x08001a6b
 8001704:	08001ae7 	.word	0x08001ae7
 8001708:	08001b03 	.word	0x08001b03

0800170c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x20>
 8001760:	2302      	movs	r3, #2
 8001762:	e0dc      	b.n	800191e <HAL_ADC_ConfigChannel+0x1da>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d81c      	bhi.n	80017ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b05      	subs	r3, #5
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b05      	subs	r3, #5
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
 80017ac:	e03c      	b.n	8001828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d81c      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b23      	subs	r3, #35	; 0x23
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4019      	ands	r1, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b23      	subs	r3, #35	; 0x23
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
 80017ee:	e01b      	b.n	8001828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b41      	subs	r3, #65	; 0x41
 8001802:	221f      	movs	r2, #31
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b41      	subs	r3, #65	; 0x41
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b09      	cmp	r3, #9
 800182e:	d91c      	bls.n	800186a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68d9      	ldr	r1, [r3, #12]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	3b1e      	subs	r3, #30
 8001842:	2207      	movs	r2, #7
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	4019      	ands	r1, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6898      	ldr	r0, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	3b1e      	subs	r3, #30
 800185c:	fa00 f203 	lsl.w	r2, r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	e019      	b.n	800189e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6919      	ldr	r1, [r3, #16]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	2207      	movs	r2, #7
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4019      	ands	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6898      	ldr	r0, [r3, #8]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	fa00 f203 	lsl.w	r2, r0, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d132      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_ADC_ConfigChannel+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d125      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d126      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d11a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_ADC_ConfigChannel+0x1e8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_ADC_ConfigChannel+0x1ec>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	0c9a      	lsrs	r2, r3, #18
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f4:	e002      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f9      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001902:	e007      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40012400 	.word	0x40012400
 800192c:	200004e0 	.word	0x200004e0
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d040      	beq.n	80019d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <ADC_Enable+0xac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <ADC_Enable+0xb0>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001970:	e002      	b.n	8001978 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800197e:	f7ff fd05 	bl	800138c <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001984:	e01f      	b.n	80019c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001986:	f7ff fd01 	bl	800138c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d918      	bls.n	80019c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d011      	beq.n	80019c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e007      	b.n	80019d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d1d8      	bne.n	8001986 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200004e0 	.word	0x200004e0
 80019e4:	431bde83 	.word	0x431bde83

080019e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d12e      	bne.n	8001a60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a12:	f7ff fcbb 	bl	800138c <HAL_GetTick>
 8001a16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a18:	e01b      	b.n	8001a52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a1a:	f7ff fcb7 	bl	800138c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d914      	bls.n	8001a52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10d      	bne.n	8001a52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e007      	b.n	8001a62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d0dc      	beq.n	8001a1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d127      	bne.n	8001ad4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a9e:	d115      	bne.n	8001acc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fe1d 	bl	800170c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ad2:	e004      	b.n	8001ade <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fe12 	bl	800171e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fe01 	bl	8001730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ed      	b.n	8001d24 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fab7 	bl	80010c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6a:	f7ff fc0f 	bl	800138c <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b70:	e012      	b.n	8001b98 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b72:	f7ff fc0b 	bl	800138c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d90b      	bls.n	8001b98 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2205      	movs	r2, #5
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0c5      	b.n	8001d24 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0e5      	beq.n	8001b72 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0202 	bic.w	r2, r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb6:	f7ff fbe9 	bl	800138c <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bbc:	e012      	b.n	8001be4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bbe:	f7ff fbe5 	bl	800138c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d90b      	bls.n	8001be4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2205      	movs	r2, #5
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e09f      	b.n	8001d24 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1e5      	bne.n	8001bbe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7e1b      	ldrb	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7e5b      	ldrb	r3, [r3, #25]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7e9b      	ldrb	r3, [r3, #26]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e007      	b.n	8001c70 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0220 	bic.w	r2, r2, #32
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7edb      	ldrb	r3, [r3, #27]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0210 	bic.w	r2, r2, #16
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e007      	b.n	8001c9a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7f1b      	ldrb	r3, [r3, #28]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0208 	orr.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7f5b      	ldrb	r3, [r3, #29]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0204 	orr.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0204 	bic.w	r2, r2, #4
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	ea42 0103 	orr.w	r1, r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <__NVIC_EnableIRQ+0x34>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff90 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff2d 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff42 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff35 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e043      	b.n	8001fe6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_DMA_Init+0xa8>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_DMA_Init+0xac>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_DMA_Init+0xb0>)
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	bffdfff8 	.word	0xbffdfff8
 8001ff4:	cccccccd 	.word	0xcccccccd
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_DMA_Start_IT+0x20>
 8002018:	2302      	movs	r3, #2
 800201a:	e04a      	b.n	80020b2 <HAL_DMA_Start_IT+0xb6>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800202a:	2b01      	cmp	r3, #1
 800202c:	d13a      	bne.n	80020a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f938 	bl	80022c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 020e 	orr.w	r2, r2, #14
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e00f      	b.n	8002092 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 020a 	orr.w	r2, r2, #10
 8002090:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e005      	b.n	80020b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2204      	movs	r2, #4
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d04f      	beq.n	8002184 <HAL_DMA_IRQHandler+0xc8>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04a      	beq.n	8002184 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0204 	bic.w	r2, r2, #4
 800210a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_DMA_IRQHandler+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d029      	beq.n	800216a <HAL_DMA_IRQHandler+0xae>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_DMA_IRQHandler+0x1f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_IRQHandler+0xaa>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01a      	beq.n	8002160 <HAL_DMA_IRQHandler+0xa4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d012      	beq.n	800215a <HAL_DMA_IRQHandler+0x9e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a60      	ldr	r2, [pc, #384]	; (80022bc <HAL_DMA_IRQHandler+0x200>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00a      	beq.n	8002154 <HAL_DMA_IRQHandler+0x98>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5f      	ldr	r2, [pc, #380]	; (80022c0 <HAL_DMA_IRQHandler+0x204>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d102      	bne.n	800214e <HAL_DMA_IRQHandler+0x92>
 8002148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214c:	e00e      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 800214e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002152:	e00b      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 8002154:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002158:	e008      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 800215a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800215e:	e005      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 8002160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002164:	e002      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	e000      	b.n	800216c <HAL_DMA_IRQHandler+0xb0>
 800216a:	2304      	movs	r3, #4
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <HAL_DMA_IRQHandler+0x208>)
 800216e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8094 	beq.w	80022a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002182:	e08e      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2202      	movs	r2, #2
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d056      	beq.n	8002242 <HAL_DMA_IRQHandler+0x186>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d051      	beq.n	8002242 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020a 	bic.w	r2, r2, #10
 80021ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a38      	ldr	r2, [pc, #224]	; (80022ac <HAL_DMA_IRQHandler+0x1f0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d029      	beq.n	8002222 <HAL_DMA_IRQHandler+0x166>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <HAL_DMA_IRQHandler+0x1f4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d022      	beq.n	800221e <HAL_DMA_IRQHandler+0x162>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a35      	ldr	r2, [pc, #212]	; (80022b4 <HAL_DMA_IRQHandler+0x1f8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x15c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_DMA_IRQHandler+0x1fc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d012      	beq.n	8002212 <HAL_DMA_IRQHandler+0x156>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a32      	ldr	r2, [pc, #200]	; (80022bc <HAL_DMA_IRQHandler+0x200>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00a      	beq.n	800220c <HAL_DMA_IRQHandler+0x150>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_DMA_IRQHandler+0x204>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <HAL_DMA_IRQHandler+0x14a>
 8002200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002204:	e00e      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	e00b      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	e008      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 8002212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002216:	e005      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	e002      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 800221e:	2320      	movs	r3, #32
 8002220:	e000      	b.n	8002224 <HAL_DMA_IRQHandler+0x168>
 8002222:	2302      	movs	r3, #2
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_DMA_IRQHandler+0x208>)
 8002226:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2b00      	cmp	r3, #0
 8002236:	d034      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002240:	e02f      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2208      	movs	r2, #8
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d028      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x1e8>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 020e 	bic.w	r2, r2, #14
 800226a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
    }
  }
  return;
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
}
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40020008 	.word	0x40020008
 80022b0:	4002001c 	.word	0x4002001c
 80022b4:	40020030 	.word	0x40020030
 80022b8:	40020044 	.word	0x40020044
 80022bc:	40020058 	.word	0x40020058
 80022c0:	4002006c 	.word	0x4002006c
 80022c4:	40020000 	.word	0x40020000

080022c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d108      	bne.n	8002308 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002306:	e007      	b.n	8002318 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e161      	b.n	80025fc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002338:	2201      	movs	r2, #1
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8150 	bne.w	80025f6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a97      	ldr	r2, [pc, #604]	; (80025b8 <HAL_GPIO_Init+0x294>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d05e      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002360:	4a95      	ldr	r2, [pc, #596]	; (80025b8 <HAL_GPIO_Init+0x294>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d875      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002366:	4a95      	ldr	r2, [pc, #596]	; (80025bc <HAL_GPIO_Init+0x298>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d058      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 800236c:	4a93      	ldr	r2, [pc, #588]	; (80025bc <HAL_GPIO_Init+0x298>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d86f      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002372:	4a93      	ldr	r2, [pc, #588]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d052      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002378:	4a91      	ldr	r2, [pc, #580]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d869      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800237e:	4a91      	ldr	r2, [pc, #580]	; (80025c4 <HAL_GPIO_Init+0x2a0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d04c      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002384:	4a8f      	ldr	r2, [pc, #572]	; (80025c4 <HAL_GPIO_Init+0x2a0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d863      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800238a:	4a8f      	ldr	r2, [pc, #572]	; (80025c8 <HAL_GPIO_Init+0x2a4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d046      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002390:	4a8d      	ldr	r2, [pc, #564]	; (80025c8 <HAL_GPIO_Init+0x2a4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d85d      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002396:	2b12      	cmp	r3, #18
 8002398:	d82a      	bhi.n	80023f0 <HAL_GPIO_Init+0xcc>
 800239a:	2b12      	cmp	r3, #18
 800239c:	d859      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_GPIO_Init+0x80>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	080023f9 	.word	0x080023f9
 80023ac:	0800240b 	.word	0x0800240b
 80023b0:	0800244d 	.word	0x0800244d
 80023b4:	08002453 	.word	0x08002453
 80023b8:	08002453 	.word	0x08002453
 80023bc:	08002453 	.word	0x08002453
 80023c0:	08002453 	.word	0x08002453
 80023c4:	08002453 	.word	0x08002453
 80023c8:	08002453 	.word	0x08002453
 80023cc:	08002453 	.word	0x08002453
 80023d0:	08002453 	.word	0x08002453
 80023d4:	08002453 	.word	0x08002453
 80023d8:	08002453 	.word	0x08002453
 80023dc:	08002453 	.word	0x08002453
 80023e0:	08002453 	.word	0x08002453
 80023e4:	08002453 	.word	0x08002453
 80023e8:	08002401 	.word	0x08002401
 80023ec:	08002415 	.word	0x08002415
 80023f0:	4a76      	ldr	r2, [pc, #472]	; (80025cc <HAL_GPIO_Init+0x2a8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023f6:	e02c      	b.n	8002452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e029      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	3304      	adds	r3, #4
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e024      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	3308      	adds	r3, #8
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e01f      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	330c      	adds	r3, #12
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e01a      	b.n	8002454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002426:	2304      	movs	r3, #4
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e013      	b.n	8002454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002434:	2308      	movs	r3, #8
 8002436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	611a      	str	r2, [r3, #16]
          break;
 800243e:	e009      	b.n	8002454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002440:	2308      	movs	r3, #8
 8002442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	615a      	str	r2, [r3, #20]
          break;
 800244a:	e003      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x130>
          break;
 8002452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d801      	bhi.n	800245e <HAL_GPIO_Init+0x13a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_Init+0x13e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d802      	bhi.n	8002470 <HAL_GPIO_Init+0x14c>
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	e002      	b.n	8002476 <HAL_GPIO_Init+0x152>
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3b08      	subs	r3, #8
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	210f      	movs	r1, #15
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	431a      	orrs	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a9 	beq.w	80025f6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024bc:	4a45      	ldr	r2, [pc, #276]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <HAL_GPIO_Init+0x2b4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_GPIO_Init+0x1e0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <HAL_GPIO_Init+0x1dc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x2bc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_GPIO_Init+0x1d8>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 80024fc:	2303      	movs	r3, #3
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002504:	2300      	movs	r3, #0
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002516:	492f      	ldr	r1, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	492b      	ldr	r1, [pc, #172]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	4927      	ldr	r1, [pc, #156]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002548:	4013      	ands	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	491d      	ldr	r1, [pc, #116]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002570:	4013      	ands	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	43db      	mvns	r3, r3
 8002596:	4913      	ldr	r1, [pc, #76]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002598:	4013      	ands	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01f      	beq.n	80025e8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	490d      	ldr	r1, [pc, #52]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e01f      	b.n	80025f6 <HAL_GPIO_Init+0x2d2>
 80025b6:	bf00      	nop
 80025b8:	10320000 	.word	0x10320000
 80025bc:	10310000 	.word	0x10310000
 80025c0:	10220000 	.word	0x10220000
 80025c4:	10210000 	.word	0x10210000
 80025c8:	10120000 	.word	0x10120000
 80025cc:	10110000 	.word	0x10110000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40010800 	.word	0x40010800
 80025dc:	40010c00 	.word	0x40010c00
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3301      	adds	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f ae96 	bne.w	8002338 <HAL_GPIO_Init+0x14>
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	372c      	adds	r7, #44	; 0x2c
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e272      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e24c      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fe30 	bl	800138c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fe2c 	bl	800138c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e200      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fe1c 	bl	800138c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fe18 	bl	800138c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ec      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fdd1 	bl	800138c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fdcd 	bl	800138c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fdb0 	bl	800138c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fdac 	bl	800138c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e180      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe fd90 	bl	800138c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fd8c 	bl	800138c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 faa6 	bl	8002de0 <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fe fd76 	bl	800138c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe fd72 	bl	800138c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e146      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b92      	ldr	r3, [pc, #584]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe fd33 	bl	800138c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fd2f 	bl	800138c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a60      	ldr	r2, [pc, #384]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a5d      	ldr	r2, [pc, #372]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fce3 	bl	800138c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fcdf 	bl	800138c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fccd 	bl	800138c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fcc9 	bl	800138c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e09b      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fc9d 	bl	800138c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fc99 	bl	800138c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4921      	ldr	r1, [pc, #132]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	491b      	ldr	r1, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fc6d 	bl	800138c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fc69 	bl	800138c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e035      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fc56 	bl	800138c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fc52 	bl	800138c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e019      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x500>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4965      	ldr	r1, [pc, #404]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d040      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e073      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fba4 	bl	800138c <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fba0 	bl	800138c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d210      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fb02 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08004bfc 	.word	0x08004bfc
 8002d1c:	200004e0 	.word	0x200004e0
 8002d20:	200004e4 	.word	0x200004e4

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b490      	push	{r4, r7}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d2c:	1d3c      	adds	r4, r7, #4
 8002d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d34:	f240 2301 	movw	r3, #513	; 0x201
 8002d38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x46>
 8002d62:	e02b      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d66:	623b      	str	r3, [r7, #32]
      break;
 8002d68:	e02b      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3328      	adds	r3, #40	; 0x28
 8002d74:	443b      	add	r3, r7
 8002d76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	3328      	adds	r3, #40	; 0x28
 8002d92:	443b      	add	r3, r7
 8002d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d9e:	fb03 f202 	mul.w	r2, r3, r2
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	e004      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	623b      	str	r3, [r7, #32]
      break;
 8002dba:	e002      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dbe:	623b      	str	r3, [r7, #32]
      break;
 8002dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc90      	pop	{r4, r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	08004be4 	.word	0x08004be4
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <RCC_Delay+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <RCC_Delay+0x38>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dfc:	bf00      	nop
  }
  while (Delay --);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <RCC_Delay+0x1c>
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	200004e0 	.word	0x200004e0
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	61d3      	str	r3, [r2, #28]
 8002e54:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d118      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fa86 	bl	800138c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe fa82 	bl	800138c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e06d      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d027      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fa51 	bl	800138c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fa4d 	bl	800138c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e036      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4917      	ldr	r1, [pc, #92]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	490b      	ldr	r1, [pc, #44]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4904      	ldr	r1, [pc, #16]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420440 	.word	0x42420440

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e041      	b.n	800301e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe f8d6 	bl	8001160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 f93e 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e035      	b.n	80030ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIM_Base_Start_IT+0x90>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x4e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d004      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x4e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIM_Base_Start_IT+0x94>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d010      	beq.n	80030aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e007      	b.n	80030aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0x18>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0b3      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x180>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d03e      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0xd0>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	f200 8087 	bhi.w	8003228 <HAL_TIM_ConfigClockSource+0x168>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	f000 8085 	beq.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d87f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d01a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xa2>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d87b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003130:	2b60      	cmp	r3, #96	; 0x60
 8003132:	d050      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x116>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d877      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003138:	2b50      	cmp	r3, #80	; 0x50
 800313a:	d03c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xf6>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d873      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d058      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x136>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d86f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d064      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d86b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d060      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d867      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 800315c:	2b10      	cmp	r3, #16
 800315e:	d05a      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003160:	e062      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f000 f938 	bl	80033e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003184:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
      break;
 800318e:	e04e      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f000 f921 	bl	80033e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b2:	609a      	str	r2, [r3, #8]
      break;
 80031b4:	e03b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 f898 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2150      	movs	r1, #80	; 0x50
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f8ef 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 80031d4:	e02b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 f8b6 	bl	8003354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2160      	movs	r1, #96	; 0x60
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f8df 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e01b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	461a      	mov	r2, r3
 8003204:	f000 f878 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f8cf 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 8003214:	e00b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f000 f8c6 	bl	80033b2 <TIM_ITRx_SetConfig>
        break;
 8003226:	e002      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800322c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <TIM_Base_SetConfig+0xa8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_Base_SetConfig+0x28>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0x28>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <TIM_Base_SetConfig+0xac>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <TIM_Base_SetConfig+0xa8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0x52>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x52>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <TIM_Base_SetConfig+0xac>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <TIM_Base_SetConfig+0xa8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	615a      	str	r2, [r3, #20]
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400

080032f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0210 	bic.w	r2, r3, #16
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	031b      	lsls	r3, r3, #12
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f043 0307 	orr.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	431a      	orrs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003438:	2302      	movs	r3, #2
 800343a:	e041      	b.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d004      	beq.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10c      	bne.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400

080034d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e6:	2b84      	cmp	r3, #132	; 0x84
 80034e8:	d005      	beq.n	80034f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4413      	add	r3, r2
 80034f2:	3303      	adds	r3, #3
 80034f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003506:	f000 fae7 	bl	8003ad8 <vTaskStartScheduler>
  
  return osOK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}

08003510 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af04      	add	r7, sp, #16
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d020      	beq.n	8003564 <osThreadCreate+0x54>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01c      	beq.n	8003564 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685c      	ldr	r4, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681d      	ldr	r5, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691e      	ldr	r6, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ffc9 	bl	80034d4 <makeFreeRtosPriority>
 8003542:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800354c:	9202      	str	r2, [sp, #8]
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	9100      	str	r1, [sp, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	4632      	mov	r2, r6
 8003556:	4629      	mov	r1, r5
 8003558:	4620      	mov	r0, r4
 800355a:	f000 f8e8 	bl	800372e <xTaskCreateStatic>
 800355e:	4603      	mov	r3, r0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e01c      	b.n	800359e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685c      	ldr	r4, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003570:	b29e      	uxth	r6, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ffab 	bl	80034d4 <makeFreeRtosPriority>
 800357e:	4602      	mov	r2, r0
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4632      	mov	r2, r6
 800358c:	4629      	mov	r1, r5
 800358e:	4620      	mov	r0, r4
 8003590:	f000 f929 	bl	80037e6 <xTaskCreate>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <osDelay+0x16>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	e000      	b.n	80035c0 <osDelay+0x18>
 80035be:	2301      	movs	r3, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa55 	bl	8003a70 <vTaskDelay>
  
  return osOK;
 80035c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 0208 	add.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0208 	add.w	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f103 0208 	add.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d103      	bne.n	800368c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e00c      	b.n	80036a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3308      	adds	r3, #8
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e002      	b.n	800369a <vListInsert+0x2e>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d2f6      	bcs.n	8003694 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6852      	ldr	r2, [r2, #4]
 80036fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d103      	bne.n	8003710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08e      	sub	sp, #56	; 0x38
 8003732:	af04      	add	r7, sp, #16
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <xTaskCreateStatic+0x46>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	61fb      	str	r3, [r7, #28]
}
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003774:	23b4      	movs	r3, #180	; 0xb4
 8003776:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2bb4      	cmp	r3, #180	; 0xb4
 800377c:	d00a      	beq.n	8003794 <xTaskCreateStatic+0x66>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	61bb      	str	r3, [r7, #24]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01e      	beq.n	80037d8 <xTaskCreateStatic+0xaa>
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037b2:	2300      	movs	r3, #0
 80037b4:	9303      	str	r3, [sp, #12]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9302      	str	r3, [sp, #8]
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f850 	bl	8003870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d2:	f000 f8e3 	bl	800399c <prvAddNewTaskToReadyList>
 80037d6:	e001      	b.n	80037dc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037dc:	697b      	ldr	r3, [r7, #20]
	}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b08c      	sub	sp, #48	; 0x30
 80037ea:	af04      	add	r7, sp, #16
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 feb8 	bl	8004570 <pvPortMalloc>
 8003800:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00e      	beq.n	8003826 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003808:	20b4      	movs	r0, #180	; 0xb4
 800380a:	f000 feb1 	bl	8004570 <pvPortMalloc>
 800380e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
 800381c:	e005      	b.n	800382a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f000 ff6a 	bl	80046f8 <vPortFree>
 8003824:	e001      	b.n	800382a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	2300      	movs	r3, #0
 800383c:	9303      	str	r3, [sp, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	9302      	str	r3, [sp, #8]
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f80e 	bl	8003870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003854:	69f8      	ldr	r0, [r7, #28]
 8003856:	f000 f8a1 	bl	800399c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800385a:	2301      	movs	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e002      	b.n	8003866 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003866:	69bb      	ldr	r3, [r7, #24]
	}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003888:	3b01      	subs	r3, #1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	617b      	str	r3, [r7, #20]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e012      	b.n	80038e4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	7819      	ldrb	r1, [r3, #0]
 80038c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	3334      	adds	r3, #52	; 0x34
 80038ce:	460a      	mov	r2, r1
 80038d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3301      	adds	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d9e9      	bls.n	80038be <prvInitialiseNewTask+0x4e>
 80038ea:	e000      	b.n	80038ee <prvInitialiseNewTask+0x7e>
		{
			break;
 80038ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d901      	bls.n	8003900 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038fc:	2306      	movs	r3, #6
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fe79 	bl	800360e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fe74 	bl	800360e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	f1c3 0207 	rsb	r2, r3, #7
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	2200      	movs	r2, #0
 8003948:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	334c      	adds	r3, #76	; 0x4c
 8003950:	2260      	movs	r2, #96	; 0x60
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f809 	bl	800496c <memset>
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <prvInitialiseNewTask+0x120>)
 800395e:	651a      	str	r2, [r3, #80]	; 0x50
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <prvInitialiseNewTask+0x124>)
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <prvInitialiseNewTask+0x128>)
 800396a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	69b8      	ldr	r0, [r7, #24]
 8003972:	f000 fc47 	bl	8004204 <pxPortInitialiseStack>
 8003976:	4602      	mov	r2, r0
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003986:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003988:	bf00      	nop
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08004c2c 	.word	0x08004c2c
 8003994:	08004c4c 	.word	0x08004c4c
 8003998:	08004c0c 	.word	0x08004c0c

0800399c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039a4:	f000 fd22 	bl	80043ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <prvAddNewTaskToReadyList+0xb8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <prvAddNewTaskToReadyList+0xb8>)
 80039b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <prvAddNewTaskToReadyList+0xbc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039ba:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <prvAddNewTaskToReadyList+0xbc>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <prvAddNewTaskToReadyList+0xb8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d110      	bne.n	80039ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039c8:	f000 fad2 	bl	8003f70 <prvInitialiseTaskLists>
 80039cc:	e00d      	b.n	80039ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <prvAddNewTaskToReadyList+0xc0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <prvAddNewTaskToReadyList+0xbc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d802      	bhi.n	80039ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039e4:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <prvAddNewTaskToReadyList+0xbc>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <prvAddNewTaskToReadyList+0xc4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <prvAddNewTaskToReadyList+0xc4>)
 80039f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <prvAddNewTaskToReadyList+0xc8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <prvAddNewTaskToReadyList+0xc8>)
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <prvAddNewTaskToReadyList+0xcc>)
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f7ff fe02 	bl	8003626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a22:	f000 fd13 	bl	800444c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <prvAddNewTaskToReadyList+0xc0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvAddNewTaskToReadyList+0xbc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d207      	bcs.n	8003a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <prvAddNewTaskToReadyList+0xd0>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000a88 	.word	0x20000a88
 8003a58:	20000988 	.word	0x20000988
 8003a5c:	20000a94 	.word	0x20000a94
 8003a60:	20000aa4 	.word	0x20000aa4
 8003a64:	20000a90 	.word	0x20000a90
 8003a68:	2000098c 	.word	0x2000098c
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d017      	beq.n	8003ab2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <vTaskDelay+0x60>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <vTaskDelay+0x30>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	e7fe      	b.n	8003a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aa0:	f000 f884 	bl	8003bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fb46 	bl	8004138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aac:	f000 f88c 	bl	8003bc8 <xTaskResumeAll>
 8003ab0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <vTaskDelay+0x64>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000ab0 	.word	0x20000ab0
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ae6:	463a      	mov	r2, r7
 8003ae8:	1d39      	adds	r1, r7, #4
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fe02 	bl	80006f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	9202      	str	r2, [sp, #8]
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	460a      	mov	r2, r1
 8003b06:	4921      	ldr	r1, [pc, #132]	; (8003b8c <vTaskStartScheduler+0xb4>)
 8003b08:	4821      	ldr	r0, [pc, #132]	; (8003b90 <vTaskStartScheduler+0xb8>)
 8003b0a:	f7ff fe10 	bl	800372e <xTaskCreateStatic>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <vTaskStartScheduler+0xbc>)
 8003b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <vTaskStartScheduler+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e001      	b.n	8003b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d11b      	bne.n	8003b64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	613b      	str	r3, [r7, #16]
}
 8003b3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <vTaskStartScheduler+0xc0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	334c      	adds	r3, #76	; 0x4c
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <vTaskStartScheduler+0xc4>)
 8003b48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <vTaskStartScheduler+0xc8>)
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <vTaskStartScheduler+0xcc>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <vTaskStartScheduler+0xd0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b5e:	f000 fbd3 	bl	8004308 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b62:	e00e      	b.n	8003b82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d10a      	bne.n	8003b82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <vTaskStartScheduler+0xa8>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	08004bf4 	.word	0x08004bf4
 8003b90:	08003f41 	.word	0x08003f41
 8003b94:	20000aac 	.word	0x20000aac
 8003b98:	20000988 	.word	0x20000988
 8003b9c:	200004f0 	.word	0x200004f0
 8003ba0:	20000aa8 	.word	0x20000aa8
 8003ba4:	20000a94 	.word	0x20000a94
 8003ba8:	20000a8c 	.word	0x20000a8c

08003bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <vTaskSuspendAll+0x18>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <vTaskSuspendAll+0x18>)
 8003bb8:	6013      	str	r3, [r2, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000ab0 	.word	0x20000ab0

08003bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bd6:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <xTaskResumeAll+0x114>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	603b      	str	r3, [r7, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bf4:	f000 fbfa 	bl	80043ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bf8:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <xTaskResumeAll+0x114>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <xTaskResumeAll+0x114>)
 8003c00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c02:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <xTaskResumeAll+0x114>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d161      	bne.n	8003cce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c0a:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <xTaskResumeAll+0x118>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d05d      	beq.n	8003cce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c12:	e02e      	b.n	8003c72 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <xTaskResumeAll+0x11c>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fd5b 	bl	80036dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fd56 	bl	80036dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	2201      	movs	r2, #1
 8003c36:	409a      	lsls	r2, r3
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <xTaskResumeAll+0x120>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <xTaskResumeAll+0x120>)
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a27      	ldr	r2, [pc, #156]	; (8003cec <xTaskResumeAll+0x124>)
 8003c50:	441a      	add	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7ff fce4 	bl	8003626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <xTaskResumeAll+0x128>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d302      	bcc.n	8003c72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <xTaskResumeAll+0x12c>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <xTaskResumeAll+0x11c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1cc      	bne.n	8003c14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c80:	f000 fa18 	bl	80040b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c84:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <xTaskResumeAll+0x130>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c90:	f000 f836 	bl	8003d00 <xTaskIncrementTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <xTaskResumeAll+0x12c>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f1      	bne.n	8003c90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <xTaskResumeAll+0x130>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <xTaskResumeAll+0x12c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <xTaskResumeAll+0x134>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f000 fbbd 	bl	800444c <vPortExitCritical>

	return xAlreadyYielded;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000ab0 	.word	0x20000ab0
 8003ce0:	20000a88 	.word	0x20000a88
 8003ce4:	20000a48 	.word	0x20000a48
 8003ce8:	20000a90 	.word	0x20000a90
 8003cec:	2000098c 	.word	0x2000098c
 8003cf0:	20000988 	.word	0x20000988
 8003cf4:	20000a9c 	.word	0x20000a9c
 8003cf8:	20000a98 	.word	0x20000a98
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <xTaskIncrementTick+0x150>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 808d 	bne.w	8003e2e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d14:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <xTaskIncrementTick+0x154>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d1c:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <xTaskIncrementTick+0x154>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d120      	bne.n	8003d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <xTaskIncrementTick+0x158>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	603b      	str	r3, [r7, #0]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xTaskIncrementTick+0x46>
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <xTaskIncrementTick+0x158>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <xTaskIncrementTick+0x15c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a41      	ldr	r2, [pc, #260]	; (8003e58 <xTaskIncrementTick+0x158>)
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <xTaskIncrementTick+0x15c>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <xTaskIncrementTick+0x160>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <xTaskIncrementTick+0x160>)
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	f000 f9a5 	bl	80040b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d6a:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <xTaskIncrementTick+0x164>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d34d      	bcc.n	8003e10 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <xTaskIncrementTick+0x158>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <xTaskIncrementTick+0x82>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <xTaskIncrementTick+0x84>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskIncrementTick+0x164>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	601a      	str	r2, [r3, #0]
					break;
 8003d90:	e03e      	b.n	8003e10 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <xTaskIncrementTick+0x158>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d203      	bcs.n	8003db2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <xTaskIncrementTick+0x164>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6013      	str	r3, [r2, #0]
						break;
 8003db0:	e02e      	b.n	8003e10 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fc90 	bl	80036dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fc87 	bl	80036dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <xTaskIncrementTick+0x168>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <xTaskIncrementTick+0x168>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <xTaskIncrementTick+0x16c>)
 8003dee:	441a      	add	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7ff fc15 	bl	8003626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <xTaskIncrementTick+0x170>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3b4      	bcc.n	8003d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e0e:	e7b1      	b.n	8003d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <xTaskIncrementTick+0x170>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4915      	ldr	r1, [pc, #84]	; (8003e6c <xTaskIncrementTick+0x16c>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d907      	bls.n	8003e38 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e004      	b.n	8003e38 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <xTaskIncrementTick+0x174>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <xTaskIncrementTick+0x174>)
 8003e36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xTaskIncrementTick+0x178>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e44:	697b      	ldr	r3, [r7, #20]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000ab0 	.word	0x20000ab0
 8003e54:	20000a8c 	.word	0x20000a8c
 8003e58:	20000a40 	.word	0x20000a40
 8003e5c:	20000a44 	.word	0x20000a44
 8003e60:	20000aa0 	.word	0x20000aa0
 8003e64:	20000aa8 	.word	0x20000aa8
 8003e68:	20000a90 	.word	0x20000a90
 8003e6c:	2000098c 	.word	0x2000098c
 8003e70:	20000988 	.word	0x20000988
 8003e74:	20000a98 	.word	0x20000a98
 8003e78:	20000a9c 	.word	0x20000a9c

08003e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <vTaskSwitchContext+0xac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <vTaskSwitchContext+0xb0>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e90:	e044      	b.n	8003f1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <vTaskSwitchContext+0xb0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <vTaskSwitchContext+0xb4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f1c3 031f 	rsb	r3, r3, #31
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	4921      	ldr	r1, [pc, #132]	; (8003f34 <vTaskSwitchContext+0xb8>)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vTaskSwitchContext+0x5a>
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <vTaskSwitchContext+0xb8>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d104      	bne.n	8003f08 <vTaskSwitchContext+0x8c>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <vTaskSwitchContext+0xbc>)
 8003f10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <vTaskSwitchContext+0xbc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	334c      	adds	r3, #76	; 0x4c
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <vTaskSwitchContext+0xc0>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000ab0 	.word	0x20000ab0
 8003f2c:	20000a9c 	.word	0x20000a9c
 8003f30:	20000a90 	.word	0x20000a90
 8003f34:	2000098c 	.word	0x2000098c
 8003f38:	20000988 	.word	0x20000988
 8003f3c:	200004f0 	.word	0x200004f0

08003f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f48:	f000 f852 	bl	8003ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <prvIdleTask+0x28>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d9f9      	bls.n	8003f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <prvIdleTask+0x2c>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f64:	e7f0      	b.n	8003f48 <prvIdleTask+0x8>
 8003f66:	bf00      	nop
 8003f68:	2000098c 	.word	0x2000098c
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	e00c      	b.n	8003f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <prvInitialiseTaskLists+0x60>)
 8003f88:	4413      	add	r3, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fb20 	bl	80035d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3301      	adds	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d9ef      	bls.n	8003f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f9c:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <prvInitialiseTaskLists+0x64>)
 8003f9e:	f7ff fb17 	bl	80035d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fa2:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <prvInitialiseTaskLists+0x68>)
 8003fa4:	f7ff fb14 	bl	80035d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fa8:	480c      	ldr	r0, [pc, #48]	; (8003fdc <prvInitialiseTaskLists+0x6c>)
 8003faa:	f7ff fb11 	bl	80035d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fae:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <prvInitialiseTaskLists+0x70>)
 8003fb0:	f7ff fb0e 	bl	80035d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb4:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <prvInitialiseTaskLists+0x74>)
 8003fb6:	f7ff fb0b 	bl	80035d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <prvInitialiseTaskLists+0x78>)
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <prvInitialiseTaskLists+0x64>)
 8003fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <prvInitialiseTaskLists+0x7c>)
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <prvInitialiseTaskLists+0x68>)
 8003fc4:	601a      	str	r2, [r3, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2000098c 	.word	0x2000098c
 8003fd4:	20000a18 	.word	0x20000a18
 8003fd8:	20000a2c 	.word	0x20000a2c
 8003fdc:	20000a48 	.word	0x20000a48
 8003fe0:	20000a5c 	.word	0x20000a5c
 8003fe4:	20000a74 	.word	0x20000a74
 8003fe8:	20000a40 	.word	0x20000a40
 8003fec:	20000a44 	.word	0x20000a44

08003ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff6:	e019      	b.n	800402c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ff8:	f000 f9f8 	bl	80043ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <prvCheckTasksWaitingTermination+0x50>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fb67 	bl	80036dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <prvCheckTasksWaitingTermination+0x54>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <prvCheckTasksWaitingTermination+0x54>)
 8004016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <prvCheckTasksWaitingTermination+0x58>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3b01      	subs	r3, #1
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <prvCheckTasksWaitingTermination+0x58>)
 8004020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004022:	f000 fa13 	bl	800444c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f810 	bl	800404c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <prvCheckTasksWaitingTermination+0x58>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e1      	bne.n	8003ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000a5c 	.word	0x20000a5c
 8004044:	20000a88 	.word	0x20000a88
 8004048:	20000a70 	.word	0x20000a70

0800404c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	334c      	adds	r3, #76	; 0x4c
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fc9d 	bl	8004998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fb43 	bl	80046f8 <vPortFree>
				vPortFree( pxTCB );
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb40 	bl	80046f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004078:	e018      	b.n	80040ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d103      	bne.n	800408c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fb37 	bl	80046f8 <vPortFree>
	}
 800408a:	e00f      	b.n	80040ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00a      	beq.n	80040ac <prvDeleteTCB+0x60>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60fb      	str	r3, [r7, #12]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <prvDeleteTCB+0x5e>
	}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <prvResetNextTaskUnblockTime+0x40>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <prvResetNextTaskUnblockTime+0x14>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <prvResetNextTaskUnblockTime+0x16>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <prvResetNextTaskUnblockTime+0x44>)
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040d6:	e008      	b.n	80040ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <prvResetNextTaskUnblockTime+0x40>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <prvResetNextTaskUnblockTime+0x44>)
 80040e8:	6013      	str	r3, [r2, #0]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000a40 	.word	0x20000a40
 80040f8:	20000aa8 	.word	0x20000aa8

080040fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <xTaskGetSchedulerState+0x34>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800410a:	2301      	movs	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e008      	b.n	8004122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <xTaskGetSchedulerState+0x38>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004118:	2302      	movs	r3, #2
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	e001      	b.n	8004122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004122:	687b      	ldr	r3, [r7, #4]
	}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000a94 	.word	0x20000a94
 8004134:	20000ab0 	.word	0x20000ab0

08004138 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004148:	4b28      	ldr	r3, [pc, #160]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fac4 	bl	80036dc <uxListRemove>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2201      	movs	r2, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4013      	ands	r3, r2
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004170:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d10a      	bne.n	8004190 <prvAddCurrentTaskToDelayedList+0x58>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	481a      	ldr	r0, [pc, #104]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800418a:	f7ff fa4c 	bl	8003626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800418e:	e026      	b.n	80041de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d209      	bcs.n	80041bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7ff fa59 	bl	800366c <vListInsert>
}
 80041ba:	e010      	b.n	80041de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7ff fa4f 	bl	800366c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d202      	bcs.n	80041de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6013      	str	r3, [r2, #0]
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000a8c 	.word	0x20000a8c
 80041ec:	20000988 	.word	0x20000988
 80041f0:	20000a90 	.word	0x20000a90
 80041f4:	20000a74 	.word	0x20000a74
 80041f8:	20000a44 	.word	0x20000a44
 80041fc:	20000a40 	.word	0x20000a40
 8004200:	20000aa8 	.word	0x20000aa8

08004204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3b04      	subs	r3, #4
 8004214:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800421c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b04      	subs	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b04      	subs	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <pxPortInitialiseStack+0x54>)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b14      	subs	r3, #20
 800423e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b20      	subs	r3, #32
 800424a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	0800425d 	.word	0x0800425d

0800425c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <prvTaskExitError+0x54>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d00a      	beq.n	8004286 <prvTaskExitError+0x2a>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <prvTaskExitError+0x28>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60bb      	str	r3, [r7, #8]
}
 8004298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800429a:	bf00      	nop
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0fc      	beq.n	800429c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200004ec 	.word	0x200004ec
	...

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	f04e 0e0d 	orr.w	lr, lr, #13
 80042de:	4770      	bx	lr

080042e0 <pxCurrentTCBConst2>:
 80042e0:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042e8:	4806      	ldr	r0, [pc, #24]	; (8004304 <prvPortStartFirstTask+0x1c>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	b662      	cpsie	i
 80042f4:	b661      	cpsie	f
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	df00      	svc	0
 8004300:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004302:	bf00      	nop
 8004304:	e000ed08 	.word	0xe000ed08

08004308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <xPortStartScheduler+0xd0>)
 8004310:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	22ff      	movs	r2, #255	; 0xff
 800431e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <xPortStartScheduler+0xd4>)
 8004334:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433c:	e009      	b.n	8004352 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800433e:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004346:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d0ef      	beq.n	800433e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	d00a      	beq.n	8004380 <xPortStartScheduler+0x78>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60bb      	str	r3, [r7, #8]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004388:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <xPortStartScheduler+0xd8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <xPortStartScheduler+0xd8>)
 8004394:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800439e:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <xPortStartScheduler+0xdc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <xPortStartScheduler+0xdc>)
 80043a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <xPortStartScheduler+0xdc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <xPortStartScheduler+0xdc>)
 80043b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043b6:	f000 f8b9 	bl	800452c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <xPortStartScheduler+0xe0>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043c0:	f7ff ff92 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043c4:	f7ff fd5a 	bl	8003e7c <vTaskSwitchContext>
	prvTaskExitError();
 80043c8:	f7ff ff48 	bl	800425c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000e400 	.word	0xe000e400
 80043dc:	20000ab4 	.word	0x20000ab4
 80043e0:	20000ab8 	.word	0x20000ab8
 80043e4:	e000ed20 	.word	0xe000ed20
 80043e8:	200004ec 	.word	0x200004ec

080043ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
}
 8004404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <vPortEnterCritical+0x58>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <vPortEnterCritical+0x58>)
 800440e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <vPortEnterCritical+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10f      	bne.n	8004438 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <vPortEnterCritical+0x5c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <vPortEnterCritical+0x4c>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	603b      	str	r3, [r7, #0]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <vPortEnterCritical+0x4a>
	}
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200004ec 	.word	0x200004ec
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <vPortExitCritical+0x4c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <vPortExitCritical+0x24>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	607b      	str	r3, [r7, #4]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <vPortExitCritical+0x4c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3b01      	subs	r3, #1
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <vPortExitCritical+0x4c>)
 8004478:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <vPortExitCritical+0x4c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <vPortExitCritical+0x42>
 8004482:	2300      	movs	r3, #0
 8004484:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800448c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	200004ec 	.word	0x200004ec
 800449c:	00000000 	.word	0x00000000

080044a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044a0:	f3ef 8009 	mrs	r0, PSP
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <pxCurrentTCBConst>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044b0:	6010      	str	r0, [r2, #0]
 80044b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ba:	f380 8811 	msr	BASEPRI, r0
 80044be:	f7ff fcdd 	bl	8003e7c <vTaskSwitchContext>
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044d6:	f380 8809 	msr	PSP, r0
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	4770      	bx	lr

080044e0 <pxCurrentTCBConst>:
 80044e0:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
}
 8004500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004502:	f7ff fbfd 	bl	8003d00 <xTaskIncrementTick>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <xPortSysTickHandler+0x40>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f383 8811 	msr	BASEPRI, r3
}
 800451e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <vPortSetupTimerInterrupt+0x30>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <vPortSetupTimerInterrupt+0x34>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <vPortSetupTimerInterrupt+0x38>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a09      	ldr	r2, [pc, #36]	; (8004568 <vPortSetupTimerInterrupt+0x3c>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	4a08      	ldr	r2, [pc, #32]	; (800456c <vPortSetupTimerInterrupt+0x40>)
 800454a:	3b01      	subs	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800454e:	4b03      	ldr	r3, [pc, #12]	; (800455c <vPortSetupTimerInterrupt+0x30>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	e000e010 	.word	0xe000e010
 8004560:	e000e018 	.word	0xe000e018
 8004564:	200004e0 	.word	0x200004e0
 8004568:	10624dd3 	.word	0x10624dd3
 800456c:	e000e014 	.word	0xe000e014

08004570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800457c:	f7ff fb16 	bl	8003bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004580:	4b58      	ldr	r3, [pc, #352]	; (80046e4 <pvPortMalloc+0x174>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004588:	f000 f910 	bl	80047ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800458c:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <pvPortMalloc+0x178>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 808e 	bne.w	80046b6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01d      	beq.n	80045dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045a0:	2208      	movs	r2, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	3308      	adds	r3, #8
 80045ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <pvPortMalloc+0x6c>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	617b      	str	r3, [r7, #20]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d069      	beq.n	80046b6 <pvPortMalloc+0x146>
 80045e2:	4b42      	ldr	r3, [pc, #264]	; (80046ec <pvPortMalloc+0x17c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d864      	bhi.n	80046b6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <pvPortMalloc+0x180>)
 80045ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045f0:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <pvPortMalloc+0x180>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045f6:	e004      	b.n	8004602 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d903      	bls.n	8004614 <pvPortMalloc+0xa4>
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f1      	bne.n	80045f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004614:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <pvPortMalloc+0x174>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	429a      	cmp	r2, r3
 800461c:	d04b      	beq.n	80046b6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	4413      	add	r3, r2
 8004626:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	2308      	movs	r3, #8
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	429a      	cmp	r2, r3
 800463e:	d91f      	bls.n	8004680 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <pvPortMalloc+0xf8>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	613b      	str	r3, [r7, #16]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800467a:	69b8      	ldr	r0, [r7, #24]
 800467c:	f000 f8f8 	bl	8004870 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <pvPortMalloc+0x17c>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <pvPortMalloc+0x17c>)
 800468c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <pvPortMalloc+0x17c>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <pvPortMalloc+0x184>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d203      	bcs.n	80046a2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <pvPortMalloc+0x17c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <pvPortMalloc+0x184>)
 80046a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <pvPortMalloc+0x178>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046b6:	f7ff fa87 	bl	8003bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <pvPortMalloc+0x16a>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <pvPortMalloc+0x168>
	return pvReturn;
 80046da:	69fb      	ldr	r3, [r7, #28]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20001ac4 	.word	0x20001ac4
 80046e8:	20001ad0 	.word	0x20001ad0
 80046ec:	20001ac8 	.word	0x20001ac8
 80046f0:	20001abc 	.word	0x20001abc
 80046f4:	20001acc 	.word	0x20001acc

080046f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d048      	beq.n	800479c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800470a:	2308      	movs	r3, #8
 800470c:	425b      	negs	r3, r3
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <vPortFree+0xac>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <vPortFree+0x44>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <vPortFree+0x62>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60bb      	str	r3, [r7, #8]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <vPortFree+0xac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d019      	beq.n	800479c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d115      	bne.n	800479c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <vPortFree+0xac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004780:	f7ff fa14 	bl	8003bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <vPortFree+0xb0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4413      	add	r3, r2
 800478e:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <vPortFree+0xb0>)
 8004790:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004792:	6938      	ldr	r0, [r7, #16]
 8004794:	f000 f86c 	bl	8004870 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004798:	f7ff fa16 	bl	8003bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20001ad0 	.word	0x20001ad0
 80047a8:	20001ac8 	.word	0x20001ac8

080047ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047b8:	4b27      	ldr	r3, [pc, #156]	; (8004858 <prvHeapInit+0xac>)
 80047ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3307      	adds	r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <prvHeapInit+0xac>)
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047e4:	4a1d      	ldr	r2, [pc, #116]	; (800485c <prvHeapInit+0xb0>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <prvHeapInit+0xb0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <prvHeapInit+0xb4>)
 800480c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <prvHeapInit+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <prvHeapInit+0xb4>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <prvHeapInit+0xb8>)
 800483a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a09      	ldr	r2, [pc, #36]	; (8004868 <prvHeapInit+0xbc>)
 8004842:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <prvHeapInit+0xc0>)
 8004846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800484a:	601a      	str	r2, [r3, #0]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000abc 	.word	0x20000abc
 800485c:	20001abc 	.word	0x20001abc
 8004860:	20001ac4 	.word	0x20001ac4
 8004864:	20001acc 	.word	0x20001acc
 8004868:	20001ac8 	.word	0x20001ac8
 800486c:	20001ad0 	.word	0x20001ad0

08004870 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004878:	4b27      	ldr	r3, [pc, #156]	; (8004918 <prvInsertBlockIntoFreeList+0xa8>)
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <prvInsertBlockIntoFreeList+0x14>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d8f7      	bhi.n	800487e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d108      	bne.n	80048b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d118      	bne.n	80048f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <prvInsertBlockIntoFreeList+0xac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d00d      	beq.n	80048ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e008      	b.n	8004900 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <prvInsertBlockIntoFreeList+0xac>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e003      	b.n	8004900 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d002      	beq.n	800490e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	20001abc 	.word	0x20001abc
 800491c:	20001ac4 	.word	0x20001ac4

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	2600      	movs	r6, #0
 8004924:	4d0c      	ldr	r5, [pc, #48]	; (8004958 <__libc_init_array+0x38>)
 8004926:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	f000 f8e2 	bl	8004af8 <_init>
 8004934:	2600      	movs	r6, #0
 8004936:	4d0a      	ldr	r5, [pc, #40]	; (8004960 <__libc_init_array+0x40>)
 8004938:	4c0a      	ldr	r4, [pc, #40]	; (8004964 <__libc_init_array+0x44>)
 800493a:	1b64      	subs	r4, r4, r5
 800493c:	10a4      	asrs	r4, r4, #2
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	08004c6c 	.word	0x08004c6c
 800495c:	08004c6c 	.word	0x08004c6c
 8004960:	08004c6c 	.word	0x08004c6c
 8004964:	08004c70 	.word	0x08004c70

08004968 <__retarget_lock_acquire_recursive>:
 8004968:	4770      	bx	lr

0800496a <__retarget_lock_release_recursive>:
 800496a:	4770      	bx	lr

0800496c <memset>:
 800496c:	4603      	mov	r3, r0
 800496e:	4402      	add	r2, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <cleanup_glue>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	460c      	mov	r4, r1
 8004980:	6809      	ldr	r1, [r1, #0]
 8004982:	4605      	mov	r5, r0
 8004984:	b109      	cbz	r1, 800498a <cleanup_glue+0xe>
 8004986:	f7ff fff9 	bl	800497c <cleanup_glue>
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004992:	f000 b869 	b.w	8004a68 <_free_r>
	...

08004998 <_reclaim_reent>:
 8004998:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <_reclaim_reent+0xb4>)
 800499a:	b570      	push	{r4, r5, r6, lr}
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4604      	mov	r4, r0
 80049a0:	4283      	cmp	r3, r0
 80049a2:	d051      	beq.n	8004a48 <_reclaim_reent+0xb0>
 80049a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049a6:	b143      	cbz	r3, 80049ba <_reclaim_reent+0x22>
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d14a      	bne.n	8004a44 <_reclaim_reent+0xac>
 80049ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	b111      	cbz	r1, 80049ba <_reclaim_reent+0x22>
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 f857 	bl	8004a68 <_free_r>
 80049ba:	6961      	ldr	r1, [r4, #20]
 80049bc:	b111      	cbz	r1, 80049c4 <_reclaim_reent+0x2c>
 80049be:	4620      	mov	r0, r4
 80049c0:	f000 f852 	bl	8004a68 <_free_r>
 80049c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049c6:	b111      	cbz	r1, 80049ce <_reclaim_reent+0x36>
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 f84d 	bl	8004a68 <_free_r>
 80049ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049d0:	b111      	cbz	r1, 80049d8 <_reclaim_reent+0x40>
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f848 	bl	8004a68 <_free_r>
 80049d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80049da:	b111      	cbz	r1, 80049e2 <_reclaim_reent+0x4a>
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 f843 	bl	8004a68 <_free_r>
 80049e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049e4:	b111      	cbz	r1, 80049ec <_reclaim_reent+0x54>
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f83e 	bl	8004a68 <_free_r>
 80049ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049ee:	b111      	cbz	r1, 80049f6 <_reclaim_reent+0x5e>
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 f839 	bl	8004a68 <_free_r>
 80049f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049f8:	b111      	cbz	r1, 8004a00 <_reclaim_reent+0x68>
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 f834 	bl	8004a68 <_free_r>
 8004a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a02:	b111      	cbz	r1, 8004a0a <_reclaim_reent+0x72>
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 f82f 	bl	8004a68 <_free_r>
 8004a0a:	69a3      	ldr	r3, [r4, #24]
 8004a0c:	b1e3      	cbz	r3, 8004a48 <_reclaim_reent+0xb0>
 8004a0e:	4620      	mov	r0, r4
 8004a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a12:	4798      	blx	r3
 8004a14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a16:	b1b9      	cbz	r1, 8004a48 <_reclaim_reent+0xb0>
 8004a18:	4620      	mov	r0, r4
 8004a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a1e:	f7ff bfad 	b.w	800497c <cleanup_glue>
 8004a22:	5949      	ldr	r1, [r1, r5]
 8004a24:	b941      	cbnz	r1, 8004a38 <_reclaim_reent+0xa0>
 8004a26:	3504      	adds	r5, #4
 8004a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a2a:	2d80      	cmp	r5, #128	; 0x80
 8004a2c:	68d9      	ldr	r1, [r3, #12]
 8004a2e:	d1f8      	bne.n	8004a22 <_reclaim_reent+0x8a>
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 f819 	bl	8004a68 <_free_r>
 8004a36:	e7ba      	b.n	80049ae <_reclaim_reent+0x16>
 8004a38:	680e      	ldr	r6, [r1, #0]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 f814 	bl	8004a68 <_free_r>
 8004a40:	4631      	mov	r1, r6
 8004a42:	e7ef      	b.n	8004a24 <_reclaim_reent+0x8c>
 8004a44:	2500      	movs	r5, #0
 8004a46:	e7ef      	b.n	8004a28 <_reclaim_reent+0x90>
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200004f0 	.word	0x200004f0

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_lock+0x8>)
 8004a52:	f7ff bf89 	b.w	8004968 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20001ad4 	.word	0x20001ad4

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f7ff bf84 	b.w	800496a <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20001ad4 	.word	0x20001ad4

08004a68 <_free_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	d040      	beq.n	8004af2 <_free_r+0x8a>
 8004a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a74:	1f0c      	subs	r4, r1, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfb8      	it	lt
 8004a7a:	18e4      	addlt	r4, r4, r3
 8004a7c:	f7ff ffe8 	bl	8004a50 <__malloc_lock>
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <_free_r+0x8c>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	b933      	cbnz	r3, 8004a94 <_free_r+0x2c>
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6014      	str	r4, [r2, #0]
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a90:	f7ff bfe4 	b.w	8004a5c <__malloc_unlock>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d908      	bls.n	8004aaa <_free_r+0x42>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	1821      	adds	r1, r4, r0
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	bf01      	itttt	eq
 8004aa0:	6819      	ldreq	r1, [r3, #0]
 8004aa2:	685b      	ldreq	r3, [r3, #4]
 8004aa4:	1809      	addeq	r1, r1, r0
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	e7ed      	b.n	8004a86 <_free_r+0x1e>
 8004aaa:	461a      	mov	r2, r3
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b10b      	cbz	r3, 8004ab4 <_free_r+0x4c>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x42>
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	1850      	adds	r0, r2, r1
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x6c>
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	4401      	add	r1, r0
 8004ac0:	1850      	adds	r0, r2, r1
 8004ac2:	4283      	cmp	r3, r0
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	d1e0      	bne.n	8004a8a <_free_r+0x22>
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4401      	add	r1, r0
 8004ace:	6011      	str	r1, [r2, #0]
 8004ad0:	6053      	str	r3, [r2, #4]
 8004ad2:	e7da      	b.n	8004a8a <_free_r+0x22>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x74>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	e7d6      	b.n	8004a8a <_free_r+0x22>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf01      	itttt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	1809      	addeq	r1, r1, r0
 8004aea:	6021      	streq	r1, [r4, #0]
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	6054      	str	r4, [r2, #4]
 8004af0:	e7cb      	b.n	8004a8a <_free_r+0x22>
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20001ad8 	.word	0x20001ad8

08004af8 <_init>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr

08004b04 <_fini>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr
